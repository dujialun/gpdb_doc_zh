<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="hz156255">pg_type</title>
  <body>
    <p><codeph>pg_type</codeph>系统目录表存储有关数据类型的信息。
      基类（标量类型）由<codeph>CREATE TYPE</codeph>创建。
      而域由<codeph>CREATE DOMAIN</codeph>创建。
      数据库中的每一个表都会有一个自动创建的组合类型，用于表示表的行结构。
      也可以使用<codeph>CREATE TYPE AS</codeph>创建组合类型。
      </p>
    <table id="hz156260">
      <title>pg_catalog.pg_type</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="col1" colwidth="119.25pt"/>
        <colspec colnum="2" colname="col2" colwidth="52pt"/>
        <colspec colnum="3" colname="col3" colwidth="103.5pt"/>
        <colspec colnum="4" colname="col4" colwidth="189pt"/>
        <thead>
          <row>
            <entry colname="col1">列</entry>
            <entry colname="col2">类型</entry>
            <entry colname="col3">参考</entry>
            <entry colname="col4">描述</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">
              <codeph>oid</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3"/>
            <entry colname="col4">行标识符（隐藏属性;必须显示选择）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typname</codeph>
            </entry>
            <entry colname="col2">name</entry>
            <entry colname="col3"/>
            <entry colname="col4">数据类型名称</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typnamespace</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_namespace.oid</entry>
            <entry colname="col4">包含此类型的命名空间的OID</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typowner</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_authid.oid</entry>
            <entry colname="col4">类型的拥有者</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typlen</codeph>
            </entry>
            <entry colname="col2">int2</entry>
            <entry colname="col3"/>
            <entry colname="col4">对于一个固定尺寸的类型，<codeph>typlen</codeph>是该类型内部表示的字节数。
              对于一个变长类型，<codeph>typlen</codeph>为负值。
              <codeph>-1</codeph>表示一个“varlena”类型（具有长度字），<codeph>-2</codeph>表示一个以null结尾的C字符串。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typbyval</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">决定内部例程传递这个类型的数值时是通过传值还是传引用方式。
              如果<codeph>typlen</codeph>不是1、2或4（或者在Datum为8字节的机器上为8），<codeph>typlen</codeph>最好是假。
              变长类型总是传引用。
              注意即使长度允许传值，<codeph>typbyval</codeph>也可以为假。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typtype</codeph>
            </entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4"><codeph>b</codeph>表示基类，<codeph>c</codeph>表示组合类型，
              <codeph>d</codeph>表示域，<codeph>e</codeph>表示枚举类型，<codeph>p</codeph>表示伪类型，或<codeph>r</codeph>表示范围类型。
              另见<codeph>typrelid</codeph>和<codeph>typbasetype</codeph>。</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typcategory</codeph>
            </entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">解析器使用的数据类型的任意分类，以确定应首选哪些隐式转换。
              请参阅<xref href="#topic1/typcategory" type="topic" format="dita">类别代码</xref>。</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typispreferred</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">如果类型是其<codeph>typcategory</codeph>中的首选转换目标，则为True</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typisdefined</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">如果定义了类型，则为True;如果是尚未定义的类型的占位符条目，则为false。
              如果为false，则可以依赖除类型名称，名称空间和OID之外的任何内容。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typdelim</codeph>
            </entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">解析数组输入时分隔此类型的两个值的字符。
              请注意，分隔符与数组元素数据类型相关联，而不是与数组数据类型相关联。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typrelid</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_class.oid</entry>
            <entry colname="col4">如果这是复合类型（请参阅<codeph>typtype</codeph>），则此列指向定义相应表的<codeph>pg_class</codeph>条目。
              （对于独立的复合类型，<codeph>pg_class</codeph>条目实际上并不代表表，但无论如何都需要将类型的<codeph>pg_attribute</codeph>条目链接到。）非复合类型为零。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typelem</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">如果不为<codeph>0</codeph>，则它标识<codeph>pg_type</codeph>中的另一行。
              然后，当前类型可以像数组一样下标，产生类型为<codeph>typelem</codeph>的值。
              “true”数组类型是可变长度（<codeph>typlen</codeph> = <codeph>-1</codeph>），
              但某些固定长度（<codeph>typlen</codeph> &gt; <codeph>0</codeph>）类型也具有非零<codeph>typelem</codeph>，例如<codeph>name</codeph>和<codeph>point</codeph>。
              如果固定长度类型有<codeph>typelem</codeph>，则其内部表示必须是<codeph>typelem</codeph>数据类型的某些值，而没有其他数据。
              可变长度数组类型具有由数组子例程定义的头。
              </entry>
          </row>
          <row>
            <entry colname="col1"><codeph>typarray</codeph></entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">如果不为0，则标识<codeph>pg_type</codeph>中的另一行，这是具有此类型作为其元素的“true”数组类型。
              使用<codeph>pg_type.typarray</codeph>查找与特定类型关联的数组类型。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typinput</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">输入转换函数（文本格式）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typoutput</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">输出转换函数（文本格式）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typreceive</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">输入转换函数（二进制格式），如果没有则为0</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typsend</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">输出转换函数（二进制格式），如果没有则为0</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typmodin</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">键入修饰符输入函数，如果类型不支持修饰符，则为0
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typmodout</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">键入修饰符输出函数，或0以使用标准格式</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typanalyze</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">自定义<codeph>ANALYZE</codeph>函数，0表示使用标准函数</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typalign</codeph>
            </entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">存储此类型的值时所需的对齐方式。
              它适用于磁盘上的存储以及Greenplum数据库中值的大多数表示。
              当连续存储多个值时，例如在磁盘上的完整行的表示中，在此类型的数据之前插入填充，以便它在指定的边界上开始。
              对齐参考是序列中第一个数据的开头。
              可能的值是：
              <p><codeph>c</codeph> = char对齐，即不需要对齐。</p>
              <p><codeph>s</codeph> = short对齐（在大部分机器上为2字节）。</p>
              <p><codeph>i</codeph> = int对齐（在大部分机器上为4字节）。</p>
              <p><codeph>d</codeph> = double对齐（在很多机器上为8字节，但绝不是全部）。</p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typstorage</codeph>
            </entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">对于varlena类型（具有<codeph>typlen</codeph> = -1的那些），告知该类型是否准备好toasting以及该类型的属性的默认策略应该是什么。
              可能的值是：
              <p><codeph>p</codeph>: 值必须明文存储。</p>
              <p><codeph>e</codeph>: 值可以存储在辅助关系中（如果关系有一个，请参阅<codeph>pg_class.reltoastrelid</codeph>）。</p>
              <p><codeph>m</codeph>: 值可以压缩内联存储。</p>
              <p><codeph>x</codeph>: 值可以内联压缩存储或存储在二级存储中。</p>
              <p>请注意，<codeph>m</codeph>列也可以移出到辅助存储，但仅作为最后的手段（首先移动<codeph>e</codeph>和<codeph>x</codeph>列）。</p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typnotnull</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">表示类型的非空约束。仅用于域。</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typbasetype</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">标识域所基于的类型。如果此类型不是域，则为零。</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typtypmod</codeph>
            </entry>
            <entry colname="col2">int4</entry>
            <entry colname="col3"/>
            <entry colname="col4">域使用<codeph>typtypmod</codeph>来记录要应用于其基类型的<codeph>typmod</codeph>（如果基类型不使用<codeph>typmod</codeph>，则为-1）。
              -1如果此类型不是域。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typndims</codeph>
            </entry>
            <entry colname="col2">int4</entry>
            <entry colname="col3"/>
            <entry colname="col4">域上数组的数组维数（如果<codeph>typbasetype</codeph>是数组类型）。
              除了数组类型的域以外的类型为零。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typcollation</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_collation.oid</entry>
            <entry colname="col4">指定类型的排序规则。
              如果类型不支持排序规则，则为零。
              对于支持排序规则的基本类型，该值为<codeph>DEFAULT_COLLATION_OID</codeph>。
              如果为域指定了一个域，则通过可折叠类型的域可以具有一些其他排序规则OID。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typdefaultbin</codeph>
            </entry>
            <entry colname="col2">pg_node_tree</entry>
            <entry colname="col3"/>
            <entry colname="col4">如果不为null，则为该类型的默认表达式的<codeph>nodeToString()</codeph>表示。
              这仅用于域。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typdefault</codeph>
            </entry>
            <entry colname="col2">text</entry>
            <entry colname="col3"/>
            <entry colname="col4">如果类型没有关联的默认值，则为null。
              如果<codeph>typdefaultbin</codeph>不为null，则<codeph>typdefault</codeph>必须包含由<codeph>typdefaultbin</codeph>表示的默认表达式的人类可读版本。
              如果<codeph>typdefaultbin</codeph>为null且<codeph>typdefault</codeph>不为null，则<codeph>typdefault</codeph>是类型默认值的外部表示，可以将其输入到类型的输入转换器以生成常量。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>typacl</codeph>
            </entry>
            <entry colname="col2">aclitem[]</entry>
            <entry colname="col3"/>
            <entry colname="col4">访问权限; 有关详细信息，
              请参阅<codeph><xref href="../sql_commands/GRANT.xml#topic1" type="topic" format="dita"/></codeph>和<codeph><xref href="../sql_commands/REVOKE.xml#topic1" type="topic" format="dita"/></codeph>。
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <p>下表列出了<codeph>typcategory</codeph>的系统定义值。
      此列表的任何未来添加项也将是大写ASCII字母。
      所有其他ASCII字符都保留给用户定义的类别。
      </p>
    <table id="typcategory">
      <title>typcategory Codes</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="col1" colwidth="52pt"/>
        <colspec colnum="2" colname="col2" colwidth="352pt"/>
        <thead>
          <row>
            <entry colname="col1">代码</entry>
            <entry colname="col2">种类</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">A</entry>
            <entry colname="col2">数组类型</entry>
          </row>
          <row>
            <entry colname="col1">B</entry>
            <entry colname="col2">布尔类型</entry>
          </row>
          <row>
            <entry colname="col1">C</entry>
            <entry colname="col2">复合类型</entry>
          </row>
          <row>
            <entry colname="col1">D</entry>
            <entry colname="col2">日期/时间类型</entry>
          </row>
          <row>
            <entry colname="col1">E</entry>
            <entry colname="col2">枚举类型</entry>
          </row>
          <row>
            <entry colname="col1">G</entry>
            <entry colname="col2">几号类型</entry>
          </row>
          <row>
            <entry colname="col1">I</entry>
            <entry colname="col2">网络地址类型</entry>
          </row>
          <row>
            <entry colname="col1">N</entry>
            <entry colname="col2">数字类型</entry>
          </row>
          <row>
            <entry colname="col1">P</entry>
            <entry colname="col2">伪类型</entry>
          </row>
          <row>
            <entry colname="col1">R</entry>
            <entry colname="col2">范围类型</entry>
          </row>
          <row>
            <entry colname="col1">S</entry>
            <entry colname="col2">字符串类型</entry>
          </row>
          <row>
            <entry colname="col1">T</entry>
            <entry colname="col2">时间跨度类型</entry>
          </row>
          <row>
            <entry colname="col1">U</entry>
            <entry colname="col2">用户自定义类型</entry>
          </row>
          <row>
            <entry colname="col1">V</entry>
            <entry colname="col2">位串类型</entry>
          </row>
          <row>
            <entry colname="col1">X</entry>
            <entry colname="col2">未知类型</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>
