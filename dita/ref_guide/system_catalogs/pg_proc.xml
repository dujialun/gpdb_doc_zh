<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="hg141670">pg_proc</title>
  <body>
    <p><codeph>pg_proc</codeph>系统目录表存储关于函数（或过程）的信息，包括所有的内建函数以及由<codeph>CREATE FUNCTION</codeph>定义的函数。
      该表也包含了聚集和窗口函数以及普通函数的数据。
      如果<codeph>proisagg</codeph>为真，在<codeph>pg_aggregate</codeph>中应该有一个相匹配的行。
      </p>
    <p>对于内置和动态加载的已编译函数，<codeph>prosrc</codeph>包含函数的C语言名称（链接符号）。
      对于所有其他当前已知的语言类型，<codeph>prosrc</codeph>包含函数的源文本。
      除了动态加载的C函数之外，<codeph>probin</codeph>是未使用的，它为此提供了包含该函数的共享库文件的名称。
      </p>
    <table id="hg150092">
      <title>pg_catalog.pg_proc</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="col1" colwidth="131pt"/>
        <colspec colnum="2" colname="col2" colwidth="69pt"/>
        <colspec colnum="3" colname="col3" colwidth="104.25pt"/>
        <colspec colnum="4" colname="col4" colwidth="147pt"/>
        <thead>
          <row>
            <entry colname="col1">列</entry>
            <entry colname="col2">类型</entry>
            <entry colname="col3">参考</entry>
            <entry colname="col4">描述</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">
              <codeph>oid</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3"/>
            <entry colname="col4">行标识符（隐藏属性;必须显式选择）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proname</codeph>
            </entry>
            <entry colname="col2">name</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数的名字</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>pronamespace</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_namespace.oid</entry>
            <entry colname="col4">函数所属的名字空间的OID</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proowner</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_authid.oid</entry>
            <entry colname="col4">函数的拥有者</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>prolang</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_language.oid</entry>
            <entry colname="col4">该函数的实现语言或调用接口</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>procost</codeph>
            </entry>
            <entry colname="col2">float4</entry>
            <entry colname="col3"/>
            <entry colname="col4">估计的执行代价（以cpu_operator_cost为单位），如果<codeph>proretset</codeph>为<codeph>true</codeph>，这是返回每行的代价
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>prorows</codeph>
            </entry>
            <entry colname="col2">float4</entry>
            <entry colname="col3"/>
            <entry colname="col4">估计的结果行数（如果不是<codeph>proretset</codeph>则为零）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>provariadic</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">可变数组参数的元素的数据类型，如果函数没有可变参数则为0</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>protransform</codeph>
            </entry>
            <entry colname="col2">regproc</entry>
            <entry colname="col3">pg_proc.oid</entry>
            <entry colname="col4">这个函数可以简化对此函数的调用</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proisagg</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数是否为一个聚集函数</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proiswindow</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">功能是否为一个窗口函数</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>prosecdef</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数是一个安全性定义器（例如，一个"setuid"函数）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proleakproof</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">该功能没有副作用。
              除了通过返回值之外，不会传达有关参数的信息。
              任何可能根据其参数的值抛出错误的函数都不是防漏的。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proisstrict</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">当任意调用参数为空时，函数是否会返回空值。
              在那种情况下函数实际上根本不会被调用。
              非“strict”函数必须准备好处理空值输入。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proretset</codeph>
            </entry>
            <entry colname="col2">boolean</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数是否返回一个集合（即，指定数据类型的多个值）</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>provolatile</codeph>
            </entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">说明函数的结果是仅依赖于它的输入参数，还是会被外部因素影响。
              值<codeph>i</codeph>表示“不变的”函数，它对于相同的输入总是输出相同的结果。
              值<codeph>s</codeph>表示“稳定的”函数，它的结果（对于固定输入）在一次扫描内不会变化。
              值<codeph>v</codeph>表示“不稳定的”函数，它的结果在任何时候都可能变化（使用具有副作用，结果可能在任何时刻发生改变）。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>pronargs</codeph>
            </entry>
            <entry colname="col2">int2</entry>
            <entry colname="col3"/>
            <entry colname="col4">输入参数的个数</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>pronargdefaults</codeph>
            </entry>
            <entry colname="col2">int2</entry>
            <entry colname="col3"/>
            <entry colname="col4">具有默认值的参数个数</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>prorettype</codeph>
            </entry>
            <entry colname="col2">oid</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">返回值的数据类型</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proargtypes</codeph>
            </entry>
            <entry colname="col2">oidvector</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">函数参数的数据类型的数组。
              这只包括输入参数（包括<codeph>INOUT</codeph>和<codeph>VARIADIC</codeph>参数），因此也表现了函数的调用特征。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proallargtypes</codeph>
            </entry>
            <entry colname="col2">oid[]</entry>
            <entry colname="col3">pg_type.oid</entry>
            <entry colname="col4">函数参数的数据类型的数组。
              这包括所有参数（含<codeph>OUT</codeph>和<codeph>INOUT</codeph>参数）。
              不过，如果所有参数都是<codeph>IN</codeph>参数，这个属性将为空。
              注意下标是从1开始，然而由于历史原因<codeph>proargtypes</codeph>的下标是从0开始。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proargmodes</codeph>
            </entry>
            <entry colname="col2">char[]</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数参数的模式的数组：<codeph>i</codeph>表示<codeph>IN</codeph>参数，<codeph>o</codeph>表示<codeph>OUT</codeph>参数，<codeph>b</codeph>表示<codeph>INOUT</codeph>参数，<codeph>v</codeph>表示<codeph>VARIADIC</codeph>参数。
              如果所有的参数都是IN参数，这个属性为空。
              注意这里的下标对应着<codeph>proallargtypes</codeph>而不是<codeph>proargtypes</codeph>中的位置。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proargnames</codeph>
            </entry>
            <entry colname="col2"> text[] </entry>
            <entry colname="col3"/>
            <entry colname="col4">函数参数的名字的数组。
              没有名字的参数在数组中设置为空字符串。
              如果没有一个参数有名字，这个属性为空。
              注意这里的下标对应着<codeph>proallargtypes</codeph>而不是<codeph>proargtypes</codeph>中的位置。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proargdefaults</codeph>
            </entry>
            <entry colname="col2">pg_node_tree</entry>
            <entry colname="col3"/>
            <entry colname="col4">表达式树（在<codeph>nodeToString()</codeph>表示中）用于默认参数值。
              这是一个带有<codeph>pronargdefaults</codeph>元素的列表，对应于最后<varname>N</varname>个输入参数（即最后<varname>N</varname>个<codeph>proargtypes</codeph>位置）。
              如果没有参数具有默认值，则此字段将为null。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>prosrc </codeph>
            </entry>
            <entry colname="col2">text</entry>
            <entry colname="col3"/>
            <entry colname="col4">这个域告诉函数处理者如何调用该函数。
              它可能是针对解释型语言的实际源码、一个符号链接、一个文件名或任何其他东西，这取决于实现语言/调用规范。
              </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>probin</codeph>
            </entry>
            <entry colname="col2">text</entry>
            <entry colname="col3"/>
            <entry colname="col4">关于如何调用函数的附加信息。
              同样，其解释是与语言相关的。</entry>
          </row>
          <row>
            <entry colname="col1"><codeph>proconfig</codeph></entry>
            <entry colname="col2">text[]</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数的运行时配置变量的本地设置。</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>proacl</codeph>
            </entry>
            <entry colname="col2">aclitem[]</entry>
            <entry colname="col3"/>
            <entry colname="col4"><codeph>GRANT</codeph>/<codeph>REVOKE</codeph>给出的函数访问权限</entry>
          </row>
          <row>
            <entry colname="col1"><codeph>prodataaccess</codeph></entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">提供有关函数中包含的SQL语句类型的提示：<codeph>n</codeph>  - 不包含SQL，<codeph>c</codeph>  - 包含SQL，<codeph>r</codeph>  - 包含读取数据的SQL，<codeph>m</codeph>  - 包含修改数据的SQL
              </entry>
          </row>
          <row>
            <entry colname="col1"><codeph>proexeclocation</codeph></entry>
            <entry colname="col2">char</entry>
            <entry colname="col3"/>
            <entry colname="col4">函数在调用时执行的位置：<codeph>m</codeph>  - 仅限master，<codeph>a</codeph>  - 任何段实例，<codeph>s</codeph>  - 所有段实例。
              </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>
