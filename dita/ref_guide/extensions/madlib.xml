<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pz212122">用于分析的Greenplum MADlib扩展</title>
  <body>
    <p>本章节包含了以下信息：</p>
    <ul>
      <li id="pz219023"><xref href="#topic2" type="topic" format="dita"/></li>
      <li id="pz213664" otherprops="pivotal"><xref href="#topic3" type="topic" format="dita"/></li>
      <li otherprops="pivotal"><xref href="#topic_eqm_klx_hw" format="dita"/></li>
      <li id="pz213668" otherprops="pivotal"><xref href="#topic6" type="topic" format="dita"/></li>
      <li id="pz215253"><xref href="#topic9" type="topic" format="dita"/></li>
      <li id="pz213676"><xref href="#topic10" type="topic" format="dita"/></li>
    </ul>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="pz217886">关于 MADlib</title>
    <body>
      <p>MADlib是一个可扩展数据库分析的开源库。
          通过Greenplum的MADlib扩展，用户可以在Greenplum数据库中使用MADlib功能。
        </p>
      <p>MADlib为结构化数据以及非结构化数据提供了数学、统计学以及机器学习方法的数据并行的实现。
          它提供了一整套基于SQL的机器学习、数据挖掘以及统计学算法，只需要运行在数据库引擎中，而不需要在Greenplum和其它工具之间进行数据的传递。
        </p>
      <p>MADlib需要<codeph>m4</codeph>宏处理器版本1.4.13或更高版本。
        </p>
      <p>MADlib可以与PivotalR一同使用，一个PivotalR包允许用户使用R客户端同Greenplum的数据进行交互。
          见<xref href="#topic_dxp_vq2_sv" format="dita"/>。
        </p>
    </body>
  </topic>
  <topic id="topic3" xml:lang="en" otherprops="pivotal">
    <title id="pz214493">Installing MADlib</title>
    <body>
      <p>To install MADlib on Greenplum Database, you first install a compatible Greenplum MADlib
        package and then install the MADlib function libraries on all databases that will use
        MADlib.</p>
      <p>The <codeph><xref href="../../utility_guide/admin_utilities/gppkg.xml#topic1"
          >gppkg</xref></codeph> utility installs Greenplum Database extensions, along with any
        dependencies, on all hosts across a cluster. It also automatically installs extensions on
        new hosts in the case of system expansion segment recovery. </p>
    </body>
    <topic id="topic4" xml:lang="en">
      <title>Installing the Greenplum Database MADlib Package</title>
      <body>
        <p>Before you install the MADlib package, make sure that your Greenplum database is running,
          you have sourced <codeph>greenplum_path.sh</codeph>, and that the<codeph>
            $MASTER_DATA_DIRECTORY</codeph> and <codeph>$GPHOME</codeph> variables are set.</p>
        <ol>
          <li id="pz214496" otherprops="pivotal">Download the MADlib extension package from <xref
              href="https://network.pivotal.io/products/pivotal-gpdb" format="html" scope="external"
              >Pivotal Network</xref>.</li>
          <li>Copy the MADlib package to the Greenplum Database master host.</li>
          <li>Unpack the MADlib distribution package. For
            example:<codeblock>$ tar xzvf madlib-1.15-gp5-rhel7-x86_64.tar.gz</codeblock></li>
          <li id="pz216990">Install the software package by running the <codeph>gppkg</codeph>
            command. For
            example:<codeblock>$ gppkg -i ./madlib-1.15-gp5-rhel7-x86_64/madlib-1.15-gp5-rhel7-x86_64.gppkg</codeblock></li>
        </ol>
      </body>
    </topic>
    <topic id="topic5" xml:lang="en">
      <title>Adding MADlib Functions to a Database</title>
      <body>
        <p>After installing the MADlib package, run the <codeph>madpack</codeph> command to add
          MADlib functions to Greenplum Database. <codeph>madpack</codeph> is in
            <codeph>$GPHOME/madlib/bin</codeph>. </p>
        <codeblock>$ madpack [-s <varname>schema_name</varname>] -p greenplum -c <varname>user</varname>@<varname>host</varname>:<varname>port</varname>/<varname>database</varname> install</codeblock>
        <p>For example, this command creates MADlib functions in the Greenplum database
            <codeph>testdb</codeph> running on server <codeph>mdw</codeph> on port
            <codeph>5432</codeph>. The <codeph>madpack</codeph> command logs in as the user
            <codeph>gpadmin</codeph> and prompts for password. The target schema is
            <codeph>madlib</codeph>.</p>
        <codeblock>$ madpack -s madlib -p greenplum -c gpadmin@mdw:5432/testdb install</codeblock>
        <p>After installing the functions, The Greenplum Database gpadmin superuser role should
          grant all privileges on the target schema (in the example <codeph>madlib</codeph>) to
          users who will be accessing MADlib functions. Users without access to the functions will
          get the error <codeph>ERROR: permission denied for schema MADlib</codeph>.</p>
        <p>The madpack <codeph>install-check</codeph> option runs test using Madlib modules to check
          the MADlib installation:</p>
        <codeblock>$ madpack -s madlib -p greenplum -c gpadmin@mdw:5432/testdb install-check</codeblock>
        <note type="note">The command <codeph>madpack -h</codeph> displays information for the
          utility.</note>
      </body>
    </topic>
  </topic>
  <topic id="topic_eqm_klx_hw" otherprops="pivotal">
    <title>Upgrading MADlib </title>
    <body>
      <p>You upgrade an installed MADlib package with the Greenplum Database <codeph>gppkg</codeph>
        utility and the MADlib <codeph>madpack</codeph> command.</p>
      <p>For information about the upgrade paths that MADlib supports, see the MADlib support and
        upgrade matrix in the <xref
          href="https://cwiki.apache.org/confluence/display/MADLIB/FAQ#FAQ-Q1-2WhatdatabaseplatformsdoesMADlibsupportandwhatistheupgradematrix?"
          format="html" scope="external">MADlib FAQ page</xref>.</p>
    </body>
    <topic id="topic_tb3_2gd_3w">
      <title>Upgrading a MADlib Package</title>
      <body>
        <p>To upgrade MADlib, run the <codeph>gppkg</codeph> utility with the <codeph>-u</codeph>
          option. This command upgrades an installed MADlib package to MADlib
          1.15.<codeblock>$ gppkg -u madlib-1.15-gp5-rhel7-x86_64.gppkg</codeblock></p>
      </body>
    </topic>
    <topic id="topic_bql_bgd_3w">
      <title>Upgrading MADlib Functions</title>
      <body>
        <p>After you upgrade the MADlib package, you run the <codeph>madpack upgrade</codeph>
          command to upgrade the MADlib functions in Greenplum Database. </p>
        <note>The upgrade to MADlib 1.13 has a minor issue with some leftover <codeph>knn</codeph>
          functions. <p>Before running the <codeph>madpack</codeph> command to upgrade to MADlib
            1.13, run these <codeph>psql</codeph> commands as the <codeph>gpadmin</codeph> user to
            drop the leftover functions from the databases where MADlib is
              installed.</p><codeblock>psql <varname>db_name</varname> -c "DROP FUNCTION IF EXISTS <varname>schema</varname>.knn(VARCHAR);"
psql <varname>db_name</varname> -c "DROP FUNCTION IF EXISTS <varname>schema</varname>.knn();"</codeblock><p><varname>db_name</varname>
            is the name of the database. <varname>schema</varname> is the name of the MADlib
            schema.</p><p>See the <xref
              href="https://cwiki.apache.org/confluence/display/MADLIB/Installation+Guide#InstallationGuide-01/11/18-UpgradingMADlibto1.13"
              format="html" scope="external">MADlib Installation Guide</xref>.</p></note>
        <p>The <codeph>madpack upgrade</codeph> command upgrades the MADlib functions in the
          database schema. This example command upgrades the MADlib functions in the schema
            <codeph>madlib</codeph> of the Greenplum Database <codeph>test</codeph>. </p>
        <codeblock>madpack -s madlib -p greenplum -c gpadmin@mdw:5432/testdb upgrade</codeblock>
      </body>
    </topic>
  </topic>
  <topic id="topic6" xml:lang="en" otherprops="pivotal">
    <title id="pz213704">Uninstalling MADlib</title>
    <body>
      <ul>
        <li id="pz217030"><xref href="#topic7" type="topic" format="dita"/></li>
        <li id="pz217049"><xref href="#topic8" type="topic" format="dita"/></li>
      </ul>
      <p>When you remove MADlib support from a database, routines that you created in the database
        that use MADlib functionality will no longer work. </p>
    </body>
    <topic id="topic7" xml:lang="en">
      <title id="pz217588">Remove MADlib objects from the database</title>
      <body>
        <p>Use the <codeph>madpack uninstall</codeph> command to remove MADlib objects from a
          Greenplum database. For example, this command removes MADlib objects from the database
            <codeph>testdb</codeph>.</p>
        <codeblock>$ madpack  -s madlib -p greenplum -c gpadmin@mdw:5432/testdb uninstall</codeblock>
      </body>
    </topic>
    <topic id="topic8" xml:lang="en">
      <title id="pz213708">Uninstall the Greenplum Database MADlib Package</title>
      <body>
        <p>If no databases use the MADlib functions, use the Greenplum <codeph>gppkg</codeph>
          utility with the <codeph>-r</codeph> option to uninstall the MADlib package. When removing
          the package you must specify the package and version. This example uninstalls MADlib
          package version 1.4.</p>
        <codeblock>$ gppkg -r madlib-1.14-gp5-rhel7-x86_64</codeblock>
        <p>You can run the <codeph>gppkg</codeph> utility with the options <codeph>-q --all</codeph>
          to list the installed extensions and their versions.</p>
        <p>After you uninstall the package, restart the database.</p>
        <codeblock>$ gpstop -r</codeblock>
      </body>
    </topic>
  </topic>
  <topic id="topic9" xml:lang="en">
    <title id="pz215232">示例</title>
    <body>
      <p>下面是使用GreenplumMADlib扩展的示例：</p>
      <ul id="ul_wr3_lss_bz">
        <li><xref href="#topic9/mlogr" format="dita">线性回归</xref></li>
        <li><xref href="#topic9/assoc_rules" format="dita"/></li>
        <li><xref href="#topic9/naive_bayes" format="dita"/></li>
      </ul>
      <p>见MADlib文档获取更多的示例。</p>
      <section id="mlogr">
        <title>线性回归</title>
        <p>该示例是在表<codeph>regr_example</codeph>执行一个线性回归。
            因变量数据在<codeph>y</codeph>列中，独立变量数据在<codeph>x1</codeph>和<codeph>x2</codeph>列中。
            </p>
        <p>下面的语句创建<codeph>regr_example</codeph>表同时加载样本数据：
            </p>
        <codeblock>DROP TABLE IF EXISTS regr_example;
CREATE TABLE regr_example (
   id int,
   y int,
   x1 int,
   x2 int
);
INSERT INTO regr_example VALUES 
   (1,  5, 2, 3),
   (2, 10, 7, 2),
   (3,  6, 4, 1),
   (4,  8, 3, 4);</codeblock>
        <p>MADlib的<codeph>linregr_train()</codeph>函数产生一个根据一个输入表包含的训练数据产生一个回归模型。
            下面的<codeph>SELECT</codeph>语句在表<codeph>regr_example</codeph>执行一个简单的多元回归同时保存模型在表<codeph>reg_example_model</codeph>中。
            </p>
        <codeblock>SELECT madlib.linregr_train (
   'regr_example',         -- source table
   'regr_example_model',   -- output model table
   'y',                    -- dependent variable 
   'ARRAY[1, x1, x2]'      -- independent variables
);
</codeblock>
        <p><codeph>madlib.linregr_train()</codeph>函数能够添加参数来设置分组的列以及计算模型的异方差性。
            </p>
        <note type="note">截距通过将一个独立变量设置为常数<codeph>1</codeph>来计算，如前一个例子所示。
            </note>
        <p>在表<codeph>regr_example</codeph>上执行该查询并创建带有一行数据的<codeph>regr_example_model</codeph>表：
            </p>
        <codeblock>SELECT * FROM regr_example_model;
-[ RECORD 1 ]------------+------------------------
coef                     | {0.111111111111127,1.14814814814815,1.01851851851852}
r2                       | 0.968612680477111
std_err                  | {1.49587911309236,0.207043331249903,0.346449758034495}
t_stats                  | {0.0742781352708591,5.54544858420156,2.93987366103776}
p_values                 | {0.952799748147436,0.113579771006374,0.208730790695278}
condition_no             | 22.650203241881
num_rows_processed       | 4
num_missing_rows_skipped | 0
variance_covariance      | {{2.23765432098598,-0.257201646090342,-0.437242798353582},
                            {-0.257201646090342,0.042866941015057,0.0342935528120456},
                            {-0.437242798353582,0.0342935528120457,0.12002743484216}}</codeblock>
        <p>被保存到<codeph>regr_example_model</codeph>表中的模型能够同MADlib线性回归预测函数使用，
            <codeph>madlib.linregr_predict()</codeph>来查看残差：
            </p>
        <codeblock>SELECT regr_example.*, 
        madlib.linregr_predict ( ARRAY[1, x1, x2], m.coef ) as predict,
        y - madlib.linregr_predict ( ARRAY[1, x1, x2], m.coef ) as residual
FROM regr_example, regr_example_model m;
 id | y  | x1 | x2 |     predict      |      residual
----+----+----+----+------------------+--------------------
  1 |  5 |  2 |  3 | 5.46296296296297 | -0.462962962962971
  3 |  6 |  4 |  1 | 5.72222222222224 |  0.277777777777762
  2 | 10 |  7 |  2 | 10.1851851851852 | -0.185185185185201
  4 |  8 |  3 |  4 | 7.62962962962964 |  0.370370370370364
(4 rows)</codeblock>
      </section>
      <section id="assoc_rules">
        <title>关联规则</title>
        <p>这个例子说明了关联规则的数据挖掘技术在交易数据集。
            关联规则挖掘是发现大数据集中的变量之间关系的技术。
            这个例子将考虑那些在商店中通常一起购买的物品。
            除了购物篮分析，关联规则也应用在生物信息学中，网络分析，和其他领域。
            </p>
        <p>这个例子分析利用MADlib函数<codeph>MADlib.assoc_rules</codeph>分析存储在表中的关于七个交易的购买信息。
            函数假定数据存储在两列中，每行有一个物品和交易ID。
            多个物品的交易，包括多个行，每行一个物品。
            </p>
        <p>这些命令创建表。</p>
        <codeblock>DROP TABLE IF EXISTS test_data;
CREATE TABLE test_data (
   trans_id INT,
   product text
);</codeblock>
        <p>该<codeph>INSERT</codeph>命令向表中添加数据。</p>
        <codeblock>INSERT INTO test_data VALUES 
   (1, 'beer'),
   (1, 'diapers'),
   (1, 'chips'),
   (2, 'beer'),
   (2, 'diapers'),
   (3, 'beer'),
   (3, 'diapers'),
   (4, 'beer'),
   (4, 'chips'),
   (5, 'beer'),
   (6, 'beer'),
   (6, 'diapers'),
   (6, 'chips'),
   (7, 'beer'),
   (7, 'diapers');</codeblock>
        <p>MADlib函数<codeph>madlib.assoc_rules()</codeph>分析数据同时确定具有以下特征的关联规则。
            </p>
        <ul>
          <li id="pz218950">一个值至少为.40的支持率。支持率表示包含X的交易与所有交易的比。</li>
          <li id="pz218637">一个值至少为.75的置信率。
              置信率表示包含X的交易与包含Y的交易的比。可以将该度量看做给定Y下X的条件概率。
              </li>
        </ul>
        <p>该<codeph>SELECT</codeph>命令确定关联规则，创建表<codeph>assoc_rules</codeph>同时添加统计信息到表中。
            </p>
        <codeblock>SELECT * FROM madlib.assoc_rules (
   .40,          -- support
   .75,          -- confidence
   'trans_id',   -- transaction column
   'product',    -- product purchased column
   'test_data',  -- table name
   'public',     -- schema name
   false);       -- display processing details</codeblock>
        <p>这是<codeph>SELECT</codeph>命令的输出。
            这有两条符合特征的规则。
            </p>
        <codeblock>
 output_schema | output_table | total_rules | total_time 
--------------+--------------+-------------+-----------------  
public        | assoc_rules  |           2 | 00:00:01.153283 
(1 row)</codeblock>
        <p>为了查看关联规则，用户可以使用该SELECT命令。</p>
        <codeblock>SELECT pre, post, support FROM assoc_rules 
   ORDER BY support DESC;</codeblock>
        <p>这是输出。<codeph>pre</codeph>和<codeph>post</codeph>列分别是关联规则左右两边的项集。
            </p>
        <codeblock>    pre    |  post  |      support
-----------+--------+-------------------
 {diapers} | {beer} | 0.714285714285714
 {chips}   | {beer} | 0.428571428571429
(2 rows)</codeblock>
        <p>基于数据，啤酒和尿布经常一起购买。
            为了增加销售额，用户可以考虑将啤酒和尿布放在一个架子上。
            </p>
      </section>
      <section id="naive_bayes">
        <title>朴素贝叶斯分类</title>
        <p>朴素贝叶斯分析，基于一个或多个独立变量或属性，预测一类变量或类结果的可能性。
            类变量是非数值类型变量，一个变量可以有一个数量有限的值或类别。
            类变量表示的整数，每个整数表示一个类别。
            例如，如果类别可以是一个“真”、“假”，或“未知”的值，那么变量可以表示为整数1, 2或3。
            </p>
        <p>属性可以是数值类型、非数值类型以及类类型。
            训练函数有两个签名 - 一个用于所有属性为数值 另外一个用于混合数值和类类型的情况。
            后者的附加参数标识那些应该被当做数字值处理的属性。
            属性以数组的形式提交给训练函数。
            </p>
        <p>MADlib朴素贝叶斯训练函数产生一个特征概率表和一个类的先验表，该表可以同预测函数使用为属性集提供一个类别的概率。
            </p>
      </section>
      <p><b>朴素贝叶斯示例 1 - 简单的所有都是数值属性</b></p>
      <p>在第一个示例中，类变量取值为1或者2，同时这里有三个整型属性。
        </p>
      <ol id="ol_ttz_13y_1z">
        <li>下面的命令创建输入表以及加载样本数据。
            <codeblock>DROP TABLE IF EXISTS class_example CASCADE;
CREATE TABLE class_example (
   id int, class int, attributes int[]);
INSERT INTO class_example VALUES
   (1, 1, '{1, 2, 3}'),
   (2, 1, '{1, 4, 3}'),
   (3, 2, '{0, 2, 2}'),
   (4, 1, '{1, 2, 1}'),
   (5, 2, '{1, 2, 2}'),
   (6, 2, '{0, 1, 3}');</codeblock>
            <p>在生产环境中的实际数据比该示例中的数据量更大，也能获得更好的结果。
                更大的训练数据集能够显著地提高分类的精确度。
                </p></li>
        <li>使用<codeph>create_nb_prepared_data_tables()</codeph>函数训练模型。
            <codeblock>SELECT * FROM madlib.create_nb_prepared_data_tables (
   'class_example',         -- name of the training table 
   'class',                 -- name of the class (dependent) column
   'attributes',            -- name of the attributes column
   3,                       -- the number of attributes
   'example_feature_probs', -- name for the feature probabilities output table
   'example_priors'         -- name for the class priors output table
    );
</codeblock></li>
        <li>为了使用模型进行分类，创建带有数据的表。
            <codeblock>DROP TABLE IF EXISTS class_example_topredict;
CREATE TABLE class_example_topredict ( 
   id int, attributes int[]);
INSERT INTO class_example_topredict VALUES 
   (1, '{1, 3, 2}'),
   (2, '{4, 2, 2}'),
   (3, '{2, 1, 1}');</codeblock>
        </li>
        <li>用特征概率、类的先验和<codeph>class_example_topredict</codeph>表创建一个分类视图。
          <codeblock>SELECT madlib.create_nb_probs_view (
   'example_feature_probs',    -- feature probabilities output table
   'example_priors',           -- class priors output table
   'class_example_topredict',  -- table with data to classify
   'id',                       -- name of the key column
   'attributes',               -- name of the attributes column
    3,                         -- number of attributes
    'example_classified'       -- name of the view to create
    );
</codeblock></li>
        <li>显示分类结果。
            <codeblock>SELECT * FROM example_classified;
 key | class | nb_prob
-----+-------+---------
   1 |     1 |     0.4
   1 |     2 |     0.6
   3 |     1 |     0.5
   3 |     2 |     0.5
   2 |     1 |    0.25
   2 |     2 |    0.75
(6 rows)</codeblock></li>
      </ol>
      <p><b>朴素贝叶斯示例 2 – 天气和户外运动</b></p>
      <p>该示例计算在给定的天气条件下，用户要进行户外运动，例如高尔夫、网球等的概率。</p>
      <p>表<codeph>weather_example</codeph>包含了样本值。</p>
      <p>表的标识列是<codeph>day</codeph>，整型类型。</p>
      <p><codeph>play</codeph>列包含了因变量以及两个类别：
        </p>
      <ul id="ul_up1_v4y_1z">
        <li>0 - No</li>
        <li>1 - Yes</li>
      </ul>
      <p>有四个属性：outlook、temperature、humidity、以及wind。他们是类变量。
          MADlib <codeph>create_nb_classify_view()</codeph>函数希望属性提供的是<codeph>INTEGER</codeph>、<codeph>NUMERIC</codeph>、或者<codeph>FLOAT8</codeph>值类型的数组，所以该示例的属性均用为整型进行编码：
        </p>
      <ul id="ul_eq2_3py_1z">
        <li><i>outlook</i> 可能取值为 sunny (1), overcast (2), 或 rain (3). </li>
        <li><i>temperature</i> 可能取值为 hot (1), mild (2), 或 cool (3).</li>
        <li><i>humidity</i> 可能取值为 high (1) 或 normal (2). </li>
        <li><i>wind</i> 可能取值为 strong (1) 或 weak (2).</li>
      </ul>
      <p>下表显示了编码变量之前的训练数据。
        </p>
      <codeblock>  day | play | outlook  | temperature | humidity | wind
-----+------+----------+-------------+----------+--------
 2   | No   | Sunny    | Hot         | High     | Strong
 4   | Yes  | Rain     | Mild        | High     | Weak
 6   | No   | Rain     | Cool        | Normal   | Strong
 8   | No   | Sunny    | Mild        | High     | Weak
10   | Yes  | Rain     | Mild        | Normal   | Weak
12   | Yes  | Overcast | Mild        | High     | Strong
14   | No   | Rain     | Mild        | High     | Strong
 1   | No   | Sunny    | Hot         | High     | Weak
 3   | Yes  | Overcast | Hot         | High     | Weak
 5   | Yes  | Rain     | Cool        | Normal   | Weak
 7   | Yes  | Overcast | Cool        | Normal   | Strong
 9   | Yes  | Sunny    | Cool        | Normal   | Weak
11   | Yes  | Sunny    | Mild        | Normal   | Strong
13   | Yes  | Overcast | Hot         | Normal   | Weak
(14 rows)</codeblock>
      <ol id="ol_vj1_jrw_1z">
        <li>创建一个训练表。
            <codeblock>DROP TABLE IF EXISTS weather_example;
CREATE TABLE weather_example (
   day int,
   play int,
   attrs int[]
);
INSERT INTO weather_example VALUES
   ( 2, 0, '{1,1,1,1}'), -- sunny, hot, high, strong
   ( 4, 1, '{3,2,1,2}'), -- rain, mild, high, weak
   ( 6, 0, '{3,3,2,1}'), -- rain, cool, normal, strong
   ( 8, 0, '{1,2,1,2}'), -- sunny, mild, high, weak
   (10, 1, '{3,2,2,2}'), -- rain, mild, normal, weak
   (12, 1, '{2,2,1,1}'), -- etc.
   (14, 0, '{3,2,1,1}'),
   ( 1, 0, '{1,1,1,2}'),
   ( 3, 1, '{2,1,1,2}'),
   ( 5, 1, '{3,3,2,2}'),
   ( 7, 1, '{2,3,2,1}'),
   ( 9, 1, '{1,3,2,2}'),
   (11, 1, '{1,2,2,1}'),
   (13, 1, '{2,1,2,2}');</codeblock></li>
        <li>根据训练表创建模型。
            <codeblock>SELECT madlib.create_nb_prepared_data_tables (
   'weather_example',  -- training source table
   'play',             -- dependent class column 
   'attrs',            -- attributes column
   4,                  -- number of attributes
   'weather_probs',    -- feature probabilities output table
   'weather_priors'    -- class priors
   );</codeblock></li>
        <li>查看特征概率：
            <codeblock>SELECT * FROM weather_probs;
 class | attr | value | cnt | attr_cnt
-------+------+-------+-----+----------
     1 |    3 |     2 |   6 |        2
     1 |    1 |     2 |   4 |        3
     0 |    1 |     1 |   3 |        3
     0 |    1 |     3 |   2 |        3
     0 |    3 |     1 |   4 |        2
     1 |    4 |     1 |   3 |        2
     1 |    2 |     3 |   3 |        3
     1 |    2 |     1 |   2 |        3
     0 |    2 |     2 |   2 |        3
     0 |    4 |     2 |   2 |        2
     0 |    3 |     2 |   1 |        2
     0 |    1 |     2 |   0 |        3
     1 |    1 |     1 |   2 |        3
     1 |    1 |     3 |   3 |        3
     1 |    3 |     1 |   3 |        2
     0 |    4 |     1 |   3 |        2
     0 |    2 |     3 |   1 |        3
     0 |    2 |     1 |   2 |        3
     1 |    2 |     2 |   4 |        3
     1 |    4 |     2 |   6 |        2
(20 rows)</codeblock></li>
        <li id="in191289">用模型分类一组记录，首先装载数据到一个表中。
            在该示例中，表<codeph>t1</codeph>有四个行将要分类。<p>
            <codeblock>DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
   id integer,
   attributes integer[]);
insert into t1 values 
   (1, '{1, 2, 1, 1}'),
   (2, '{3, 3, 2, 1}'),
   (3, '{2, 1, 2, 2}'),
   (4, '{3, 1, 1, 2}');</codeblock>
          </p></li>
        <li>使用MADlib <codeph>create_nb_classify_view()</codeph>函数对表中的行进行分类。
            <codeblock>SELECT madlib.create_nb_classify_view (
   'weather_probs',      -- feature probabilities table
   'weather_priors',     -- classPriorsName
   't1',                 -- table containing values to classify
   'id',                 -- key column 
   'attributes',         -- attributes column
   4,                    -- number of attributes
   't1_out'              -- output table name
);
</codeblock><p>结果有四行，每行对应表<codeph>t1</codeph>中的一条记录。
                </p><codeblock>SELECT * FROM t1_out ORDER BY key;
 key | nb_classification
-----+-------------------
 1 | {0}
 2 | {1}
 3 | {1}
 4 | {0}
 (4 rows)</codeblock></li>
      </ol>
    </body>
  </topic>
  <topic id="topic10" xml:lang="en">
    <title id="pz213965">参考</title>
    <body>
      <p>MADlib网站在<xref href="http://madlib.apache.org/" format="html" scope="external"
          >http://madlib.apache.org/</xref>。</p>
      <p>MADlib文档在<xref href="http://madlib.apache.org/documentation.html"
          format="html" scope="external">http://madlib.apache.org/documentation.html</xref>。</p>
      <p>PivotalR是第一类能够让用户使用R客户端对Greenplum驻留的数据和MADLib进行交互的R包。
        </p>
    </body>
    <topic xml:lang="en" id="topic_dxp_vq2_sv">
      <title>关于MADlib、R、PivotalR</title>
      <body>
        <p>R语言是一门用于统计计算的开源编程语言。
            PivotalR 是一个能够让用户通过R客户端与常驻Greenplum数据库的数据进行交互的R语言包。
            使用PivotalR要求MADlib已经安装在了Greenplum数据库中。
            </p>
        <p>PivotalR允许R用户不用离开R命令行就能利用数据库内分析的可扩展性和性能。
            计算工作在数据库内执行，而终端用户受益于熟悉的R语言接口。
            与相应的原生R函数相比，在可扩展性上得到提升的同时在执行时间上有降低。
            此外，PivotalR消除了对于非常大的数据集需要花费几个小时完成的数据移动。
            </p>
        <p>PivotalR包的关键特征：<ul id="ul_exp_vq2_sv">
            <li>以R语法的方式探索和操作数据库内的数据。
                SQL翻译由PivotalR来执行。</li>
            <li>使用熟悉的R语法的预测分析算法，例如线性和逻辑回归。
                PivotalR访问MADlib数据库内分析函数调用。
                </li>
            <li>对于广泛关于以标准R格式的示例文档包能够通过R客户端来访问。
                </li>
            <li>PivotalR包也支持MADlib函数的访问。</li>
          </ul></p>
        <p>更多关于PivotalR的信息包括支持的MADlib功能的信息，见
            <xref
            href="https://cwiki.apache.org/confluence/display/MADLIB/PivotalR" format="html"
            scope="external">https://cwiki.apache.org/confluence/display/MADLIB/PivotalR</xref>。</p>
        <p>PivotalR的R语言包可以在<xref
            href="https://cran.r-project.org/web/packages/PivotalR/index.html" format="html"
            scope="external">https://cran.r-project.org/web/packages/PivotalR/index.html</xref>找到。</p>
      </body>
    </topic>
  </topic>
</topic>
