<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
    <title id="px216155">Greenplum的PL/Perl语言扩展</title>
    <body>
        <p>本章包含了如下信息：</p>
        <ul>
            <li id="px220017">
                <xref href="#topic2" type="topic" format="dita"/>
            </li>
            <li id="px220032">
                <xref href="#topic3" type="topic" format="dita"/>
            </li>
            <li id="px216091">
                <xref href="#topic31" type="topic" format="dita"/>
            </li>
            <li id="px214686">
                <xref href="#topic33" type="topic" format="dita"/>
            </li>
        </ul>
    </body>

    <topic id="topic2" xml:lang="en">
        <title id="px216140">关于Greenplum的PL/Perl</title>
        <body>
            <p>通过Greenplum数据库的PL/Perl扩展，用户可以用Perl写用户定义的函数，可以利用Perl先进的字符串处理操作和函数。
                PL/Perl同时提供了可信和不可信的语言变体。
                </p>
            <p>PL/Perl内嵌在用户的Greenplum数据库发布中。
                Greenplum数据库的PL/Perl要求系统中每台数据库主机都要事先装好Perl。
                </p>
            <p>参考<xref href="https://www.postgresql.org/docs/9.4/plperl.html"
                    scope="external" format="html">PostgreSQL PL/Perl文档</xref>获取额外信息。
                </p>
        </body>
    </topic>

    <topic id="topic3" xml:lang="en">
        <title>Greenplum数据库中PL/Perl限制</title>
        <body>
            <p>Greenplum数据库PL/Perl的限制包括：<ul>
                    <li>Greenplum数据库不支持PL/Perl触发器。</li>
                    <li>PL/Perl函数不能直接相互调用。</li>
                    <li>SPI还没有完全的实现。</li>
                    <li>如果用户使用<codeph>spi_exec_query()</codeph>获取非常大的数据集，用户应该要意识到它们都将进入内存中。
                        用户可以通过使用<codeph>spi_query()/spi_fetchrow()</codeph>来防止这个问题的发生。
                        一个相似的问题也可能发生，当集合返回函数通过一个<codeph>return</codeph>语句传递一个大量行的数据集到Greenplum数据库中。
                        对每一返回行使用<codeph>return_next</codeph>能够避免该问题的出现。
                        </li>
                    <li>当一个会话正常结束而不是由于一个致命错误结束时，PL/Perl会执行用户定义好的任何<codeph>END</codeph>块。
                        当前没有其它的动作执行（文件处理不会被自动地刷写并且对象也不会被自动销毁）。
                        </li>
                </ul>
            </p>
        </body>
    </topic>


    <topic id="topic31" xml:lang="en">
        <title>可信/不可信语言</title>
        <body>
            <p>PL/Perl 包含了可信和不可信两种语言的变体。</p>
            <p>PL/Perl可信语言被命名为<codeph>plperl</codeph>。
                可信PL/Perl语言限制文件系统操作，和<codeph>require</codeph>、<codeph>use</codeph>以及其它可能同操作系统或者数据库服务进程进行交互的语句。
                有了这些限制，任何Greenplum用户能够创建和执行可信的<codeph>plperl</codeph>语言的函数。
                </p>
            <p>PL/Perl不可信语言被命名为<codeph>plperlu</codeph>。
                您不能使用<codeph>plperlu</codeph>不受信任的语言限制您创建的函数的操作。
                只有数据库的超级用户才有权限创建有不可信PL/Perl语言的用户定义函数。
                同时只有数据库的超级用户以及其他被显式授予特权的用户能够执行不可信PL/Perl的用户定义函数。
                </p>
            <p>在解释器以及运行在单个进程中的多个解释器之间的通信方面，PL/Perl有限制。
                请参考 PostgreSQL的<xref
                        href="https://www.postgresql.org/docs/9.4/plperl-trusted.html"
                        scope="external" format="html">可信与不可信PL/Perl</xref>PL/Perl文档获取更多的信息。
                </p>
        </body>
    </topic>

    <topic id="topic6" xml:lang="en">
        <title>启用和移除PL/Perl支持</title>
        <body>
            <p>在用户能在数据库中创建以及执行一个PL/Perl的用户定义函数前，必须要在该数据库上注册PL/Perl语言。
                要实现移除PL/Perl，用户必须显式的从每一个它注册的数据库中移除扩展。
                您必须是数据库超级用户或所有者才能在Greenplum数据库中注册或删除受信任的语言。
                </p>
            <note>只用数据库超级用户可能注册或者移除对不可信PL/Perl语言<codeph>plperlu</codeph>的支持。
                </note>
            <p>在用户在数据库中开启或者移除PL/Perl支持之前，确保：
                <ul>
                    <li>用户的Greenplum数据库正在运行。</li>
                    <li>用户已经执行（source）了<codeph>greenplum_path.sh</codeph>。</li>
                    <li>用户已经设置了<codeph>$MASTER_DATA_DIRECTORY</codeph>和<codeph>$GPHOME</codeph>环境变量。
                        </li>
                </ul>
            </p>
        </body>
        <topic id="topic61" xml:lang="en">
            <title>开启PL/Perl支持</title>
            <body>
                <p>对于要在其中启用PL/Perl的每个数据库，请使用SQL <codeph><xref href="../sql_commands/CREATE_EXTENSION.xml">CREATE
                    EXTENSION</xref></codeph>命令注册该语言。
                    例如，以<codeph>gpadmin</codeph>用户身份运行以下命令，为名为<codeph>testdb</codeph>的数据库注册可信PL/Perl语言：
                    </p>
                <codeblock>$ psql -d testdb -c 'CREATE EXTENSION plperl;'</codeblock>
            </body>
        </topic>
        <topic id="topic62" xml:lang="en">
            <title>移除PL/Perl</title>
            <body>
                <p>要从数据库中删除对PL/Perl的支持，请运行SQL <codeph><xref
                        href="../sql_commands/DROP_EXTENSION.xml">DROP EXTENSION</xref></codeph>命令。
                    例如，以<codeph>gpadmin</codeph>用户身份运行以下命令，从名为<codeph>testdb</codeph>的数据库中删除对可信PL/Perl语言的支持：
                    </p>
                <codeblock>$ psql -d testdb -c 'DROP EXTENSION plperl;'</codeblock>
                <p>如果任何现有对象（如函数）依赖于语言，则默认命令将失败。
                    指定<codeph>CASCADE</codeph>选项也可以删除所有依赖对象，包括使用PL/Perl创建的函数。
                    </p>
            </body>
        </topic>
    </topic>

    <topic id="topic33" xml:lang="en">
        <title>用PL/Perl开发函数</title>
        <body>
            <p>您可以使用标准SQL <codeph><xref
                    href="../sql_commands/CREATE_FUNCTION.xml#topic1">CREATE
                FUNCTION</xref></codeph>语法定义PL/Perl函数。
                PL/Perl用户定义函数的主体是普通的Perl代码。
                PL/Perl解释器将此代码包装在Perl子例程中。
                </p>
            <p>您还可以使用PL/Perl创建匿名代码块。
                使用SQL <codeph><xref href="../sql_commands/DO.xml#topic1"
                >DO</xref></codeph>命令调用的匿名代码块不接收任何参数，并且丢弃它可能返回的任何值。
                否则，PL/Perl匿名代码块的行为就像一个函数。
                只有数据库超级用户使用不受信任的<codeph>plperlu</codeph>语言创建匿名代码块。
                </p>
            <p><codeph>CREATE FUNCTION</codeph>命令的语法要求您将PL/Perl函数体写为字符串常量。
                虽然使用美元引用更方便，但您可以选择使用转义字符串语法（<codeph>E''</codeph>），前提是您将函数体中使用的任何单引号和反斜杠加倍。
                </p>
            <p>PL/Perl参数和结果在Perl中处理。
                传递给PL/Perl函数的参数可通过<codeph>@_</codeph>数组访问。
                使用<codeph>return</codeph>语句返回结果值，或者作为函数中计算的最后一个表达式返回结果值。
                PL/Perl函数不能直接返回非标量类型，因为您在标量上下文中调用它。
                您可以通过返回引用来返回PL/Perl函数中的非标量类型（如数组，记录和集）。
                </p>
            <p>PL/Perl将null参数值视为“未定义”。
                将<codeph>STRICT</codeph>关键字添加到<codeph>LANGUAGE</codeph>子句指示Greenplum数据库在任何输入参数为null时立即返回null。
                当创建为<codeph>STRICT</codeph>时，函数本身不需要执行null检查。
                </p>
            <p>以下PL/Perl函数使用<codeph>STRICT</codeph>关键字返回两个整数中的较大者，如果任何输入为null，则返回null：
                </p>
            <codeblock>
CREATE FUNCTION perl_max (integer, integer) RETURNS integer AS $$
    if ($_[0] > $_[1]) { return $_[0]; }
    return $_[1];
$$ LANGUAGE plperl STRICT;

SELECT perl_max( 1, 3 );
 perl_max
----------
        3
(1 row)

SELECT perl_max( 1, null );
 perl_max
----------

(1 row)
</codeblock>

            <p>PL/Perl认为函数参数中的任何内容都不是对字符串的引用，即标准的Greenplum数据库外部文本表示。
                提供给PL/Perl函数的参数值只是转换为文本形式的输入参数（就像它们已经被<codeph>SELECT</codeph>语句显示一样）。
                如果函数参数不是普通的数字或文本类型，则必须将Greenplum数据库类型转换为Perl更易使用的形式。
                相反，<codeph>return</codeph>和<codeph>return_next</codeph>语句接受任何字符串，该字符串是函数声明的返回类型的可接受输入格式。
                </p>
            <p>有关其他信息，请参阅PostgreSQL <xref
                    href="https://www.postgresql.org/docs/9.4/plperl-funcs.html"
                    scope="external" format="html">PL/Perl函数和参数</xref>文档，包括复合类型和结果集操作。
                </p>

        </body>

        <topic id="topic3311" xml:lang="en">
            <title>内置PL/Perl函数</title>
            <body>
                <p>PL/Perl包含用于访问数据库的内置函数，包括用于准备和执行查询以及操作查询结果的函数。
                    该语言还包括用于错误记录和字符串操作的实用程序函数。
                    </p>
                <p>以下示例创建一个包含整数和文本列的简单表。
                    它创建一个PL/Perl用户定义函数，该函数接受输入字符串参数并调用<codeph>spi_exec_query()</codeph>内置函数来选择表的所有列和行。
                    该函数返回查询结果中的所有行，其中<codeph>v</codeph>列包含函数输入字符串。
                    </p>
                <codeblock>
CREATE TABLE test (
    i int,
    v varchar
);
INSERT INTO test (i, v) VALUES (1, 'first line');
INSERT INTO test (i, v) VALUES (2, 'line2');
INSERT INTO test (i, v) VALUES (3, '3rd line');
INSERT INTO test (i, v) VALUES (4, 'different');

CREATE OR REPLACE FUNCTION return_match(varchar) RETURNS SETOF test AS $$
    # store the input argument
    $ss = $_[0];

    # run the query
    my $rv = spi_exec_query('select i, v from test;');

    # retrieve the query status
    my $status = $rv->{status};

    # retrieve the number of rows returned in the query
    my $nrows = $rv->{processed};

    # loop through all rows, comparing column v value with input argument
    foreach my $rn (0 .. $nrows - 1) {
        my $row = $rv->{rows}[$rn];
        my $textstr = $row->{v};
        if( index($textstr, $ss) != -1 ) {
            # match!  return the row.
            return_next($row);
        }
    }
    return undef;
$$ LANGUAGE plperl EXECUTE ON MASTER ;

SELECT return_match( 'iff' );
 return_match
---------------
 (4,different)
(1 row)
</codeblock>
                <p>有关可用函数的详细讨论，请参阅PostgreSQL PL/Perl<xref
                        href="https://www.postgresql.org/docs/9.4/plperl-builtins.html"
                        scope="external" format="html">内置函数文档</xref>。
                    </p>
            </body>
        </topic>
        <topic id="topic331" xml:lang="en">
            <title>PL/Perl中的全局值</title>
            <body>
                <p>您可以使用全局哈希映射<codeph>%_SHARED</codeph>在当前会话的生命周期内在PL/Perl函数调用之间共享数据，包括代码引用。
                    </p>
                <p>以下示例使用<codeph>%_SHARED</codeph>在用户定义的<codeph>set_var()</codeph>和<codeph>get_var()</codeph> PL/Perl函数之间共享数据：
                    </p>
                <codeblock>
CREATE OR REPLACE FUNCTION set_var(name text, val text) RETURNS text AS $$
    if ($_SHARED{$_[0]} = $_[1]) {
        return 'ok';
    } else {
        return "cannot set shared variable $_[0] to $_[1]";
    }
$$ LANGUAGE plperl;

CREATE OR REPLACE FUNCTION get_var(name text) RETURNS text AS $$
    return $_SHARED{$_[0]};
$$ LANGUAGE plperl;

SELECT set_var('key1', 'value1');
 set_var
---------
 ok
(1 row)

SELECT get_var('key1');
 get_var
---------
 value1
(1 row)
</codeblock>
                <p>出于安全原因，PL/Perl为每个角色创建一个单独的Perl解释器。
                    这可以防止一个用户对另一个用户的PL/Perl函数的行为进行意外或恶意干扰。
                    每个这样的解释器都保留其自己的<codeph>%_SHARED</codeph>变量值和其他全局状态。
                    当且仅当它们由相同的SQL角色执行时，两个PL/Perl函数共享相同的<codeph>%_SHARED</codeph>值。
                    </p>
                <p>在某些情况下，您必须采取明确的步骤来确保PL/Perl函数可以在<codeph>%_SHARED</codeph>中共享数据。
                    例如，如果应用程序在单个会话中在多个SQL角色（通过<codeph>SECURITY DEFINER</codeph>函数，使用<codeph>SET ROLE</codeph>等）下执行，
                    请确保需要通信的函数由同一用户拥有，并将这些函数标记为<codeph>SECURITY DEFINER</codeph>。
                    </p>
            </body>
        </topic>

        <topic id="topic335" xml:lang="en">
            <title>备注</title>
            <body>
                <p>在开发PL/Perl函数其它要考虑的：<ul>
                        <li>PL/Perl内部使用UTF-8编码。
                            它将其他编码中提供的任何参数转换为UTF-8，并将UTF-8的返回值转换回原始编码。
                            </li>
                        <li>嵌套命名的PL/Perl子例程保留了与Perl相同的危险。
                            </li>
                        <li>只有不受信任的PL/Perl语言变体支持模块导入。
                            小心使用<codeph>plperlu</codeph>。
                            </li>
                        <li>您在<codeph>plperlu</codeph>函数中使用的任何模块都必须在所有Greenplum数据库主机上的相同位置可用。
                            </li>
                    </ul>
                </p>
            </body>
        </topic>
    </topic>
</topic>
