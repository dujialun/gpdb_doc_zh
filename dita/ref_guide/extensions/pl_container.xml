<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="pz212122">Greenplum PL/Container语言扩展</title>
  <body>
    <p>本节包括有关PL/Container 1.1及更高版本的以下信息：</p>
    <ul>
      <li id="pz219023"><xref href="#topic2" type="topic" format="dita"/></li>
      <li><xref href="#topic_resmgmt" format="dita"/></li>
      <li>
        <xref href="#topic_tcm_htd_gw" format="dita"/></li>
      <li id="pz213664" otherprops="pivotal"><xref href="#topic3" type="topic" format="dita"/></li>
      <li otherprops="op-pivotal"><xref href="#topic_qbl_dkq_vcb" format="dita"/></li>
      <li otherprops="op-pivotal"><xref href="#topic_upg110" format="dita"/></li>
      <li id="pz213668"><xref href="#topic6" type="topic" format="dita"/>
      </li>
      <li id="pz215253"><xref href="#topic_rh3_p3q_dw" format="dita"/></li>
      <li><xref href="#topic_ehl_r3q_dw" format="dita"/></li>
      <li><xref href="#topic_lqz_t3q_dw" format="dita"/></li>
      <li><xref href="#topic_sk1_gdq_dw" format="dita"/></li>
      <li><xref href="#topic_ydt_rtc_rbb" format="dita"/></li>
      <li><xref href="#topic_kds_plk_rbb" format="dita"/></li>
    </ul>
    <note otherprops="pivotal">The extension PL/Container 1.1 and later is installed by
        <codeph>gppkg</codeph> as a Greenplum Database extension, while the extension PL/Container
      1.0 is installed as a Greenplum Database language. To upgrade to PL/Container 1.1 or later
      from PL/Container 1.0, you uninstall the old version and install the new version. See <xref
        href="#topic_qbl_dkq_vcb" format="dita"/>.</note>
    <note type="warning">PL/Container与Greenplum Database 5.2.0及更高版本兼容。
      尚未测试PL/Container与Greenplum Database 5.1.0或5.0.0的兼容性。
    </note>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="pz217886">关于PL/Container语言扩展</title>
    <body>
      <p>Greenplum数据库PL/Container语言扩展（PL/Container）是一个接口，允许Greenplum数据库与Docker容器交互以在容器中执行用户定义的函数（UDF）。
        Docker容器确保用户代码无法访问源主机的文件系统。
        此外，容器在没有网络访问或网络访问受限的情况下启动，无法连接回Greenplum数据库或打开任何其他外部连接。
        有关可用UDF语言的信息，请参阅<xref href="#topic_tcm_htd_gw" format="dita"/>。
        </p>
      <p>一般来说，Docker容器是一个Linux进程，它使用Linux内核功能（如cgroup，命名空间和联合文件系统）以托管方式运行。
        Docker镜像是容器的基础。
        Docker容器是Docker镜像的运行实例。
        启动Docker容器时，指定Docker镜像。
        Docker镜像是在主机系统上运行Docker容器时使用的根文件系统更改和执行参数的集合。
        镜像没有状态，永远不会改变。
        有关Docker的信息，请访问Docker网站<xref href="https://www.docker.com/" format="html" scope="external">https://www.docker.com/</xref>。
        </p>
      <p>Greenplum数据库仅在第一次调用该容器中的函数时启动容器。
        例如，考虑使用所有可用segment选择表数据的查询，并使用PL/Container函数对数据应用转换。
        在这种情况下，Greenplum数据库将在每个segment上仅启动Docker容器一次，然后联系正在运行的容器以获取结果。
        </p>
      <p>在开始查询执行的完整循环之后，执行程序向容器发送调用。
        容器可能会响应容器执行的SPI-SQL查询，以从数据库中获取一些数据，并将结果返回给查询执行器。
        </p>
      <p>当与其连接关闭时，容器将关闭。
        当您关闭启动容器的Greenplum数据库会话时会发生这种情况。
        在待机模式下运行的容器几乎不消耗CPU资源，因为它在套接字上等待。
        PL/Container内存消耗取决于您在全局词典中缓存的数据量。
        </p>
      <note type="warning">当Greenplum数据库在Docker容器中运行时，不支持PL/Container。
        </note>
      <p>PL/Container语言扩展可用作开源模块。
        有关该模块的信息，请参阅位于<xref
                href="https://github.com/greenplum-db/plcontainer" format="html" scope="external"
        >https://github.com/greenplum-db/plcontainer</xref>的GitHub存储库中的README文件。
        </p>
    </body>
  </topic>
  <topic id="topic_resmgmt">
    <title>关于PL/Container资源管理</title>
    <body>
      <p>Greenplum数据库在Docker容器中运行PL/Container用户定义的函数。
        Docker容器和Greenplum数据库服务器共享相同主机上的CPU和内存资源。
        在默认情况下，Greenplum数据库不知道运行PL/Container实例所消耗的资源。
        在PL/Container 1.2及更高版本中，您可以使用Greenplum数据库资源组来控制运行PL/Container实例的总体CPU和内存资源使用情况，如以下部分所述。
        </p>
      <p>PL/Container管理两个级别的资源使用 - 容器级别和runtime级别。
        您可以使用为PL/Container runtime配置的<codeph>memory_mb</codeph>和<codeph>cpu_share</codeph>设置来控制容器级CPU和内存资源。
        <codeph>memory_mb</codeph>控制每个容器实例可用的内存资源。
        <codeph>cpu_share</codeph>设置标识容器与其他容器相比的CPU使用率的相对权重。
        有关PL/Container配置信息，请参阅<xref href="#topic_ojn_r2s_dw" format="dita"/>。
        </p>
      <p>默认情况下，您不能限制执行PL/Container容器实例的数量，也不能限制它们使用的内存或CPU资源总量。
        </p>
    </body>
    <topic id="topic_resgroup">
      <title>使用资源组管理PL/Container资源</title>
      <body>
        <p>在PL/Container 1.2.0及更高版本中，您可以使用Greenplum数据库资源组来管理和限制PL/Container runtime中容器的总CPU和内存资源。
          有关启用，配置和使用Greenplum数据库资源组的更多信息，
          请参阅<cite>Greenplum数据库管理员指南</cite>中的<xref href="../../admin_guide/workload_mgmt_resgroups.xml" format="dita" scope="peer">使用资源组</xref>。
          </p>
        <note>如果未显式配置PL/Container runtime的资源组，则其容器实例仅受系统资源的限制。
          容器可能会以Greenplum数据库服务器为代价消耗资源。
          </note>
        <p>外部组件（如PL/Container）的资源组使用Linux控制组（cgroup）来管理组件级内存和CPU资源的使用。
          使用资源组管理PL/Container资源时，可以配置Greenplum数据库应用于共享相同PL/Container runtime配置的所有容器实例的内存限制和CPU限制。
          </p>
        <p>创建资源组以管理PL/Containerruntime的资源时，除了所需的CPU和内存限制外，还必须指定<codeph>MEMORY_AUDITOR=cgroup</codeph>和<codeph>CONCURRENCY=0</codeph>。
          例如，以下命令为PL/Container runtime创建名为<codeph>plpy_run1_rg</codeph>的资源组：
          <codeblock>CREATE RESOURCE GROUP plpy_run1_rg WITH (MEMORY_AUDITOR=cgroup, CONCURRENCY=0,
     CPU_RATE_LIMIT=10, MEMORY_LIMIT=10);</codeblock></p>
        <p>PL/Container不使用<codeph>MEMORY_SHARED_QUOTA</codeph>和<codeph>MEMORY_SPILL_RATIO</codeph>资源组内存限制。
          有关此SQL命令的详细信息，请参阅<codeph><xref href="../../ref_guide/sql_commands/CREATE_RESOURCE_GROUP.xml"
                                         format="dita" scope="peer">CREATE RESOURCE GROUP</xref></codeph>参考页。
          </p>
        <p>您可以创建一个或多个资源组来管理正在运行的PL/Container实例。
          为PL/Container创建资源组后，将资源组分配给一个或多个PL/Container runtime。
          您使用资源组的<codeph>groupid</codeph>进行此分配。
          您可以从<codeph>gp_resgroup_config</codeph> <codeph>gp_toolkit</codeph>视图确定给定资源组名称的<codeph>groupid</codeph>。
          例如，以下查询显示名为<codeph>plpy_run1_rg</codeph>的资源组的<codeph>groupid</codeph>：
          <codeblock>SELECT groupname, groupid FROM gp_toolkit.gp_resgroup_config
     WHERE groupname='plpy_run1_rg';

  groupname   |  groupid  
--------------+----------
 plpy_run1_rg |   16391
(1 row)</codeblock></p>
        <p>通过为<codeph>plcontainer runtime-add</codeph>（新runtime）或<codeph>plcontainer runtime-replace</codeph>（现有runtime）命令指定<codeph>-s resource_group_id=<varname>rg_groupid</varname></codeph>选项，可以将资源组分配给PL/Container runtime配置。
          例如，要将<codeph>plpy_run1_rg</codeph>资源组分配给名为<codeph>python_run1</codeph>的新PL/Container runtime：
          <codeblock>plcontainer runtime-add -r python_run1 -i pivotaldata/plcontainer_python_shared:devel -l python -s resource_group_id=16391</codeblock></p>
        <p>您还可以使用<codeph>plcontainer runtime-edit</codeph>命令将资源组分配给PL/Container runtime。
          有关<codeph>plcontainer</codeph>命令的信息，请参阅<xref href="#topic_rw3_52s_dw" format="dita" />。
          </p>
        <p>将资源组分配给PL/Container runtime后，共享相同runtime配置的所有容器实例都受为组配置的内存和CPU的限制。
          如果减小PL/Container资源组的内存限制，则在组内运行容器中执行的查询可能会因内存不足而失败。
          如果在运行容器实例时删除PL/Container资源组，Greenplum数据库会终止正在运行的容器。
          </p>
      </body>
    </topic>
    <topic id="topic_resgroupcfg">
      <title>为PL/Container配置资源组</title>
      <body>
        <p>要使用Greenplum数据库资源组来管理PL/Container资源，必须显式配置资源组和PL/Container。
          </p>
        <note>PL/Container版本1.2利用Greenplum数据库版本5.8.0中引入的新资源组功能。
          如果您降级到使用PL/Container版本1.1或者更早的Greenplum数据库系统，
          您必须使用<codeph>plcontainer runtime-edit</codeph>从PL/Container runtime配置中删除任何<codeph>resource_group_id</codeph>设置。
          </note>
      </body>
      <topic id="topic_resgroupcfg_proc">
        <title>过程</title>
        <body>
          <p>执行以下过程以配置PL/Container以使用Greenplum数据库资源组进行CPU和内存资源管理：
            </p>
          <ol>
            <li>如果尚未在Greenplum数据库部署中配置和启用资源组，
              请按照<cite>Greenplum数据库管理员指南</cite>中的<xref href="../../admin_guide/workload_mgmt_resgroups.xml#topic71717999" format="dita" scope="peer">使用资源组</xref>中的说明配置cgroup并启用Greenplum数据库资源组。
              <note>如果先前已在部署中配置并启用了资源组，请确保Greenplum数据库资源组<codeph>gpdb.conf</codeph> cgroups配置文件包含<codeph>内存{}</codeph>块，如上一个链接中所述。
                </note></li>
            <li>分析Greenplum数据库部署的资源使用情况。
              确定要分配给PL/Container Docker容器的资源组CPU和内存资源的百分比。
              </li>
            <li>确定如何在PL/Container runtime中分配您在上一步中确定的总PL/Container CPU和内存资源。确认：
              <ul>
                <li>您需要的PL/Container资源组的数量。</li>
                <li>分配给每个资源组的内存和CPU资源的百分比。</li>
                <li>资源组到PL/Container runtime分配。</li>
              </ul></li>
            <li>创建您在上面的步骤中标识的PL/Container资源组。
              例如，假设您选择将25％ Greenplum数据库的内存和CPU资源分配给PL/Container。
              如果进一步将这些资源拆分为2个资源组60/40，则以下SQL命令将创建资源组：
              <codeblock>CREATE RESOURCE GROUP plr_run1_rg WITH (MEMORY_AUDITOR=cgroup, CONCURRENCY=0,
    CPU_RATE_LIMIT=15, MEMORY_LIMIT=15);
CREATE RESOURCE GROUP plpy_run1_rg WITH (MEMORY_AUDITOR=cgroup, CONCURRENCY=0,
    CPU_RATE_LIMIT=10, MEMORY_LIMIT=10);</codeblock></li>
            <li>查找并记下与您创建的每个资源组关联的<codeph>groupid</codeph>。例如：
              <codeblock>SELECT groupname, groupid FROM gp_toolkit.gp_resgroup_config
    WHERE groupname IN ('plpy_run1_rg', 'plr_run1_rg');

  groupname   |  groupid
--------------+----------
 plpy_run1_rg |   16391
 plr_run1_rg  |   16393
(1 row)</codeblock></li>
            <li>将您创建的每个资源组分配给所需的PL/Container runtime配置。
              如果尚未创建runtime配置，请使用<codeph>plcontainer runtime-add</codeph>命令。
              如果runtime已存在，请使用<codeph>plcontainer runtime-replace</codeph>或<codeph>plcontainer runtime-edit</codeph>命令将资源组分配添加到runtime配置。
              例如：
                <codeblock>plcontainer runtime-add -r python_run1 -i pivotaldata/plcontainer_python_shared:devel -l python -s resource_group_id=16391
plcontainer runtime-replace -r r_run1 -i pivotaldata/plcontainer_r_shared:devel -l r -s resource_group_id=16393</codeblock>
              <p>有关<codeph>plcontainer</codeph>命令的信息，请参阅<xref href="#topic_rw3_52s_dw" format="dita"/>。
                </p></li>
          </ol>
        </body>
      </topic>
    </topic>
  </topic>
  <topic id="topic_tcm_htd_gw">
    <title>PL/Container Docker镜像</title>
    <body>
      <p>PL/Python镜像和PL/R镜像可从Pivotal Network的Greenplum数据库产品下载站点获得，网址为<xref
              href="https://network.pivotal.io/products/pivotal-gpdb" format="html" scope="external"
      >https://network.pivotal.io/</xref>。
        </p>
      <ul id="ul_epg_t2v_qbb">
        <li>用于Python的PL/Container - 安装了Python 2.7.12的Docker镜像。
          <p>还安装了Python数据科学模块。
          该模块包含一组与数据科学相关的python库。
          <ph otherprops="pivotal">For information about the module, see <xref
                href="../../install_guide/install_python_dsmod.xml" format="dita" scope="peer"
                >Python Data Science Module Package</xref>.</ph></p></li>
      </ul>
      <ul id="ul_fpg_t2v_qbb">
        <li>用于R的PL/Container - 安装了R-3.3.3的容器的Docker镜像。
          <p>还安装了R Data Science软件包。该软件包包含一组与数据科学相关的R库。
          <ph otherprops="pivotal">For information about the module, see <xref
                href="../../install_guide/install_r_dslib.xml" format="dita" scope="peer">R Data
                Science Library Package</xref>.</ph></p></li>
      </ul>
      <p>Docker镜像tag表示PL/Container版本（例如，1.0.0）。
        例如，用于Python Docker镜像的PL/Container的完整Docker镜像名称类似于<codeph>pivotaldata/plc_python_shared:1.0.0</codeph>。
        这是默认PL/Container配置中引用的名称。
        此外，您可以创建自定义Docker镜像，安装镜像并将图像添加到PL/Container配置。
        </p>
    </body>
  </topic>
  <topic id="topic_i31_3tr_dw">
    <title>前提条件</title>
    <body>
      <p>确保您的Greenplum数据库系统满足以下前提条件：</p>
      <ul id="ul_ztj_kzp_dw">
        <li>Red Hat Enterprise Linux（RHEL）7.x（或更高版本）和CentOS 7.x（或更高版本）上的Greenplum数据库5.2.x支持PL/Container。
          <note id="plc-issue">RHEL/CentOS 6.x系统不支持PL/Container，因为这些平台不官方支持Docker。
            </note></li>
        <li>这些是Docker主机操作系统的前提条件。
          <p>RHEL或CentOS 7.x - 支持的最低Linux操作系统内核版本为3.10。
            RHEL 7.x和CentOS 7.x使用此内核版本。
            </p>
          <p>您可以使用命令<codeph>uname -r</codeph>检查内核版本
            </p>
          <note>Red Hat提供，维护和支持的Docker版本仅在RHEL 7上可用。
            Docker功能开发与RHEL7.x基础架构组件相关，用于内核，设备映射（精简配置，直接lvm），sVirt和systemd。
            </note></li>
      </ul>
      <ul id="ul_b5j_kzp_dw">
        <li>Docker安装在Greenplum数据库主机（master，primary和所有standby主机）上
          <ul id="ul_z2t_bxd_rbb">
            <li>对于RHEL或CentOS 7.x - Docker 17.05</li>
          </ul><p>请见<xref href="#topic_ydt_rtc_rbb" format="dita"/>。</p></li>
        <li>在每个Greenplum数据库主机上，<codeph>gpadmin</codeph>用户应该是<codeph>docker</codeph>组的一部分，以便用户能够管理Docker镜像和容器。
          </li>
      </ul>
    </body>
  </topic>
  <topic id="topic3" xml:lang="en">
    <title id="pz214493">安装PL/Container语言扩展</title>
    <body>
      <p>要使用PL/Container，请安装PL/Container语言扩展，安装Docker镜像，并配置PL/Container以使用镜像。
        <ol id="ol_uw5_xdn_sbb">
          <li>确保Greenplum数据库主机满足前提条件，参考<xref
              href="#topic_i31_3tr_dw" format="dita"/>。</li>
          <li otherprops="pivotal">Install the PL/Container extension, see <xref
              href="#topic_ifk_2tr_dw" format="dita"/>.<p>If you are upgrading from PL/Container
              1.0, see <xref href="#topic_qbl_dkq_vcb" format="dita"/>。</p></li>
          <li otherprops="oss-only">从源代码构建和安装PL/Container扩展，参考
              <xref href="#topic_i2t_v2n_sbb" format="dita"/>.</li>
          <li>安装Docker镜像并配置PL/Container，参考<xref href="#topic_qcr_bfk_rbb"
              format="dita"/>。</li>
        </ol></p>
    </body>
    <topic id="topic_ifk_2tr_dw" otherprops="pivotal">
      <title>Installing the PL/Container Language Extension Package</title>
      <!--Pivotal conent-->
      <body>
        <p>Install the PL/Container language extension with the Greenplum Database
            <codeph>gppkg</codeph> utility.</p>
        <ol id="ul_w5b_nzp_dw">
          <li>Copy the PL/Container language extension package to the Greenplum Database master host
            as the <codeph>gpadmin</codeph> user.</li>
          <li>Make sure Greenplum Database is up and running. If not, bring it up with this
            command.<codeblock>gpstart -a</codeblock></li>
          <li>Run the package installation
            command.<codeblock>gppkg -i plcontainer-1.1.0-rhel7-x86_64.gppkg</codeblock></li>
          <li>Source the file
            <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>source $GPHOME/greenplum_path.sh</codeblock></li>
          <li>Restart Greenplum Database.<codeblock>gpstop -ra</codeblock></li>
          <li>Enable PL/Container for specific databases by running this command.<ol
              id="ol_ydy_bjq_vcb">
              <li>For PL/Container 1.1 and later, log into the database as a Greenplum Database
                superuser (<codeph>gpadmin</codeph>) and run this
                  command.<codeblock>CREATE EXTENSION plcontainer; </codeblock><p>The command
                  registers PL/Container and creates PL/Container-specific functions and
                views.</p></li>
              <li>For PL/Container 1.0, run this
                  command.<codeblock>psql -d <varname>your_database</varname> -f $GPHOME/share/postgresql/plcontainer/plcontainer_install.sql</codeblock><p>The
                  SQL script registers the language <codeph>plcontainer</codeph> in the database and
                  creates PL/Container-specific functions and views.</p></li>
            </ol></li>
        </ol>
        <p>After installing PL/Container, you can manage Docker images and manage the PL/Container
          configuration with the Greenplum Database <codeph>plcontainer</codeph> utility.</p>
      </body>
    </topic>
    <topic id="topic_qbl_dkq_vcb" otherprops="pivotal">
      <title>Upgrading from PL/Container 1.0</title>
      <body>
        <p>To upgrade to version 1.1 or higher, uninstall version 1.0 and install the new version.
          The <codeph>gppkg</codeph> utility installs PL/Container version 1.1 and later as a
          Greenplum Database extension, while PL/Container 1.0 is installed as a Greenplum Database
          language. The Docker images and the PL/Container configuration do not change when
          upgrading PL/Container, only the PL/Container extension installation changes.</p>
        <p>As part of the upgrade process, you must drop PL/Container from all databases that are
          configured with PL/Container.</p>
        <note type="important">Dropping PL/Container from a database drops all PL/Container UDFs
          from the database, including user-created PL/Container UDFs. If the UDFs are required,
          ensure you can re-create the UDFs before dropping PL/Container. This
            <codeph>SELECT</codeph> command lists the names of and body of PL/Container UDFs in a
            database.<codeblock>SELECT proname, prosrc FROM pg_proc WHERE prolang = (SELECT oid FROM pg_language WHERE lanname = 'plcontainer');</codeblock><p>For
            information about the catalog tables, <codeph>pg_proc</codeph> and
              <codeph>pg_language</codeph>, see <xref
              href="../system_catalogs/catalog_ref-tables.xml" format="dita"/>. </p></note>
        <p>These steps upgrade from PL/Container 1.0 to PL/Container 1.1 or later in a database. The
          steps save the PL/Container 1.0 configuration and restore the configuration for use with
          PL/Container 1.1 or later.<ol id="ol_axf_mmq_vcb">
            <li>Save the PL/Container configuration. This example saves the configuration to
                <codeph>plcontainer10-backup.xml</codeph> in the local
              directory.<codeblock>plcontainer runtime-backup -f plcontainer10-backup.xml</codeblock></li>
            <li>Remove any <codeph>setting</codeph> elements that contain the
                <codeph>use_container_network</codeph> attribute from the configuration file. For
              example, this <codeph>setting</codeph> element must be removed from the configuration
              file.<codeblock>&lt;setting use_container_network="yes"/></codeblock></li>
            <li>Run the <codeph>plcontainer_uninstall.sql</codeph> script as the
                <codeph>gpadmin</codeph> user for each database that is configured with
              PL/Container. For example, this command drops the <codeph>plcontainer</codeph>
              language in the <codeph>mytest</codeph> database.
                <codeblock>psql -d mytest -f $GPHOME/share/postgresql/plcontainer/plcontainer_uninstall.sql</codeblock><p>The
                script drops the <codeph>plcontainer</codeph> language with the
                  <codeph>CASCADE</codeph> clause that drops PL/Container-specific functions and
                views in the database. </p></li>
            <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the
                <codeph>-r</codeph> option to uninstall the PL/Container language extension. This
              example uninstalls the PL/Container language extension on a Linux
              system.<codeblock>$ gppkg -r plcontainer-1.0.0</codeblock></li>
            <li>Run the package installation command. This example installs the PL/Container 1.1
              language extension on a Linux
              system.<codeblock>gppkg -i plcontainer-1.1.0-rhel7-x86_64.gppkg</codeblock></li>
            <li>Source the file
              <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>source $GPHOME/greenplum_path.sh</codeblock></li>
            <li>Update the PL/Container configuration. This command restores the saved
              configuration.<codeblock>plcontainer runtime-restore -f plcontainer10-backup.xml</codeblock></li>
            <li>Restart Greenplum Database.<codeblock>gpstop -ra</codeblock></li>
            <li>Register the new PL/Container extension as an extension for each database that uses
              PL/Container UDFs. This <codeph>psql</codeph> command runs a <codeph>CREATE
                EXTENSION</codeph> command to register PL/Container in the database
                <codeph>mytest</codeph>.
                <codeblock>psql -d mytest -c 'CREATE EXTENSION plcontainer;'</codeblock><p>The
                command registers PL/Container as an extension and creates PL/Container-specific
                functions and views.</p></li>
          </ol></p>
        <p>After upgrading PL/Container for a database, re-install any user-created PL/Container
          UDFs that are required.</p>
      </body>
    </topic>
    <topic id="topic_upg110" otherprops="pivotal">
      <title>Upgrading from PL/Container 1.1</title>
      <body>
        <p>To upgrade from PL/Container version 1.1 or higher, you save the current configuration,
          upgrade PL/Container, and then restore the configuration after upgrade. There is no need
          to update the Docker images when you upgrade PL/Container.</p>
        <note>Before you perform this upgrade procedure, ensure that you have migrated your
          PL/Container 1.1 package from your previous Greenplum Database installation to your new
          Greenplum Database installation. Refer to the <xref
            href="../../utility_guide/admin_utilities/gppkg.html#topic1" format="dita" scope="peer"
            >gppkg</xref> command for package installation and migration information.</note>
        <p>Perform the following procedure to upgrade from PL/Container 1.1 to PL/Container version
          1.2 or later.<ol id="ol_axf_mmq_vcb">
            <li>Save the PL/Container configuration. For example, to save the configuration to a
              file named <codeph>plcontainer110-backup.xml</codeph> in the local
              directory:<codeblock>$ plcontainer runtime-backup -f plcontainer110-backup.xml</codeblock></li>
            <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the
                <codeph>-u</codeph> option to update the PL/Container language extension. For
              example, the following command updates the PL/Container language extension to version
              1.2 on a Linux
              system:<codeblock>$ gppkg -u plcontainer-1.2.0-rhel7-x86_64.gppkg</codeblock></li>
            <li>Source the Greenplum Database environment file
                <codeph>$GPHOME/greenplum_path.sh</codeph>.<codeblock>$ source $GPHOME/greenplum_path.sh</codeblock></li>
            <li>Restore the PL/Container configuration. For example, this command restores the
              PL/Container configuration that you saved in a previous step:
              <codeblock>$ plcontainer runtime-restore -f plcontainer110-backup.xml</codeblock></li>
            <li>Restart Greenplum Database.<codeblock>$ gpstop -ra</codeblock></li>
            <li>You do not need to re-register the PL/Container extension in the databases in which
              you previously created the extension. Do register the PL/Container extension in each
              new database that will run PL/Container UDFs. For example, the following command
              registers PL/Container in a database named <codeph>mytest</codeph>: <codeblock>$ psql -d mytest -c 'CREATE EXTENSION plcontainer;'</codeblock>
              <p>The command also creates PL/Container-specific functions and views.</p></li>
          </ol></p>
        <note>PL/Container version 1.2 utilizes the new resource group capabilities introduced in
          Greenplum Database version 5.8.0. If you downgrade to a Greenplum Database system that
          uses PL/Container version 1.1. or earlier, you must use <codeph>plcontainer
            runtime-edit</codeph> to remove any <codeph>resource_group_id</codeph> settings from
          your PL/Container runtime configuration.</note>
      </body>
    </topic>
    <topic id="topic_i2t_v2n_sbb" otherprops="oss-only">
      <title>构建和安装PL/Container语言扩展</title>
      <!--oss only conent-->
      <body>
        <p>PL/Container语言扩展可用作开源模块。
          有关构建和安装作为Greenplum数据库的一部分的模块信息，
          请参阅位于<xref href="https://github.com/greenplum-db/plcontainer" format="html" scope="external">https://github.com/greenplum-db/plcontainer</xref>的GitHub存储库中的README文件。
          </p>
      </body>
    </topic>
  </topic>
  <topic id="topic_qcr_bfk_rbb">
    <title>安装PL/Container Docker镜像</title>
    <body>
      <p>PL/Container语言扩展包括<codeph>plcontainer</codeph>实用程序，该实用程序在Greenplum数据库主机上安装Docker镜像，并将配置信息添加到PL/Container配置文件。
        配置信息允许PL/Container使用Docker镜像创建Docker容器。
        有关<codeph>plcontainer</codeph>的信息，请参阅<xref href="#topic_rw3_52s_dw" format="dita"/>。
        </p>
      <!--Pivotal conent-->
      <p otherprops="pivotal">Download the <codeph>tar.gz</codeph> file that contains the Docker
        images from <xref href="https://network.pivotal.io/products/pivotal-gpdb" scope="external"
          format="html" class="- topic/xref ">Pivotal Network</xref>. <ul id="ul_vsj_pxb_tbb">
          <li><codeph>plcontainer-python-images-1.0.0.tar.gz</codeph></li>
          <li><codeph>plcontainer-r-images-1.0.0.tar.gz</codeph></li>
        </ul></p>
      <!--oss only conent-->
      <p otherprops="oss-only">PL/Container开源模块包含dockerfiles，用于构建可与PL/Container一起使用的Docker镜像。
        您可以构建一个Docker镜像来运行PL/Python UDF和一个Docker镜像来运行PL/R UDF。
        请参阅GitHub存储库中的dockerfiles，网址为<xref href="https://github.com/greenplum-db/plcontainer" format="html" scope="external">https://github.com/greenplum-db/plcontainer</xref>。
        </p>
      <p>在Greenplum数据库主机上安装Docker镜像。
        此示例使用<codeph>plcontainer</codeph>实用程序为Python安装Docker镜像并更新PL/Container配置。
        该示例假定要安装的Docker镜像位于<codeph>/home/gpadmin</codeph>中的文件中。
        </p>
      <p>此<codeph>plcontainer</codeph>命令从Docker镜像文件安装PL/Python的Docker镜像。
        <codeblock>plcontainer image-add -f /home/gpadmin/plcontainer-python-images-1.0.0.tar.gz</codeblock></p>
      <p>该实用程序在Greenplum数据库主机上安装Docker镜像时显示进度信息。
        </p>
      <p>使用<codeph>plcontainer image-list</codeph>命令在本地主机上显示已安装的Docker镜像。
        </p>
      <p>此命令将信息添加到PL/Container配置文件，以便PL/Container可以访问Docker镜像以创建Docker容器。
        <codeblock>plcontainer runtime-add -r plc_py -i pivotaldata/plcontainer_python_shared:devel -l python</codeblock></p>
      <p>该实用程序在更新Greenplum数据库实例上的PL/Container配置文件时显示进度信息。
        </p>
      <p>您可以使用<codeph>plcontainer runtime-show -r plc_py</codeph>命令查看PL/Container配置信息。
        您可以使用<codeph>plcontainer runtime-edit</codeph>命令查看PL/Container配置XML文件。
        </p>
    </body>
  </topic>
  <topic id="topic6" xml:lang="en">
    <title id="pz213704">卸载PL/Container</title>
    <body>
      <p>要卸载PL/Container，请删除Docker容器和镜像，然后从Greenplum数据库中删除PL/Container支持。
        </p>
      <p>删除对PL/Container的支持后，您在数据库中创建的<codeph>plcontainer</codeph>用户定义函数将不再起作用。
        </p>
    </body>
    <topic id="topic_rnb_4s5_lw">
      <title>卸载Docker容器和镜像</title>
      <body>
        <p>在Greenplum数据库主机上，卸载不再需要的Docker容器和镜像。
          </p>
        <p><codeph>plcontainer image-list</codeph>命令列出了安装在本地Greenplum数据库主机上的Docker镜像。
          </p>
        <p><codeph>plcontainer image-delete</codeph>命令从所有Greenplum数据库主机中删除指定的Docker镜像。
          </p>
        <p>如果容器不是由PL/Container管理，则某些Docker容器可能存在于主机上。
          您可能需要使用Docker命令删除容器。
          这些<codeph>docker</codeph>命令管理本地主机上的Docker容器和镜像。
          <ul
            id="ul_emd_ts5_lw">
            <li>命令<codeph>docker ps -a</codeph>列出主机上的所有容器。命令<codeph>docker stop</codeph>关闭容器。
              </li>
            <li>命令<codeph>docker images</codeph>列出主机上的镜像。</li>
            <li>命令<codeph>docker rmi</codeph>删除镜像。</li>
            <li>命令<codeph>docker rm</codeph>删除容器。</li>
          </ul></p>
      </body>
    </topic>
    <topic xml:lang="en" id="topic_qnb_3cj_kw">
      <title>删除数据库的PL/Container支持</title>
      <body>
        <p>对于不再需要PL/Container的数据库，请删除对PL/Container的支持。</p>
        <section>
          <title>PL/Container 1.1及更高版本</title>
          <p>对于PL/Container 1.1及更高版本，请从数据库中删除扩展。
            此<codeph>psql</codeph>命令运行<codeph>DROP EXTENION</codeph>命令以删除数据库<codeph>mytest</codeph>中的PL/Container。
            <codeblock>psql -d mytest -c 'DROP EXTENSION plcontainer cascade;'</codeblock></p>
          <p>该命令将删除<codeph>plcontainer</codeph>扩展并从数据库中删除PL/Container特定的函数和视图。
            </p>
        </section>
        <section>
          <title>PL/Container 1.0</title>
          <p>以<codeph>gpadmin</codeph>用户身份运行<codeph>plcontainer_uninstall.sql</codeph>脚本。
            例如，此命令删除<codeph>mytest</codeph>数据库中的<codeph>plcontainer</codeph>语言。
            </p>
          <codeblock>psql -d mytest -f $GPHOME/share/postgresql/plcontainer/plcontainer_uninstall.sql</codeblock>
          <p>该脚本使用<codeph>CASCADE</codeph>删除<codeph>plcontainer</codeph>语言，以从数据库中删除PL/Container特定的函数和视图。
            </p>
        </section>
      </body>
    </topic>
    <topic xml:lang="en" id="topic_dty_fcj_kw" otherprops="pivotal">
      <title>Uninstalling PL/Container Language Extension</title>
      <body>
        <p>If no databases have <codeph>plcontainer</codeph> as a registered language, uninstall the
          Greenplum Database PL/Container language extension with the <codeph>gppkg</codeph>
          utility. </p>
        <ol id="ol_ety_fcj_kw">
          <li>Use the Greenplum Database <codeph>gppkg</codeph> utility with the <codeph>-r</codeph>
            option to uninstall the PL/Container language extension. This example uninstalls the
            PL/Container language extension on a Linux
              system:<codeblock>$ gppkg -r plcontainer-1.1.0</codeblock><p>You can run the
                <codeph>gppkg</codeph> utility with the options <codeph>-q --all</codeph> to list
              the installed extensions and their versions.</p></li>
          <li>Reload
            <codeph>greenplum_path.sh</codeph>.<codeblock>$ source $GPHOME/greenplum_path.sh</codeblock></li>
          <li>Restart the database.<codeblock>$ gpstop -ra</codeblock></li>
        </ol>
      </body>
    </topic>
  </topic>
  <topic id="topic_rh3_p3q_dw">
    <title>使用PL/Container函数</title>
    <body>
      <p>在Greenplum数据库系统的数据库中启用PL/Container时，语言<codeph>plcontainer</codeph>将在数据库中注册。
        当您将<codeph>plcontainer</codeph>指定为UDF定义中的语言时，可以使用PL/Container Docker镜像支持的过程语言创建和运行用户定义的函数。
        </p>
      <p>使用PL/Container的UDF定义必须包含这些项。</p>
      <ul id="ul_z2m_1kj_kw">
        <li>UDF的第一行必须是<codeph># container:
          <varname>ID</varname></codeph></li>
        <li><codeph>LANGUAGE</codeph>属性必须是<codeph>plcontainer</codeph></li>
      </ul>
      <p><varname>ID</varname>是PL/Container用于标识Docker镜像的名称。
        当Greenplum数据库在主机上执行UDF时，主机上的Docker镜像用于启动运行UDF的Docker容器。
        在XML配置文件<codeph>plcontainer_configuration.xml</codeph>中，有一个<codeph>runtime</codeph> XML元素，
        它包含指定Docker容器启动信息的相应<codeph>id</codeph> XML元素。
        有关PL/Container如何将<varname>ID</varname>映射到Docker镜像的信息，请参阅<xref href="#topic_sk1_gdq_dw" format="dita"/>。
        有关示例UDF定义，请参阅<xref href="#topic9" format="dita"/>。
        </p>
      <p>PL/Container配置文件仅在运行PL/Container函数的每个Greenplum数据库会话中第一次调用PL/Container函数时读取。
        您可以通过在会话期间对视图<codeph>plcontainer_refresh_config</codeph>执行<codeph>SELECT</codeph>命令来强制重新读取配置文件。
        例如，此<codeph>SELECT</codeph>命令强制读取配置文件。
        </p>
      <codeblock>SELECT * FROM plcontainer_refresh_config;</codeblock>
      <p>运行该命令会执行PL/Container函数，该函数会更新master实例和segment实例上的配置并返回刷新的状态。
        <codeblock> gp_segment_id | plcontainer_refresh_local_config
---------------+----------------------------------
             1 | ok
             0 | ok
            -1 | ok
(3 rows)</codeblock></p>
      <p>此外，您可以通过在视图<codeph>plcontainer_show_config</codeph>上执行<codeph>SELECT</codeph>命令来显示会话中的所有配置。
        例如，此<codeph>SELECT</codeph>命令返回PL/Container配置。
        </p>
      <codeblock>SELECT * FROM plcontainer_show_config;</codeblock>
      <p>运行该命令将执行PL/Container函数，该函数显示master实例和segment实例的配置信息。
        这是视图输出的开始和结束的示例。
        <codeblock>INFO:  plcontainer: Container 'plc_py_test' configuration
INFO:  plcontainer:     image = 'pivotaldata/plcontainer_python_shared:devel'
INFO:  plcontainer:     memory_mb = '1024'
INFO:  plcontainer:     use container network = 'no'
INFO:  plcontainer:     use container logging  = 'no'
INFO:  plcontainer:     shared directory from host '/usr/local/greenplum-db/./bin/plcontainer_clients' to container '/clientdir'
INFO:  plcontainer:         access = readonly

    ...

INFO:  plcontainer: Container 'plc_r_example' configuration  (seg0 slice3 192.168.180.45:40000 pid=3304)
INFO:  plcontainer:     image = 'pivotaldata/plcontainer_r_without_clients:0.2'  (seg0 slice3 192.168.180.45:40000 pid=3304)
INFO:  plcontainer:     memory_mb = '1024'  (seg0 slice3 192.168.180.45:40000 pid=3304)
INFO:  plcontainer:     use container network = 'no'  (seg0 slice3 192.168.180.45:40000 pid=3304)
INFO:  plcontainer:     use container logging  = 'yes'  (seg0 slice3 192.168.180.45:40000 pid=3304)
INFO:  plcontainer:     shared directory from host '/usr/local/greenplum-db/bin/plcontainer_clients' to container '/clientdir'  (seg0 slice3 192.168.180.45:40000 pid=3304)
INFO:  plcontainer:         access = readonly  (seg0 slice3 192.168.180.45:40000 pid=3304) 
gp_segment_id | plcontainer_show_local_config
---------------+-------------------------------
             0 | ok
            -1 | ok
             1 | ok</codeblock></p>
      <p>PL/Container函数<codeph>plcontainer_containers_summary()</codeph>显示有关当前运行的Docker容器的信息。
        <codeblock>SELECT * FROM plcontainer_containers_summary();</codeblock></p>
      <p>如果普通（非超级用户）Greenplum数据库用户运行该函数，则该函数仅显示用户创建的容器的信息。
        如果Greenplum数据库超级用户运行该函数，则会显示Greenplum数据库用户创建的所有容器的信息。
        这是2个容器运行时的示例输出。
        </p>
      <codeblock> SEGMENT_ID |                           CONTAINER_ID                           |   UP_TIME    |  OWNER  | MEMORY_USAGE(KB)
------------+------------------------------------------------------------------+--------------+---------+------------------
 1          | 693a6cb691f1d2881ec0160a44dae2547a0d5b799875d4ec106c09c97da422ea | Up 8 seconds | gpadmin | 12940
 1          | bc9a0c04019c266f6d8269ffe35769d118bfb96ec634549b2b1bd2401ea20158 | Up 2 minutes | gpadmin | 13628
(2 rows)</codeblock>
    </body>
    <topic id="topic9" xml:lang="en">
      <title id="pz215232">示例</title>
      <body>
        <p>示例的<codeph># container</codeph>行中的值<codeph>plc_python_shared</codeph>和<codeph>plc_r_shared</codeph>是<codeph>plcontainer_config.xml</codeph>文件中定义的<codeph>id</codeph> XML元素。
          <codeph>id</codeph>元素映射到指定要启动的Docker镜像的<codeph>image</codeph>元素。
          如果您使用不同的ID配置PL/Container，请更改<codeph># container</codeph>行的值。
          有关配置PL/Container和查看配置设置的信息，请参阅<xref
                  href="#topic_sk1_gdq_dw" format="dita"/>。
          </p>
        <p>这是使用<codeph>plc_python_shared</codeph>容器运行的PL/Python函数的示例：
          <codeblock>CREATE OR REPLACE FUNCTION pylog100() RETURNS double precision AS $$
# container: plc_python_shared
import math
return math.log10(100)
$$ LANGUAGE plcontainer;</codeblock></p>
        <p>这是使用<codeph>plc_r_shared</codeph>容器的类似函数的示例：
          <codeblock>CREATE OR REPLACE FUNCTION rlog100() RETURNS text AS $$
# container: plc_r_shared
return(log10(100))
$$ LANGUAGE plcontainer;</codeblock></p>
        <p>如果UDF中的<codeph># container</codeph>行指定了不在PL/Container配置文件中的ID，
          则当您尝试执行UDF时，Greenplum数据库会返回错误。
          </p>
      </body>
    </topic>
  </topic>
  <topic id="topic_ehl_r3q_dw">
    <title>关于PL/Container运行PL/Python</title>
    <body>
      <p>在Python语言容器中，实现了模块<codeph>plpy</codeph>。
        该模块包含以下方法：
        </p>
      <ul id="ul_qfd_mdq_dw">
        <li><codeph>plpy.execute(stmt)</codeph> - 执行查询字符串<codeph>stmt</codeph>并将查询结果返回到字典对象列表中。为了能够访问结果字段，请确保查询返回命名字段。
          </li>
        <li><codeph>plpy.prepare(stmt[, argtypes])</codeph> - 准备查询的执行计划。如果在查询中有参数引用，则使用查询字符串和参数类型列表调用它。
          </li>
        <li><codeph>plpy.execute(plan[, argtypes])</codeph> - 执行准备好的计划。</li>
        <li><codeph>plpy.debug(msg)</codeph> - 将DEBUG2消息发送到Greenplum数据库日志。</li>
        <li><codeph>plpy.log(msg)</codeph> - 将LOG消息发送到Greenplum数据库日志。</li>
        <li><codeph>plpy.info(msg)</codeph> - 将INFO消息发送到Greenplum数据库日志。</li>
        <li><codeph>plpy.notice(msg)</codeph> - 将NOTICE消息发送到Greenplum数据库日志。</li>
        <li><codeph>plpy.warning(msg)</codeph> - 将WARNING消息发送到Greenplum数据库日志。</li>
        <li><codeph>plpy.error(msg)</codeph> - 将ERROR消息发送到Greenplum数据库日志。
          在Greenplum数据库中引发的ERROR消息导致查询停止并回滚事务。
          </li>
        <li><codeph>plpy.fatal(msg)</codeph> - 将FATAL消息发送到Greenplum数据库日志。
          FATAL消息导致关闭Greenplum数据库会话并回滚事务。
          </li>
        <li><codeph>plpy.subtransaction()</codeph> - 在显式子事务中管理<codeph>plpy.execute</codeph>调用。
          有关<codeph>plpy.subtransaction()</codeph>的其他信息，请参阅PostgreSQL文档中的<xref
                  href="https://www.postgresql.org/docs/9.1/plpython-subtransaction.html"
                  format="html" scope="external">显式子事务</xref>。
          </li>
      </ul>
      <p>如果在嵌套的Python函数调用中引发级别ERROR或FATAL的错误，则该消息包括封闭函数的列表。
        </p>
      <p>Python语言容器支持这些在构造ad-hoc查询时很有用的字符串引用函数。
        <ul id="ul_jwf_nd2_kfb">
          <li><codeph>plpy.quote_literal(string)</codeph> - 返回引用的字符串，用作SQL语句字符串中的字符串文字。
            内嵌的单引号和反斜杠正常加倍。
            <codeph>quote_literal()</codeph>在null输入（空输入）上返回null。
            如果参数可能为null，则<codeph>quote_nullable()</codeph>可能更合适。
            </li>
          <li><codeph>plpy.quote_nullable(string)</codeph> - 返回引用的字符串，用作SQL语句字符串中的字符串文字。
            如果参数为null，则返回<codeph>NULL</codeph>。
            内嵌的单引号和反斜杠正常加倍。
            </li>
          <li>
            <codeph>plpy.quote_ident(string)</codeph> - 返回引用的字符串，用作SQL语句字符串中的标识符。
            仅在必要时添加引号（例如，如果字符串包含非标识符字符或将进行大小写折叠）。
            内嵌的引号正常加倍。
            </li>
        </ul></p>
      <p>从PL/Python函数返回文本时，PL/Container将Python unicode对象转换为数据库编码中的文本。
        如果无法执行转换，则返回错误。
        </p>
      <p>PL/Container不支持此Greenplum数据库PL/Python特性：
        <ul
          id="ul_qzd_1w5_ncb">
          <li>多维数组。</li>
        </ul></p>
      <p>此外，Python模块有两个全局字典对象，它们在函数调用之间保留数据。
        它们被命名为GD和SD。
        GD用于在同一容器内运行的所有函数之间共享数据，而SD用于在每个单独函数的多个调用之间共享数据。
        请注意，当容器进程位于segment或master上时，只能在同一会话中访问数据。
        请注意，对于空闲会话，Greenplum数据库会终止segment进程，这意味着相关容器将被关闭，GD和SD中的数据将丢失。
        </p>
      <p>有关PL/Python的信息，参考<xref href="pl_python.xml#topic1"/>。</p>
      <p>有关<codeph>plpy</codeph>方法的信息，参考<xref
          href="https://www.postgresql.org/docs/8.4/plpython-database.html" format="html"
          scope="external">https://www.postgresql.org/docs/8.4/plpython-database.htm</xref>。
      </p>
    </body>
  </topic>
  <topic id="topic_lqz_t3q_dw">
    <title>关于PL/Container运行PL/R</title>
    <body>
      <p>在R语言容器中，实现了模块<codeph>pg.spi</codeph>。
        该模块包含以下方法：
        </p>
      <ul id="ul_mqz_t3q_dw">
        <li><codeph>pg.spi.exec(stmt)</codeph> - 执行查询字符串<codeph>stmt</codeph>并在R data.frame中返回查询结果。
          为了能够访问结果字段，请确保您的查询返回命名字段。
          </li>
        <li><codeph>pg.spi.prepare(stmt[, argtypes])</codeph> - 准备查询的执行计划。
          如果在查询中有参数引用，则使用查询字符串和参数类型列表调用它。
          </li>
        <li><codeph>pg.spi.execp(plan[, argtypes])</codeph> - 执行准备好的计划。</li>
        <li><codeph>pg.spi.debug(msg)</codeph> - 将DEBUG2消息发送到Greenplum数据库日志。</li>
        <li><codeph>pg.spi.log(msg)</codeph> - 将LOG消息发送到Greenplum数据库日志。</li>
        <li><codeph>pg.spi.info(msg)</codeph> - 将INFO消息发送到Greenplum数据库日志。</li>
        <li><codeph>pg.spi.notice(msg)</codeph> - 将NOTICE消息发送到Greenplum数据库日志。</li>
        <li><codeph>pg.spi.warning(msg)</codeph> - 将WARNING消息发送到Greenplum数据库日志。</li>
        <li><codeph>pg.spi.error(msg)</codeph> - 将ERROR消息发送到Greenplum数据库日志。
          在Greenplum数据库中引发的ERROR消息导致查询停止并回滚事务。</li>
        <li><codeph>pg.spi.fatal(msg)</codeph> - 将FATAL消息发送到Greenplum数据库日志。
          FATAL消息导致关闭Greenplum数据库会话并回滚事务。
          </li>
      </ul>
      <p>PL/Container不支持此PL/R特性：<ul id="ul_wjk_dgb_4cb">
          <li>多维数组。</li>
        </ul></p>
      <p>关于PL/R的信息，参考<xref href="pl_r.xml#topic1"/>。</p>
      <p>关于<codeph>pg.spi</codeph>方法的信息，参考<xref
          href="http://www.joeconway.com/plr/doc/plr-spi-rsupport-funcs-normal.html" format="html"
          scope="external"
          >http://www.joeconway.com/plr/doc/plr-spi-rsupport-funcs-normal.html</xref></p>
    </body>
  </topic>
  <topic id="topic_sk1_gdq_dw">
    <title>配置PL/Container</title>
    <body>
      <p>Greenplum数据库实用程序<codeph>plcontainer</codeph>管理Greenplum数据库系统中的PL/Container配置文件。
        该实用程序可确保配置文件在Greenplum数据库master和segment实例之间保持一致。
        </p>
      <note type="warning">在不使用该实用程序的情况下修改segment实例上的配置文件，
        可能会在不同的Greenplum数据库segment上创建导致不可预期行为的不同的、不兼容的配置。
        </note>
      <p>使用该实用程序进行的配置更改将应用于所有Greenplum数据库segment上的XML文件。
        但是，当前运行的会话的PL/Container配置使用会话启动期间存在的配置。
        要在正在运行的会话中更新PL/Container配置，请在会话中执行此命令。
        </p>
      <codeblock>SELECT * FROM plcontainer_refresh_config;</codeblock>
      <p>运行该命令会执行PL/Container函数，该函数会更新master和segment实例上的会话配置。
        </p>
    </body>
    <topic id="topic_rw3_52s_dw">
      <title>plcontainer实用程序</title>
      <body>
        <p><codeph>plcontainer</codeph>实用程序安装Docker镜像并管理PL/Container配置。
          该实用程序包含两组命令。
          </p>
        <ul id="ul_lzy_xsw_gcb">
          <li><codeph>image-*</codeph>命令管理Greenplum数据库系统主机上的Docker镜像。
            </li>
          <li><codeph>runtime-*</codeph>命令管理Greenplum数据库实例上的PL/Container配置文件。
            您可以将Docker镜像信息添加到PL/Container配置文件，包括镜像名称，位置和共享文件夹信息。
            您还可以编辑配置文件。
            </li>
        </ul>
        <p>要将PL/Container配置为使用Docker镜像，请在所有Greenplum数据库主机上安装Docker镜像，然后将配置信息添加到PL/Container配置中。
          </p>
        <p>PL/Container配置值（例如镜像名称，runtime ID，参数值和名称）区分大小写。
          </p>
        <section>
          <title>plcontainer语法</title>
          <codeblock><b>plcontainer</b> [<varname>command</varname>] [<b>-h</b> | <b>--help</b>]  [<b>--verbose</b>]</codeblock>
          <p>其中<varname>command</varname>是下面的其中一个。</p>
          <codeblock>  image-add {{<b>-f</b> | <b>--file</b>} <varname>image_file</varname>} | {{<b>-u</b> | <b>--URL</b>} <varname>image_URL</varname>}
  image-delete {<b>-i</b> | <b>--image</b>} <varname>image_name</varname>
  image-list

  runtime-add {<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname>
     {<b>-i</b> | <b>--image</b>} <varname>image_name</varname> {<b>-l | --language</b>} {python | r}
     [{<b>-v</b> | <b>--volume</b>} <varname>shared_volume</varname> [{<b>-v</b>| <b>--volume</b>} <varname>shared_volume</varname>...]]
     [{<b>-s</b> | <b>--setting</b>} <varname>param=value</varname> [{<b>-s</b> | <b>--setting</b>} <varname>param=value</varname> ...]]
  runtime-replace {<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname>
     {<b>-i</b> | <b>--image</b>} <varname>image_name</varname> <b>-l</b> {r | python}
     [{<b>-v</b> | <b>--volume</b>} <varname>shared_volume</varname> [{<b>-v</b> | <b>--volume</b>} <varname>shared_volume</varname>...]]
     [{<b>-s</b> | <b>--setting</b>} <varname>param=value</varname> [{<b>-s</b> | <b>--setting</b>} <varname>param=value</varname> ...]]
  runtime-show {<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname>
  runtime-delete {<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname>
  runtime-edit [{<b>-e</b> | <b>--editor</b>} <varname>editor</varname>]
  runtime-backup {<b>-f</b> | <b>--file</b>} <varname>config_file</varname>
  runtime-restore {<b>-f</b> | <b>--file</b>} <varname>config_file</varname>
  runtime-verify</codeblock>
        </section>
        <section>
          <title>plcontainer命令和选项</title>
        </section>
        <parml>
          <plentry>
            <pt>image-add <varname>location</varname></pt>
            <pd>在Greenplum数据库主机上安装Docker镜像。
              指定主机上Docker镜像文件的位置或Docker镜像的URL。
              这些是受支持的位置选项。
              <ul id="ul_ihd_dsv_gcb">
                <li>{<b>-f</b> | <b>--file</b>} <varname>image_file</varname>指定包含Docker镜像的主机上的tar存档文件。
                  此示例指向gpadmin主目录中的镜像文件
                    <codeph>/home/gpadmin/test_image.tar.gz</codeph></li>
                <li>{<b>-u</b> | <b>--URL</b>} <varname>image_URL</varname>指定Docker存储库和镜像的URL。
                  此示例URL指向本地Docker存储库
                    <codeph>192.168.0.1:5000/images/mytest_plc_r:devel</codeph></li>
              </ul></pd>
            <pd>安装Docker镜像后，使用<codeph><xref
                    href="#topic_rw3_52s_dw/runtime_add" format="dita">runtime-add</xref></codeph>命令配置PL/Container以使用Docker镜像。
              </pd>
          </plentry>
          <plentry>
            <pt>image-delete {<b>-i</b> | <b>--image</b>} <varname>image_name</varname></pt>
            <pd>从所有Greenplum数据库主机中删除已安装的Docker镜像。
              例如，指定包括tag的完整Docker镜像名称
                <codeph>pivotaldata/plcontainer_python_shared:1.0.0</codeph></pd>
          </plentry>
          <plentry>
            <pt>image-list</pt>
            <pd>列出主机上安装的Docker镜像。
              该命令仅列出本地主机上的镜像，而不是远程主机。
              该命令列出了所有已安装的Docker镜像，包括使用Docker命令安装的镜像。
              </pd>
          </plentry>
          <plentry id="runtime_add">
            <pt>runtime-add <varname>options</varname></pt>
            <pd>将配置信息添加到所有Greenplum数据库主机上的PL/Container配置文件中。
              如果指定的<varname>runtime_id</varname>存在，则该实用程序将返回错误，并且不会添加配置信息。
              </pd>
            <pd>关于PL/Container配置信息，参考<xref href="#topic_ojn_r2s_dw"
                format="dita"/>. </pd>
            <pd>这些是支持的选项：</pd>
            <pd>
              <parml>
                <plentry>
                  <pt>{-i | --image} <varname>docker-image</varname></pt>
                  <pd>必须。指定Greenplum数据库主机上安装的完整Docker镜像名称，包括tag。例如
                      <codeph>pivotaldata/plcontainer_python:1.0.0</codeph>。</pd>
                  <pd>如果未安装指定的Docker镜像，该实用程序将返回警告。
                    </pd>
                  <pd><codeph>plcontainer image-list</codeph>命令显示已安装的镜像信息，包括名称和tag（存储库和tag列）。
                    </pd>
                </plentry>
                <plentry>
                  <pt>{-l | --language} python | r</pt>
                  <pd>必须。指定PL/Container语言类型，支持的值是<codeph>python</codeph>（PL/Python）和<codeph>r</codeph>（PL/R）。
                    为runtime添加配置信息时，该实用程序会根据您指定的语言向配置添加启动命令。
                    </pd>
                  <pd>Python语言的启动命令。
                    <codeblock>/clientdir/pyclient.sh</codeblock></pd>
                  <pd>R语言的启动命令。
                    <codeblock>/clientdir/rclient.sh</codeblock></pd>
                </plentry>
                <plentry>
                  <pt>{<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname>
                  </pt>
                  <pd>需要。添加runtime ID。
                    在PL/Container配置文件中添加<codeph>runtime</codeph>元素时，这是PL/Container配置文件中<codeph>id</codeph>元素的值。
                    最大长度为63字节。
                    </pd>
                  <pd>在Greenplum数据库UDF<codeph># container</codeph>行指定名称。参考<xref href="#topic9" format="dita"/>。</pd>
                </plentry>
                <plentry>
                  <pt>{<b>-s</b> | <b>--setting</b>}
                      <varname>param</varname>=<varname>value</varname></pt>
                  <pd>可选的。指定要添加到runtime配置信息的设置。您可以多次指定此选项。
                    该设置适用于<varname>runtime_id</varname>指定的runtime配置。
                    该参数是PL/Container配置文件中<codeph><xref href="#topic_ojn_r2s_dw/plc_settings"
                                                       format="dita">settings</xref></codeph>元素的XML属性。这些是有效的参数。
                    <ul id="ul_dsz_j4w_gcb">
                      <li><codeph>cpu_share</codeph> - 在runtime配置中为每个容器设置CPU限制。默认值为1024。该值是CPU使用率与其他容器的相对权重。
                        </li>
                      <li><codeph>memory_mb</codeph> - 在runtime配置中为每个容器设置内存限制。默认值为1024。该值是一个整数，指定以MB为单位的内存量。
                        </li>
                      <li><codeph>resource_group_id</codeph> - 将指定的资源组分配给runtime配置。
                        资源组限制共享此runtime配置的所有容器的CPU和内存资源总使用量。
                        您必须指定资源组的<codeph>groupid</codeph>。
                        有关管理PL/Container资源的信息，请参阅<xref
                                href="#topic_resmgmt" format="dita">关于PL/Container资源管理</xref>。
                        </li>
                      <li><codeph>roles</codeph> - 指定允许为runtime配置运行容器的Greenplum数据库角色。
                        您可以指定单个角色名称或逗号分隔的角色名称列表。
                        默认值没有限制。
                        </li>
                      <li><codeph>use_container_logging</codeph> - 启用或禁用容器的Docker日志记录。
                        值为<codeph>yes</codeph>（启用日志记录）或<codeph>no</codeph>（禁用日志记录，默认值）。
                        <p>Greenplum数据库服务器配置参数<codeph><xref
                                href="../config_params/guc-list.xml#log_min_messages"
                        >log_min_messages</xref></codeph>控制日志级别。
                          默认日志级别为<codeph>warning</codeph>。
                          有关PL/Container日志信息的信息，请参阅<xref href="#plc_notes" format="dita"
                          >备注</xref>。
                          </p></li>
                    </ul></pd>
                </plentry>
                <plentry>
                  <pt>{-v | --volume} <varname>shared-volume</varname></pt>
                  <pd>可选的。指定要绑定装载的Docker卷。您可以多次指定此选项以定义多个卷。
                    </pd>
                  <pd>共享卷的格式：
                        <codeph><varname>host-dir</varname>:<varname>container-dir</varname>:[rw|ro]</codeph>。
                    该信息作为属性存储在PL/Container配置文件中的<codeph>runtime</codeph>元素的<codeph>shared_directory</codeph>元素中。
                    <ul id="ul_nms_vvv_gcb">
                      <li><varname>host-dir</varname> - 主机系统上目录的绝对路径。
                        Greenplum数据库管理员用户（gpadmin）必须具有对目录的适当访问权限。
                        </li>
                      <li><varname>container-dir</varname> - Docker容器中目录的绝对路径。</li>
                      <li><codeph>[rw|ro]</codeph> - 从容器访问主机目录的只读或读写权限。</li>
                    </ul></pd>
                  <pd>为新runtime添加配置信息时，该实用程序会添加此只读共享卷信息。
                    </pd>
                  <pd>
                    <codeblock><varname>greenplum-home</varname>/bin/plcontainer_clients:/clientdir:ro</codeblock>
                  </pd>
                  <pd>如果需要，您可以指定其他共享目录。
                    如果指定的<varname>container-dir</varname>与实用程序添加的相同，
                    或者如果指定具有相同<varname>container-dir</varname>的多个共享卷，则该实用程序将返回错误。
                    <note type="warning">允许对主机目录进行读写访问需要特殊注意事项。
                      <ul id="ul_ibw_gvk_kcb">
                        <li>指定对主机目录的读写访问权限时，请确保指定的主机目录具有正确的权限。
                          </li>
                        <li>运行PL/Container用户定义的函数时，主机上运行的多个并发Docker容器可能会更改主机目录中的数据。
                          确保这些函数支持对主机目录中的数据进行多个并发访问。
                          </li>
                      </ul></note></pd>
                </plentry>
              </parml>
            </pd>
          </plentry>
          <plentry>
            <pt>runtime-backup {<b>-f</b> | <b>--file</b>} <varname>config_file</varname></pt>
            <pd>
              <p dir="ltr">将PL/Container配置文件复制到本地主机上的指定文件。
                </p>
            </pd>
          </plentry>
          <plentry>
            <pt>runtime-delete {<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname></pt>
            <pd>
              <p dir="ltr">删除所有Greenplum数据库实例上PL/Container配置文件中的runtime配置信息。
                如果文件中不存在指定的<varname>runtime_id</varname>，则实用程序将返回一条消息。
                </p>
            </pd>
          </plentry>
          <plentry>
            <pt>runtime-edit [{<b>-e</b> | <b>--editor</b>} <varname>editor</varname>]</pt>
            <pd>使用指定的编辑器编辑XML文件<codeph>plcontainer_configuration.xml</codeph>。
              默认编辑器是<codeph>vi</codeph>。
              <p>保存文件会更新所有Greenplum数据库主机上的配置文件。
                如果更新的文件中存在错误，该实用程序将返回错误并且不会更新该文件。
                </p></pd>
          </plentry>
          <plentry>
            <pt>runtime-replace <varname>options</varname></pt>
            <pd>
              <p dir="ltr">替换所有Greenplum数据库实例上的PL/Container配置文件中的runtime配置信息。
                如果<varname>runtime_id</varname>不存在，则将信息添加到配置文件中。
                该实用程序将启动命令和共享目录添加到配置中。
                </p>
              <p dir="ltr">有关命令选项和添加到配置的信息，请参阅<codeph><xref href="#topic_rw3_52s_dw/runtime_add" format="dita">runtime-add</xref></codeph>。
                </p>
            </pd>
          </plentry>
          <plentry>
            <pt>runtime-restore {<b>-f</b> | <b>--file</b>} <varname>config_file</varname></pt>
            <pd>
              <p dir="ltr">使用本地主机上指定文件的信息替换所有Greenplum数据库实例上的PL/Container配置文件<codeph>plcontainer_configuration.xml</codeph>中的信息。
                </p>
            </pd>
          </plentry>
          <plentry>
            <pt>runtime-show [{<b>-r</b> | <b>--runtime</b>} <varname>runtime_id</varname>]</pt>
            <pd>
              <p dir="ltr">显示格式化的PL/Container runtime配置信息。
                如果未指定<varname>runtime_id</varname> ，则显示所有runtime标识的配置。
                </p>
            </pd>
          </plentry>
          <plentry>
            <pt>runtime-verify</pt>
            <pd>
              <p dir="ltr">使用master服务器上的配置信息检查Greenplum数据库实例上的PL/Container配置信息。
                如果该实用程序发现不一致，系统将提示您使用本地副本替换远程副本。
                该实用程序还执行XML验证。
                </p>
            </pd>
          </plentry>
          <plentry>
            <pt>-h | --help</pt>
            <pd>显示帮助文本。如果在没有命令的情况下指定，则显示所有<codeph>plcontainer</codeph>命令的帮助。如果使用命令指定，则显示该命令的帮助。
              </pd>
          </plentry>
          <plentry>
            <pt>--verbose</pt>
            <pd>为命令启用详细日志记录。</pd>
          </plentry>
        </parml>
        <section>
          <title>示例</title>
          <p>这些是管理PL/Container的常用命令的示例：</p>
          <ul id="ul_ijd_xmw_gcb">
            <li>在所有Greenplum数据库主机上安装Docker镜像。
              此示例从文件加载Docker镜像。
              该实用程序在命令行上显示进度信息，因为该实用程序在所有主机上安装Docker镜像。
              <codeblock>plcontainer image-add -f plc_newr.tar.gz</codeblock>
              <p>安装Docker镜像后，您可以在PL/Container配置文件中添加或更新runtime条目，以便PL/Container访问Docker镜像以启动Docker容器。
                </p></li>
            <li>将容器条目添加到PL/Container配置文件中。
              此示例添加PL/R runtime的配置信息，并指定内存和日志记录的共享卷和设置。
                <codeblock>plcontainer runtime-add -r runtime2 -i test_image2:0.1 -l r \
  -v /host_dir2/shared2:/container_dir2/shared2:ro \
  -s memory_mb=512 -s use_container_logging=yes</codeblock>
              <p>该实用程序在命令行上显示进度信息，因为它将runtime配置添加到配置文件，并将更新的配置分发到所有实例。
                </p></li>
            <li>在配置文件中显示给定runtime标识的特定runtime
              <codeblock>plcontainer runtime-show -r plc_python_shared</codeblock>
              <p>该实用程序显示与此输出类似的配置信息。
                <codeblock>PL/Container Runtime Configuration:
---------------------------------------------------------
 Runtime ID: plc_python_shared
 Linked Docker Image: test1:latest
 Runtime Setting(s):
 Shared Directory:
 ---- Shared Directory From HOST '/usr/local/greenplum-db/bin/plcontainer_clients' to Container '/clientdir', access mode is 'ro'
 ---- Shared Directory From HOST '/home/gpadmin/share/' to Container '/opt/share', access mode is 'rw'
---------------------------------------------------------</codeblock></p></li>
            <li>在您选择的交互式编辑器中编辑配置。
              此示例使用vim编辑器编辑配置文件。
              <codeblock>plcontainer runtime-edit -e vim</codeblock>
              <p>保存文件时，该实用程序会在将文件分发到Greenplum数据库主机时在命令行上显示进度信息。
                </p></li>
            <li>将当前的PL/Container配置保存到文件中。
              此示例将文件保存到本地文件<codeph>/home/gpadmin/saved_plc_config.xml</codeph>
              <codeblock>plcontainer runtime-backup -f /home/gpadmin/saved_plc_config.xml</codeblock></li>
            <li>使用XML文件覆盖PL/Container配置文件。
              此示例使用<codeph>/home/gpadmin</codeph>目录中文件中的信息替换配置文件中的信息。
              <codeblock>plcontainer runtime-restore -f /home/gpadmin/new_plcontainer_configuration.xml</codeblock>
              该实用程序在将更新的文件分发到Greenplum数据库实例时，在命令行上显示进度信息。
              </li>
          </ul>
        </section>
      </body>
    </topic>
    <topic id="topic_ojn_r2s_dw">
      <title>PL/Container配置文件</title>
      <body>
        <p>PL/Container在所有Greenplum数据库segment的数据目录中维护配置文件<codeph>plcontainer_configuration.xml</codeph>。
          PL/Container配置文件是XML文件。
          在XML文件中，根元素<codeph>configuration</codeph>包含一个或多个<codeph>runtime</codeph>元素。
          您可以在PL/Container函数定义的<codeph># container:</codeph>行中指定<codeph>runtime</codeph>元素的<codeph>id</codeph>。
          </p>
        <p>在XML文件中，名称（如元素和属性名称）和值区分大小写。
          </p>
        <p>这是一个示例文件。<codeblock>&lt;?xml version="1.0" ?>
&lt;configuration>
    &lt;runtime>
        &lt;id>plc_python_example1&lt;/id>
        &lt;image>pivotaldata/plcontainer_python_with_clients:0.1&lt;/image>
        &lt;command>./pyclient&lt;/command>
    &lt;/runtime>
    &lt;runtime>
        &lt;id>plc_python_example2&lt;/id>
        &lt;image>pivotaldata/plcontainer_python_without_clients:0.1&lt;/image>
        &lt;command>/clientdir/pyclient.sh&lt;/command>
        &lt;shared_directory access="ro" container="/clientdir" host="/usr/local/greenplum-db/bin/plcontainer_clients"/>
        &lt;setting memory_mb="512"/>
        &lt;setting use_container_logging="yes"/>
        &lt;setting cpu_share="1024"/>
        &lt;setting resource_group_id="16391"/>
    &lt;/runtime>
    &lt;runtime>
        &lt;id>plc_r_example&lt;/id>
        &lt;image>pivotaldata/plcontainer_r_without_clients:0.2&lt;/image>
        &lt;command>/clientdir/rclient.sh&lt;/command>
        &lt;shared_directory access="ro" container="/clientdir" host="/usr/local/greenplum-db/bin/plcontainer_clients"/>
        &lt;setting use_container_logging="yes"/>
        &lt;setting roles="gpadmin,user1"/>
    &lt;/runtime>
    &lt;runtime>
&lt;/configuration></codeblock></p>
        <p>这些是PL/Container配置文件中的XML元素和属性。</p>
        <parml>
          <plentry>
            <pt>configuration</pt>
            <pd>XML文件的根元素。</pd>
          </plentry>
          <plentry>
            <pt>runtime</pt>
            <pd>系统中可用的每个特定容器的一个元素。
              这些是<codeph>configuration</codeph>元素的子元素。
              </pd>
            <pd>
              <parml>
                <plentry>
                  <pt>id</pt>
                  <pd>必须。该值用于从PL/Container用户定义的函数引用Docker容器。
                    <codeph>id</codeph>值在配置中必须是唯一的。
                    <codeph>id</codeph>必须以字符或数字（a-z，A-Z或0-9）开头，并且可以包含字符，数字或字符<codeph>_</codeph>（下划线）,<codeph>.</codeph>（期间），或<codeph>-</codeph>（破折号）。
                    最大长度为63字节。
                    <p><codeph>id</codeph>指定当PL/Container创建Docker容器以执行用户定义的函数时要使用的Docker镜像。
                      </p></pd>
                </plentry>
                <plentry>
                  <pt>image</pt>
                  <pd>
                    <p>必须。该值是完整的Docker镜像名称，包括镜像tag。与在Docker中启动此容器指定它们的方式相同。
                      配置允许有许多容器对象引用相同的镜像名称，这种方式在Docker中它们将由相同的容器表示。
                      </p>
                    <p>例如，您可能有两个<codeph>runtime</codeph>元素，具有不同的<codeph>id</codeph>元素，
                      <codeph>plc_python_128</codeph>和<codeph>plc_python_256</codeph>，两者都引用Docker镜像<codeph>pivotaldata/plcontainer_python:1.0.0</codeph>。
                      第一个<codeph>runtime</codeph>指定128MB RAM限制，第二个指定由<codeph>setting</codeph>元素的<codeph>memory_mb</codeph>属性指定的256MB限制。
                      </p>
                  </pd>
                </plentry>
                <plentry>
                  <pt>command</pt>
                  <pd>必须。该值是要在容器内部运行以在容器内启动客户端进程的命令。
                    在创建<codeph>runtime</codeph>元素时，<codeph>plcontainer</codeph>实用程序会根据语言（<codeph>-l</codeph> 选项）添加<codeph>command</codeph>元素。
                    </pd>
                  <pd>python语言的<codeph>command</codeph>元素。
                    <codeblock>&lt;command>/clientdir/pyclient.sh&lt;/command></codeblock></pd>
                  <pd>R语言的<codeph>command</codeph>元素。<codeblock>&lt;command>/clientdir/rclient.sh&lt;/command></codeblock></pd>
                  <pd>只有在构建自定义容器并希望在容器启动之前实现一些其他初始化逻辑时，才应修改该值。
                    <note>无法使用<codeph>plcontainer</codeph>实用程序设置此元素。
                      您可以使用<codeph>plcontainer runtime-edit</codeph>命令更新配置文件。
                      </note></pd>
                </plentry>
                <plentry>
                  <pt>shared_directory</pt>
                  <pd>可选的。此元素为具有访问信息的容器指定共享Docker共享卷。
                    允许多个<codeph>shared_directory</codeph>元素。每个<codeph>shared_directory</codeph>元素指定一个共享卷。
                    <codeph>shared_directory</codeph>元素的XML属性：
                    <ul id="ul_x4d_lcs_dw">
                      <li><codeph>host</codeph> - 主机系统上的目录位置。</li>
                      <li><codeph>container</codeph> - 容器内的目录位置。</li>
                      <li><codeph>access</codeph> - 主机目录的访问级别，可以是<codeph>ro</codeph>（只读）或<codeph>rw</codeph>（读写）。
                      </li>
                    </ul></pd>
                  <pd>创建<codeph>runtime</codeph>元素时，<codeph>plcontainer</codeph>实用程序会添加<codeph>shared_directory</codeph>元素。
                    <codeblock>&lt;shared_directory access="ro" container="/clientdir" host="/usr/local/greenplum-db/bin/plcontainer_clients"/></codeblock></pd>
                  <pd>对于每个<codeph>runtime</codeph>元素，<codeph>shared_directory</codeph>元素的<codeph>container</codeph>属性必须是唯一的。
                    例如，<codeph>runtime</codeph>元素不能有两个带有属性<codeph>container="/clientdir"</codeph>的<codeph>shared_directory</codeph>元素。
                    <note type="warning">允许对主机目录进行读写访问需要特别考虑。
                      <ul id="ul_vzb_dvk_kcb">
                        <li>指定对主机目录的读写访问权限时，请确保指定的主机目录具有正确的权限。
                          </li>
                        <li>运行PL/Container用户定义的函数时，主机上运行的多个并发Docker容器可能会更改主机目录中的数据。
                          确保这些函数支持对主机目录中的数据进行多个并发访问。
                          </li>
                      </ul></note></pd>
                </plentry>
                <plentry id="plc_settings">
                  <pt>settings</pt>
                  <pd>可选的。此元素指定Docker容器配置信息。每个<codeph>setting</codeph>元素都包含一个属性。
                    element属性指定日志记录，内存或网络信息。例如，此元素启用日志记录。
                    <codeblock>&lt;setting use_container_logging="yes"/></codeblock></pd>
                  <pd>这些是合法属性。<parml>
                      <plentry>
                        <pt>cpu_share</pt>
                        <pd>可选的。在runtime中指定每个PL/Container容器的CPU使用率。
                          元素的值是正整数。默认值为1024。该值是CPU使用率与其他容器的相对权重。
                          </pd>
                        <pd>例如，与具有默认值1024的容器相比，<codeph>cpu_share</codeph>为2048的容器被分配了两倍的CPU切片时间。
                          </pd>
                      </plentry>
                      <plentry>
                        <pt>memory_mb="<varname>size</varname>"</pt>
                        <pd>可选的。该值指定允许每个容器使用的内存量（MB）。每个容器都以这个RAM量和两倍的交换空间开始。
                          容器内存消耗受主机系统<codeph>cgroups</codeph>配置的限制，这意味着在内存过量使用的情况下，容器由系统终止。
                          </pd>
                      </plentry>
                      <plentry>
                        <pt>resource_group_id="<varname>rg_groupid</varname>"</pt>
                        <pd>可选的。该值指定要分配给PL/Container runtime的资源组的<codeph>groupid</codeph>。
                          资源组限制共享此runtime配置的所有正在运行的容器的CPU和内存资源总使用量。
                          您必须指定资源组的<codeph>groupid</codeph>。
                          如果未将资源组分配给PL/Container runtime配置，则其容器实例仅受系统资源的限制。
                          有关管理PL/Container资源的信息，请参阅<xref href="#topic_resmgmt"
                            format="dita">关于PL/Container资源管理</xref>。</pd>
                      </plentry>
                      <plentry>
                        <pt>roles="<varname>list_of_roles</varname>"</pt>
                        <pd>可选的。该值是Greenplum数据库角色名称或以逗号分隔的角色列表。
                          PL/Container运行仅对列出的角色使用PL/Container runtime配置的容器。
                          如果未指定该属性，则任何Greenplum数据库角色都可以运行此容器runtime配置的实例。
                          例如，您创建一个指定<codeph>plcontainer</codeph>语言的UDF，
                          并标识具有<codeph>roles</codeph>属性集的<codeph># container:</codeph> runtime配置。
                          当角色（用户）运行UDF时，PL/Container会检查角色列表，并仅在角色位于列表中时运行容器。
                          </pd>
                      </plentry>
                      <plentry>
                        <pt> use_container_logging="{yes | no}"</pt>
                        <pd>可选的。启用或禁用容器的Docker日志记录。属性值<codeph>yes</codeph>启用日志记录。属性值<codeph>no</codeph>禁用日志记录（默认值）。
                          </pd>
                        <pd>Greenplum数据库服务器配置参数<codeph><xref
                                href="../config_params/guc-list.xml#log_min_messages">log_min_messages</xref></codeph>控制PL/Container日志级别。
                          默认日志级别为<codeph>warning</codeph>。
                          有关PL/Container日志信息的信息，请参阅<xref href="#plc_notes" format="dita"
                          >备注</xref>。
                          </pd>
                        <pd>
                          <p>默认情况下，PL/Container日志信息将发送到系统服务。
                            在Red Hat 7或CentOS 7系统上，日志信息将发送到<codeph>journald</codeph>服务。
                            在Red Hat 6或CentOS 6系统上，日志将发送到<codeph>syslogd</codeph>服务。
                            </p>
                        </pd>
                      </plentry>
                    </parml></pd>
                </plentry>
              </parml>
            </pd>
          </plentry>
        </parml>
      </body>
    </topic>
    <topic id="topic_v3s_qv3_kw">
      <title>更新PL/Container配置</title>
      <body>
        <p>您可以使用<codeph>plcontainer runtime-add</codeph>命令将<codeph>runtime</codeph>元素添加到PL/Container配置文件中。
          命令选项指定runtime ID，Docker镜像和语言等信息。
          您可以使用<codeph>plcontainer runtime-replace</codeph>命令更新现有的<codeph>runtime</codeph>元素。
          该实用程序更新master和所有segment实例上的配置文件。
          </p>
        <p>PL/Container配置文件可以包含多个<codeph>runtime</codeph>元素，这些元素引用由XML元素<codeph>image</codeph>指定的相同Docker镜像。
          在示例配置文件中，<codeph>runtime</codeph>元素包含名为<codeph>plc_python_128</codeph>和<codeph>plc_python_256</codeph>的<codeph>id</codeph>元素，
          两者都引用Docker容器<codeph>pivotaldata/plcontainer_python:1.0.0</codeph>。
          第一个<codeph>runtime</codeph>元素定义为128MB RAM限制，第二个定义为为256MB RAM限制。
          </p>
        <codeblock>&lt;configuration>
  &lt;runtime>
    &lt;id>plc_python_128&lt;/id>
    &lt;image>pivotaldata/plcontainer_python:1.0.0&lt;/image>
    &lt;command>./client&lt;/command>
    &lt;shared_directory access="ro" container="/clientdir" host="/usr/local/gpdb/bin/plcontainer_clients"/>
    &lt;setting memory_mb="128"/>
  &lt;/runtime>
  &lt;runtime>
    &lt;id>plc_python_256&lt;/id>
    &lt;image>pivotaldata/plcontainer_python:1.0.0&lt;/image>
    &lt;command>./client&lt;/command>
    &lt;shared_directory access="ro" container="/clientdir" host="/usr/local/gpdb/bin/plcontainer_clients"/>
    &lt;setting memory_mb="256"/>
    &lt;setting resource_group_id="16391"/>
  &lt;/runtime>
&lt;configuration></codeblock>
      </body>
    </topic>
    <topic id="plc_notes">
      <title>备注</title>
      <body>
        <ul id="ul_j4g_vgs_wbb">
          <li>PL/Container不支持Greenplum数据库域对象。</li>
          <li>PL/Container在所有Greenplum数据库segment实例的数据目录中维护配置文件<codeph>plcontainer_configuration.xml</codeph>：master，standby master，primary和mirror。
            此查询列出了Greenplum数据库系统数据目录：
            <codeblock>SELECT hostname, datadir FROM gp_segment_configuration;</codeblock>
            <p>PL/Container配置文件示例位于<codeph>$GPHOME/share/postgresql/plcontainer</codeph>中。
              </p></li>
          <li>当Greenplum数据库执行PL/Container UDF时，Query Executer（QE）进程启动Docker容器并根据需要重用它们。
            经过一定的空闲时间后，QE进程退出并销毁其Docker容器。
            您可以使用Greenplum数据库服务器配置参数<codeph><xref
                    href="../config_params/guc-list.xml#gp_vmem_idle_resource_timeout"
            >gp_vmem_idle_resource_timeout</xref></codeph>控制空闲时间。
            控制空闲时间可能有助于Docker容器重用，并避免创建和启动Docker容器的开销。
            <note type="warning">更改<codeph>gp_vmem_idle_resource_timeout</codeph>值可能会因资源问题而影响性能。
              该参数还控制释放除Docker容器之外的Greenplum数据库资源。
              </note></li>
          <li>如果PL/Container Docker容器超过允许的最大内存量，则会终止该容器并显示内存不足警告。
            在配置了Docker 1.7.1版的Red Hat 6或CentOS 6系统上，如果PL/Container Docker容器主程序（PID 1）终止，也会显示内存不足警告。
            </li>
          <li>在某些情况下，当PL/Container在高并发环境中运行时，Docker守护程序会挂起并指示内存不足的日志条目。
            即使系统似乎有足够的可用内存，也可能发生这种情况。
            <p>这个问题似乎是由两个因素共同触发的，
              即PL/Container使用的Go语言（<codeph>golang</codeph>）运行时的激进虚拟内存需求，
              以及<codeph>overcommit_memory</codeph>的Greenplum数据库Linux服务器内核参数设置。
              该参数设置为2，不允许内存过量使用。
              </p>
            <p>可能有用的解决方法是增加交换空间量并增加Linux服务器内核参数<codeph>overcommit_ratio</codeph>。
              如果更改后问题仍然存在，则可能存在内存不足问题。
              您应检查系统上的可用内存，并在需要时添加更多RAM。
              您还可以降低群集负载。
              </p></li>
          <li>PL/Container不限制Docker基本设备大小，Docker容器的大小。
            在某些情况下，Docker守护程序控制基本设备大小。
            例如，如果Docker存储驱动程序是devicemapper，则Docker守护程序<codeph>--storage-opt</codeph>选项标志<codeph>dm.basesize</codeph>控制基本设备大小。
            devicemapper的默认基本设备大小为10GB。
            Docker命令<codeph>docker info</codeph>显示Docker系统信息，包括存储驱动程序。
            基本设备大小显示在Docker 1.12及更高版本中。
            有关Docker存储驱动程序的信息，请参阅Docker信息<xref
                    href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-storage-driver"
                    format="html" scope="external">守护存储驱动程序</xref>。
            <p>设置Docker基本设备大小时，必须在所有Greenplum数据库主机上设置大小。
              </p></li>
          <li>启用PL/Container日志记录后，可以使用Greenplum数据库服务器配置参数<codeph><xref
                  href="../config_params/guc-list.xml#log_min_messages"
          >log_min_messages</xref></codeph>设置日志级别。
            默认日志级别为<codeph>warning</codeph>。
            该参数控制PL/Container日志级别，还控制Greenplum数据库日志级别。
            <ul id="ul_knd_jhl_mcb">
              <li>使用<codeph>setting</codeph>属性<codeph>use_container_logging</codeph>为每个runtime ID启用或禁用PL/Container日志记录。
                默认为无记录。
                </li>
              <li>PL/Container日志信息是来自Docker容器中运行的UDF的信息。
                默认情况下，PL/Container日志信息将发送到系统服务。
                在Red Hat 7或CentOS 7系统上，日志信息将发送到<codeph>journald</codeph>服务。
                在Red Hat 6或CentOS 6系统上，日志信息将发送到<codeph>syslogd</codeph>服务。
                PL/Container日志信息将发送到Docker容器运行的主机的日志文件中。
                </li>
              <li>Greenplum数据库日志信息将发送到Greenplum数据库master上的日志文件。
                </li>
            </ul><p>在测试或排除PL/Container UDF故障时，可以使用<codeph>SET</codeph>命令更改Greenplum数据库日志级别。
              您可以在运行PL/Container UDF之前在会话中设置参数。
              此示例将日志级别设置为<codeph>debug1</codeph>。
              </p><codeblock>SET log_min_messages='debug1' ;</codeblock>
            <note>参数<codeph>log_min_messages</codeph>控制Greenplum数据库和PL/Container日志记录，
              即使PL/Container UDF未运行，增加日志级别也可能影响Greenplum数据库性能。
              </note></li>
        </ul>
      </body>
    </topic>
  </topic>
  <topic id="topic_ydt_rtc_rbb">
    <title>安装Docker</title>
    <body>
      <p>要使用PL/Container，必须在所有Greenplum数据库主机系统上安装Docker。
        这些说明显示了如何在CentOS 7上设置Docker服务。
        在RHEL 7上安装是一个类似的过程。
        </p>
      <p>在执行Docker安装之前，请确保满足这些要求。<ul
          id="ul_ygx_ms2_rbb">
          <li>可以访问CentOS <codeph>extras</codeph>存储库。</li>
          <li>用户具有sudo权限或是root权限。</li>
        </ul></p>
      <p>另请参阅CentOS的Docker站点安装说明<xref
              href="https://docs.docker.com/engine/installation/linux/centos/" format="html"
              scope="external">https://docs.docker.com/engine/installation/linux/centos/</xref>。
        有关Docker命令的列表，请参阅Docker引擎运行参考<xref
                href="https://docs.docker.com/engine/reference/run/" format="html" scope="external"
        >https://docs.docker.com/engine/reference/run/</xref>。
        </p>
      <section>
        <title>在CentOS 7上安装Docker</title>
        <p>这些步骤安装docker软件包并以具有sudo权限的用户身份启动docker服务。
          </p>
        <ol id="ol_e4g_sb2_rbb">
          <li>安装Docker所需的依赖项<codeblock>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</codeblock></li>
          <li>添加Docker仓库<codeblock>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</codeblock></li>
          <li>更新yum cache<codeblock>sudo yum makecache fast</codeblock></li>
          <li>安装Docker<codeblock>sudo yum -y install docker-ce</codeblock></li>
          <li>启动Docker守护进程。<codeblock>sudo systemctl start docker</codeblock></li>
          <li>要授予对Docker守护程序和docker命令的访问权限，请将Greenplum数据库管理员（gpadmin）分配给组<codeph>docker</codeph>。
            <codeblock>sudo usermod -aG docker gpadmin</codeblock></li>
          <li>退出会话并再次登录以更新权限。</li>
          <li>运行Docker命令以测试Docker安装。
            此命令列出当前运行的Docker容器。
            <codeblock>docker ps</codeblock></li>
        </ol>
        <p>此命令将Docker配置为在主机系统启动时启动。
          <codeblock>sudo systemctl start docker.service</codeblock></p>
        <p>在所有Greenplum数据库主机上安装Docker后，重新启动Greenplum数据库系统以允许Greenplum数据库访问Docker。
          <codeblock>gpstop -ra</codeblock></p>
      </section>
      <section>
        <title>在CentOS 6上安装Docker</title>
        <p>这些步骤安装Docker软件包并以具有sudo权限的用户身份启动docker服务。
          </p>
        <ol id="ol_lrx_zb2_rbb">
          <li>安装EPEL包<codeblock>sudo yum -y install epel-release</codeblock></li>
          <li>安装Docker<codeblock>sudo yum -y install docker-io</codeblock></li>
          <li>创建docker组<codeblock>sudo groupadd docker</codeblock></li>
          <li>启动Docker<codeblock>sudo service docker start</codeblock></li>
          <li>要授予对Docker守护程序和docker命令的访问权限，请将Greenplum数据库管理员（gpadmin）分配给组<codeph>docker</codeph>。
            <codeblock>sudo usermod -aG docker gpadmin</codeblock></li>
          <li>退出会话并再次登录以更新权限。</li>
          <li>运行Docker命令以测试Docker安装。
            此命令列出当前运行的Docker容器。<codeblock>docker ps</codeblock></li>
        </ol>
        <p>此命令将Docker配置为在主机系统启动时启动。<codeblock>sudo chkconfig docker on</codeblock></p>
        <p>在所有Greenplum数据库主机上安装Docker后，重新启动Greenplum数据库系统以允许Greenplum数据库访问Docker。
          <codeblock>gpstop -ra</codeblock></p>
      </section>
    </body>
  </topic>
  <topic xml:lang="en" id="topic_kds_plk_rbb">
    <title>参考</title>
    <body>
      <p>Docker主页<xref href="https://www.docker.com/" format="html" scope="external"
          >https://www.docker.com/</xref></p>
      <p>Docker命令行接口<xref
          href="https://docs.docker.com/engine/reference/commandline/cli/" format="html"
          scope="external">https://docs.docker.com/engine/reference/commandline/cli/</xref></p>
      <p>Dockerfile参考 <xref href="https://docs.docker.com/engine/reference/builder/"
          format="html" scope="external"
        >https://docs.docker.com/engine/reference/builder/</xref></p>
      <p>在Linux系统上安装Docker<xref
          href="https://docs.docker.com/engine/installation/linux/centos/" format="html"
          scope="external">https://docs.docker.com/engine/installation/linux/centos/</xref></p>
      <p>通过systemd控制和配置Docker<xref
          href="https://docs.docker.com/engine/admin/systemd/" format="html" scope="external"
          >https://docs.docker.com/engine/admin/systemd/</xref></p>
    </body>
  </topic>
</topic>
