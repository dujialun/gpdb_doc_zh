<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="defining-queries">
    <title id="in140509">定义查询</title>
    <shortdesc>Greenplum数据库基于PostgreSQL的SQL标准实现。</shortdesc>
    <body>
        <p>这个主题描述如何在Greenplum数据库中构造SQL查询。</p>
        <ul>
            <li id="in143747">
                <xref format="dita" href="#topic3" type="topic"/>
            </li>
            <li id="in143755">
                <xref format="dita" href="#topic4" type="topic"/>
            </li>
        </ul>
    </body>
    <topic id="topic3" xml:lang="en">
        <title id="in140510">SQL词汇</title>
        <body>
            <p>SQL是一种访问数据库的标准语言。该语言由数据存储、检索、分析、查看、操纵等元素组成。使用者可以使用SQL命令来构造Greenplum数据库引擎能够理解的查询和命令。命令由以正确语法顺序排列的合法符号序列构成，最后以分号(<codeph>;</codeph>)终结。
            </p>
            <p>更多有关<xref
                    href="../../../ref_guide/sql_commands/sql_ref.xml">SQL命令参考</xref><ph otherprops="op-print">请见<cite>Greenplum数据库参考指南</cite></ph>。</p>
            <p>Greenplum数据库使用PostgreSQL的结构和语法，但有一些不同。更多有关PostgreSQL中的SQL规则和概念的信息，请见PostgreSQL文档中的“SQL语法”。</p>
        </body>
    </topic>
    <topic id="topic4" xml:lang="en">
        <title id="in140511">SQL值表达式</title>
        <body>
            <p>SQL值表达式由一个或者多个值、符号、操作符、SQL函数及数据组成。值表达式会比较数据或者执行计算并且返回一个值作为结果。计算包括逻辑的、数学的和集合操作。
                </p>
            <p>下列都是值表达式:</p>
            <ul>
                <li id="in199821">一个聚集表达式</li>
                <li id="in199865">一个数组构造器</li>
                <li id="in199876">一个列引用</li>
                <li id="in199883">一个常量或者字面值</li>
                <li id="in143969">一个相关子查询</li>
                <li id="in199893">一个域选择表达式</li>
                <li id="in199900">一个函数调用</li>
                <li id="in205284"><codeph>INSERT</codeph><ph>或者
                            <codeph>UPDATE</codeph></ph>中的一个新列值</li>
                <li id="in205286">一个操作符调用列引用</li>
                <li id="in144037">函数定义或者预备语句中的一个位置参数引用</li>
                <li id="in144106">一个行构造器</li>
                <li id="in199915">一个标量子查询</li>
                <li id="in205305"><codeph>WHERE</codeph>子句中的一个搜索条件</li>
                <li id="in205332"><codeph>SELECT</codeph> 命令的一个目标列表</li>
                <li id="in199922">一个类型造型</li>
                <li id="in199929">圆括号中的一个值表达式，可用于分组子表达式以及覆盖优先级</li>
                <li id="in199936">一个窗口表达式</li>
            </ul>
            <p>函数和操作符等SQL结构是表达式，但它们不遵循任何一般语法规则。更多有关这些结构的信息，请见使用函数和操作符 <xref
                    href="../topics/functions-operators.xml#topic26"/>。</p>
        </body>
        <topic id="topic5" xml:lang="en">
            <title>列引用</title>
            <body>
                <p>列引用的形式是：</p>
                <p>
                    <codeblock><i>correlation</i>.<i>columnname</i></codeblock>
                </p>
                <p>这里, <codeph>correlation</codeph> is the name of a table (possibly qualified
                    with a schema name) or an alias for a table defined with a <codeph>FROM</codeph>
                    clause or one of the keywords <codeph>NEW</codeph> or <codeph>OLD</codeph>.
                        <codeph>NEW</codeph> and <codeph>OLD</codeph> can appear only in rewrite
                    rules, but you can use other correlation names in any SQL statement. If the
                    column name is unique across all tables in the query, you can omit the
                        "<codeph>correlation.</codeph>" part of the column reference.</p>
            </body>
        </topic>
        <topic id="topic6" xml:lang="en">
            <title>Positional Parameters</title>
            <body>
                <p>Positional parameters are arguments to SQL statements or functions that you
                    reference by their positions in a series of arguments. For example,
                        <codeph>$1</codeph> refers to the first argument, <codeph>$2</codeph> to the
                    second argument, and so on. The values of positional parameters are set from
                    arguments external to the SQL statement or supplied when SQL functions are
                    invoked. Some client libraries support specifying data values separately from
                    the SQL command, in which case parameters refer to the out-of-line data values.
                    A parameter reference has the form:</p>
                <p>
                    <codeblock>$number</codeblock>
                </p>
                <p>For example:</p>
                <p>
                    <codeblock>CREATE FUNCTION dept(text) RETURNS dept
    AS $$ SELECT * FROM dept WHERE name = $1 $$
    LANGUAGE SQL;</codeblock>
                </p>
                <p>Here, the <codeph>$1</codeph> references the value of the first function argument
                    whenever the function is invoked.</p>
            </body>
        </topic>
        <topic id="topic7" xml:lang="en">
            <title>Subscripts</title>
            <body>
                <p>If an expression yields a value of an array type, you can extract a specific
                    element of the array value as follows:</p>
                <p>
                    <codeblock><i>expression</i>[<i>subscript</i>]
</codeblock>
                </p>
                <p>You can extract multiple adjacent elements, called an array slice, as follows
                    (including the brackets):</p>
                <p>
                    <codeblock><i>expression</i>[<i>lower_subscript</i>:<i>upper_subscript</i>]
</codeblock>
                </p>
                <p>Each subscript is an expression and yields an integer value.</p>
                <p>Array expressions usually must be in parentheses, but you can omit the
                    parentheses when the expression to be subscripted is a column reference or
                    positional parameter. You can concatenate multiple subscripts when the original
                    array is multidimensional. For example (including the parentheses):</p>
                <p>
                    <codeblock>mytable.arraycolumn[4]</codeblock>
                    <codeblock>mytable.two_d_column[17][34]</codeblock>
                    <codeblock>$1[10:42]</codeblock>
                    <codeblock>(arrayfunction(a,b))[42]</codeblock>
                </p>
            </body>
        </topic>
        <topic id="topic8" xml:lang="en">
            <title>Field Selection</title>
            <body>
                <p>If an expression yields a value of a composite type (row type), you can extract a
                    specific field of the row as follows:</p>
                <p>
                    <codeblock><i>expression</i>.<i>fieldname</i></codeblock>
                </p>
                <p>The row expression usually must be in parentheses, but you can omit these
                    parentheses when the expression to be selected from is a table reference or
                    positional parameter. For example:</p>
                <p>
                    <codeblock>mytable.mycolumn
</codeblock>
                    <codeblock>$1.somecolumn
</codeblock>
                    <codeblock>(rowfunction(a,b)).col3
</codeblock>
                </p>
                <p>A qualified column reference is a special case of field selection syntax.</p>
            </body>
        </topic>
        <topic id="topic9" xml:lang="en">
            <title>Operator Invocations</title>
            <body>
                <p>Operator invocations have the following possible syntaxes:</p>
                <p>
                    <codeblock><i>expression operator expression</i>(binary infix operator)</codeblock>
                    <codeblock><i>operator expression</i>(unary prefix operator)</codeblock>
                    <codeblock><i>expression operator</i>(unary postfix operator)</codeblock>
                </p>
                <p>Where <i>operator</i> is an operator token, one of the key words
                        <codeph>AND</codeph>, <codeph>OR</codeph>, or <codeph>NOT</codeph>, or
                    qualified operator name in the form:</p>
                <p>
                    <codeblock>OPERATOR(<i>schema</i>.<i>operatorname</i>)</codeblock>
                </p>
                <p>Available operators and whether they are unary or binary depends on the operators
                    that the system or user defines. For more information about built-in operators,
                    see <xref href="../topics/functions-operators.xml#topic29"/>.</p>
            </body>
        </topic>
        <topic id="topic10" xml:lang="en">
            <title id="in144774">Function Calls</title>
            <body>
                <p>The syntax for a function call is the name of a function (possibly qualified with
                    a schema name), followed by its argument list enclosed in parentheses:</p>
                <p>
                    <codeblock><i>function</i> ([<i>expression</i> [, <i>expression</i> ... ]])</codeblock>
                </p>
                <p>For example, the following function call computes the square root of 2:</p>
                <p>
                    <codeblock>sqrt(2)</codeblock>
                </p>
                <p>See <xref href="../../../ref_guide/function-summary.xml#topic1">Summary of
                        Built-in Functions</xref><ph otherprops="op-print"> in the <cite>Greenplum
                            Database Reference Guide</cite></ph> for lists of the built-in functions
                    by category. You can add custom functions, too.</p>
            </body>
        </topic>
        <topic id="topic11" xml:lang="en">
            <title id="in144846">Aggregate Expressions</title>
            <body>
                <p>An aggregate expression applies an aggregate function across the rows that a
                    query selects. An aggregate function performs a calculation on a set of values
                    and returns a single value, such as the sum or average of the set of values. The
                    syntax of an aggregate expression is one of the following:</p>
                <ul>
                    <li id="in144858"><codeph><i>aggregate_name</i>(<i>expression</i> [ , ... ]
                            )</codeph> — operates across all input rows for which the expected
                        result value is non-null. <codeph>ALL</codeph> is the default.</li>
                    <li id="in144859"><codeph><i>aggregate_name</i>(ALL <i>expression</i> [ , ... ]
                            )</codeph> — operates identically to the first form because
                            <codeph>ALL</codeph> is the default.</li>
                    <li id="in144860"><codeph><i>aggregate_name</i>(DISTINCT <i>expression</i> [ ,
                            ... ] )</codeph> — operates across all distinct non-null values of input
                        rows.</li>
                    <li id="in144861"><codeph><i>aggregate_name</i>(*)</codeph> — operates on all
                        rows with values both null and non-null. Generally, this form is most useful
                        for the <codeph>count(*)</codeph> aggregate function.</li>
                </ul>
                <p>Where <i>aggregate_name</i> is a previously defined aggregate (possibly
                    schema-qualified) and <i>expression</i> is any value expression that does not
                    contain an aggregate expression.</p>
                <p>For example, <codeph>count(*)</codeph> yields the total number of input rows,
                        <codeph>count(f1)</codeph> yields the number of input rows in which
                        <codeph>f1</codeph> is <ph>non-null, and </ph><codeph>count(distinct
                        f1)</codeph> yields the number of distinct non-null values of
                        <codeph>f1</codeph>.</p>
                <p>For predefined aggregate functions, see <xref
                        href="../topics/functions-operators.xml#topic29"/>. You can also add custom
                    aggregate functions.</p>
                <p>Greenplum Database provides the <codeph>MEDIAN</codeph> aggregate function, which
                    returns the fiftieth percentile of the <codeph>PERCENTILE_CONT</codeph> result
                    and special aggregate expressions for inverse distribution functions as
                    follows:</p>
                <p>
                    <codeblock>PERCENTILE_CONT(_percentage_) WITHIN GROUP (ORDER BY _expression_)
</codeblock>
                    <codeblock>PERCENTILE_DISC(_percentage_) WITHIN GROUP (ORDER BY _expression_)
</codeblock>
                </p>
                <p>Currently you can use only these two expressions with the keyword <codeph>WITHIN
                        GROUP</codeph>.</p>
            </body>
            <topic id="topic12" xml:lang="en">
                <title>Limitations of Aggregate Expressions</title>
                <body>
                    <p>The following are current limitations of the aggregate expressions:</p>
                    <ul>
                        <li id="in199103">Greenplum Database does not support the following
                            keywords: ALL, DISTINCT, FILTER and OVER. See <xref
                                href="../topics/functions-operators.xml#topic31/in2073121"/> for
                            more details. </li>
                        <li id="in199105">An aggregate expression can appear only in the result list
                            or HAVING clause of a SELECT command. It is forbidden in other clauses,
                            such as WHERE, because those clauses are logically evaluated before the
                            results of aggregates form. This restriction applies to the query level
                            to which the aggregate belongs.</li>
                        <li id="in200910">When an aggregate expression appears in a subquery, the
                            aggregate is normally evaluated over the rows of the subquery. If the
                            aggregate's arguments contain only outer-level variables, the aggregate
                            belongs to the nearest such outer level and evaluates over the rows of
                            that query. The aggregate expression as a whole is then an outer
                            reference for the subquery in which it appears, and the aggregate
                            expression acts as a constant over any one evaluation of that subquery.
                            See <xref format="dita" href="#topic15" type="topic"/> and <xref
                                href="../topics/functions-operators.xml#topic29/in204913"/>.</li>
                        <li id="in200915">Greenplum Database does not support DISTINCT with multiple
                            input expressions.</li>
                        <li id="in2009151">Greenplum Database does not support specifying an
                            aggregate function as an argument to another aggregate function.</li>
                        <li id="in2009152">Greenplum Database does not support specifying a window
                            function as an argument to an aggregate function.</li>
                    </ul>
                </body>
            </topic>
        </topic>
        <topic id="topic13" xml:lang="en">
            <title id="in199183">Window Expressions</title>
            <body>
                <p>Window expressions allow application developers to more easily compose complex
                    online analytical processing (OLAP) queries using standard SQL commands. For
                    example, with window expressions, users can calculate moving averages or sums
                    over various intervals, reset aggregations and ranks as selected column values
                    change, and express complex ratios in simple terms.</p>
                <p>A window expression represents the application of a <i>window function</i>
                    to a <i>window frame</i>, which is defined with an <codeph>OVER()</codeph>
                    clause. This is comparable to the type of calculation that can be done with an
                    aggregate function and a <codeph>GROUP BY</codeph> clause. Unlike aggregate
                    functions, which return a single result value for each group of rows, window
                    functions return a result value for every row, but that value is calculated
                    with respect to the set of rows in the window frame to which the row belongs.
                    The <codeph>OVER()</codeph> clause allows dividing the rows into <i>partitions</i> and
                    then further restricting the window frame by specifying which rows preceding or
                    following the current row within its partition to include in the calculation.</p>
                <p>Greenplum Database does not support specifying a window function as an argument
                    to another window function.</p>
                <p>The syntax of a window expression is:</p>
                <p>
                    <codeblock><i>window_function</i> ( [<i>expression</i> [, ...]] ) OVER ( <i>window_specification</i> )</codeblock>
                </p>
                <p>Where <i><codeph>window_function</codeph></i> is one of the functions listed in
                        <xref href="../topics/functions-operators.xml#topic30/in164369"/> or a
                    user-defined window function, <i><codeph>expression</codeph></i> is any value
                    expression that does not contain a window expression, and
                            <i><codeph>window_specification</codeph></i> is:</p>
                <p><codeblock>[<i>window_name</i>]
[PARTITION BY <i>expression </i>[, ...]]
[[ORDER BY <i>expression</i> [ASC | DESC | USING <i>operator</i>] [NULLS {FIRST | LAST}] [, ...]
    [{RANGE | ROWS} 
       { UNBOUNDED PRECEDING
       | <i>expression</i> PRECEDING
       | CURRENT ROW
       | BETWEEN <i>window_frame_bound</i> AND <i>window_frame_bound</i> }]]</codeblock>    and
                    where <codeph><i>window_frame_bound</i></codeph> can be one
                    of:<codeblock>    UNBOUNDED PRECEDING
    <i>expression</i> PRECEDING
    CURRENT ROW
    <i>expression</i> FOLLOWING
    UNBOUNDED FOLLOWING</codeblock></p>
                <p>A window expression can appear only in the select list of a
                        <codeph>SELECT</codeph> command. For example:</p>
                <p>
                    <codeblock>SELECT count(*) OVER(PARTITION BY customer_id), * FROM sales;
</codeblock>
                </p>
                <p>In a window expression, a window function call must be followed immediately by an
                        <codeph>OVER</codeph> clause. The <codeph>OVER</codeph> clause specifies the
                    window frame—the rows to be processed by the window function. This syntactically
                    distinguishes the function from a regular or aggregate function.</p>
                <p>A window specification has the following characteristics:</p>
                <ul>
                    <li id="in166168">The <codeph>PARTITION BY</codeph> clause defines the window
                        partitions to which the window function is applied. If omitted, the entire
                        result set is treated as one partition.</li>
                    <li id="in167327">The <codeph>ORDER BY</codeph> clause defines the expression(s)
                        for sorting rows within a window partition. The <codeph>ORDER BY</codeph>
                        clause of a window specification is separate and distinct from the
                            <codeph>ORDER BY</codeph> clause of a regular query expression. The
                            <codeph>ORDER BY</codeph> clause is required for the window functions
                        that calculate rankings, as it identifies the measure(s) for the ranking
                        values. For OLAP aggregations, the <codeph>ORDER BY</codeph> clause is
                        required to use window frames (the <codeph>ROWS</codeph> or
                            <codeph>RANGE</codeph> clause).</li>
                </ul>
                <note type="note">Columns of data types without a coherent ordering, such as
                        <codeph>time</codeph>, are not good candidates for use in the <codeph>ORDER
                        BY</codeph> clause of a window specification. <codeph>Time</codeph>, with or
                    without a specified time zone, lacks a coherent ordering because addition and
                    subtraction do not have the expected effects. For example, the following is not
                    generally true: <codeph>x::time &lt; x::time + '2
                    hour'::interval</codeph></note>
                <ul id="ul_im5_14q_2gb">
                    <li id="in167503">The <codeph>ROWS</codeph> or <codeph>RANGE</codeph> clause 
                        defines a window frame
                        for aggregate (non-ranking) window functions. A window frame defines a set
                        of rows within a window partition. When a window frame is defined, the
                        window function computes on the contents of this moving frame rather than
                        the fixed contents of the entire window partition. Window frames are
                        row-based (<codeph>ROWS</codeph>) or value-based
                        (<codeph>RANGE</codeph>).</li>
                </ul>
            </body>
            <topic id="topic_qck_12r_2gb">
                <title>Window Examples</title>
                <body>
                    <p>The following examples demonstrate using window functions with partitions and window frames.</p>
                    <section>
                        <title>Example 1 – Aggregate Window Function Over a Partition</title>
                        <p>The <codeph>PARTITION BY</codeph> list in the <codeph>OVER</codeph>
                            clause divides the rows into groups, or partitions, that have the same
                            values as the specified expressions.</p>
                        <p>This example compares employees' salaries with the average salaries for
                            their
                            departments:<codeblock>SELECT depname, empno, salary, avg(salary) OVER(PARTITION BY depname)
FROM empsalary;
  depname  | empno | salary |          avg          
-----------+-------+--------+-----------------------
 develop   |     9 |   4500 | 5020.0000000000000000
 develop   |    10 |   5200 | 5020.0000000000000000
 develop   |    11 |   5200 | 5020.0000000000000000
 develop   |     7 |   4200 | 5020.0000000000000000
 develop   |     8 |   6000 | 5020.0000000000000000
 personnel |     5 |   3500 | 3700.0000000000000000
 personnel |     2 |   3900 | 3700.0000000000000000
 sales     |     1 |   5000 | 4866.6666666666666667
 sales     |     3 |   4800 | 4866.6666666666666667
 sales     |     4 |   4800 | 4866.6666666666666667
(10 rows)
</codeblock></p>
                        <p>The first three output columns come from the table
                                <codeph>empsalary</codeph>, and there is one output row for each row
                            in the table. The fourth column is the average calculated on all rows
                            that have the same <codeph>depname</codeph> value as the current row.
                            Rows that share the same <codeph>depname</codeph> value constitute a
                            partition, and there are three partitions in this example. The
                                <codeph>avg</codeph> function is the same as the regular
                                <codeph>avg</codeph> aggregate function, but the
                                <codeph>OVER</codeph> clause causes it to be applied as a window
                            function.</p>
                        <p>You can also put the window specification in a <codeph>WINDOW</codeph>
                            clause and reference it in the select list. This example is equivalent
                            to the previous
                            query:<codeblock>SELECT depname, empno, salary, avg(salary) OVER(mywindow)
FROM empsalary
WINDOW mywindow AS (PARTITION BY depname);</codeblock></p>
                        <p>Defining a named window is useful when the select list has multiple
                            window functions using the same window specification.</p>
                    </section>
                    <section>
                        <title>Example 2 – Ranking Window Function With an ORDER BY Clause</title>
                        <p>An <codeph>ORDER BY</codeph> clause within the <codeph>OVER</codeph>
                            clause controls the order in which rows are processed by window
                            functions. The <codeph>ORDER BY</codeph> list for the window function
                            does not have to match the output order of the query. This example uses
                            the <codeph>rank()</codeph> window function to rank employees' salaries
                            within their departments:</p>
                        <codeblock>SELECT depname, empno, salary,
    rank() OVER (PARTITION BY depname ORDER BY salary DESC)
FROM empsalary;
  depname  | empno | salary | rank 
-----------+-------+--------+------
 develop   |     8 |   6000 |    1
 develop   |    11 |   5200 |    2
 develop   |    10 |   5200 |    2
 develop   |     9 |   4500 |    4
 develop   |     7 |   4200 |    5
 personnel |     2 |   3900 |    1
 personnel |     5 |   3500 |    2
 sales     |     1 |   5000 |    1
 sales     |     4 |   4800 |    2
 sales     |     3 |   4800 |    2
(10 rows)</codeblock>
                    </section>
                    <section>
                        <title>Example 3 – Aggregate Function over a Row Window Frame</title>
                        <p>A <codeph>RANGE</codeph> or <codeph>ROWS</codeph> clause defines the
                            window frame—a set of rows within a partition—that the window function
                            includes in the calculation. <codeph>ROWS</codeph> specifies a physical
                            set of rows to process, for example all rows from the beginning of the
                            partition to the current row.</p>
                        <p>This example calculates a running total of employee's salaries by department 
                            using the <codeph>sum()</codeph> function to total rows from the start of 
                            the partition to the current row:</p>
                        <codeblock>SELECT depname, empno, salary,
    sum(salary) OVER (PARTITION BY depname ORDER BY salary
        ROWS between UNBOUNDED PRECEDING AND CURRENT ROW)
FROM empsalary ORDER BY depname, sum;
  depname  | empno | salary |  sum  
-----------+-------+--------+-------
 develop   |     7 |   4200 |  4200
 develop   |     9 |   4500 |  8700
 develop   |    11 |   5200 | 13900
 develop   |    10 |   5200 | 19100
 develop   |     8 |   6000 | 25100
 personnel |     5 |   3500 |  3500
 personnel |     2 |   3900 |  7400
 sales     |     4 |   4800 |  4800
 sales     |     3 |   4800 |  9600
 sales     |     1 |   5000 | 14600
(10 rows)</codeblock>
                    </section>
                    <section>
                        <title>Example 4 – Aggregate Function for a Range Window Frame</title>
                        <p><codeph>RANGE</codeph> specifies logical values based on values of the
                                <codeph>ORDER BY</codeph> expression in the <codeph>OVER</codeph>
                            clause. This example demonstrates the difference between
                                <codeph>ROWS</codeph> and <codeph>RANGE</codeph>. The frame contains
                            all rows with salary values less than or equal to the current row. Unlike
                            the previous example, for employees with the same salary, the sum is the 
                            same and includes the salaries of all of those employees. </p>
                        <codeblock>SELECT depname, empno, salary,
    sum(salary) OVER (PARTITION BY depname ORDER BY salary
        RANGE between UNBOUNDED PRECEDING AND CURRENT ROW)
FROM empsalary ORDER BY depname, sum;
  depname  | empno | salary |  sum  
-----------+-------+--------+-------
 develop   |     7 |   4200 |  4200
 develop   |     9 |   4500 |  8700
 develop   |    11 |   5200 | 19100
 develop   |    10 |   5200 | 19100
 develop   |     8 |   6000 | 25100
 personnel |     5 |   3500 |  3500
 personnel |     2 |   3900 |  7400
 sales     |     4 |   4800 |  9600
 sales     |     3 |   4800 |  9600
 sales     |     1 |   5000 | 14600
(10 rows)</codeblock>
                    </section>
                </body>
            </topic>
        </topic>
        <topic id="topic14" xml:lang="en">
            <title>Type Casts</title>
            <body>
                <p>A type cast specifies a conversion from one data type to another. A cast applied
                    to a value expression of a known type is a run-time type conversion. The cast
                    succeeds only if a suitable type conversion is defined. This differs
                    from the use of casts with constants. A cast applied to a string literal
                    represents the initial assignment of a type to a literal constant value, so it
                    succeeds for any type if the contents of the string literal are acceptable input
                    syntax for the data type.</p>
                <p>Greenplum Database supports three types of casts applied to a value expression:
                        <ul id="ul_f4w_svt_rdb">
                        <li><i>Explicit cast</i> - Greenplum Database applies a cast when you
                            explicitly specify a cast between two data types. Greenplum Database
                            accepts two equivalent syntaxes for explicit type casts:<p>
                                <codeblock>CAST ( expression AS type )
expression::type</codeblock>
                            </p><p>The <codeph>CAST</codeph> syntax conforms to SQL; the syntax using
                                    <codeph>::</codeph> is historical PostgreSQL usage.</p></li>
                        <li><i>Assignment cast</i> - Greenplum Database implicitly invokes a cast in
                            assignment contexts, when assigning a value to a column of the target
                            data type. For example, a <codeph><xref
                                    href="../../../ref_guide/sql_commands/CREATE_CAST.xml">CREATE
                                    CAST</xref></codeph> command with the <codeph>AS
                                ASSIGNMENT</codeph> clause creates a cast that is applied implicitly
                            in the assignment context. This example assignment cast assumes that
                                <codeph>tbl1.f1</codeph> is a column of type <codeph>text</codeph>.
                            The <codeph>INSERT</codeph> command is allowed because the value is
                            implicitly cast from the <codeph>integer</codeph> to
                                <codeph>text</codeph> type.
                            <codeblock>INSERT INTO tbl1 (f1) VALUES (42);</codeblock></li>
                        <li><i>Implicit cast</i> - Greenplum Database implicitly invokes a cast in
                            assignment or expression contexts. For example, a <codeph>CREATE
                                CAST</codeph> command with the <codeph>AS IMPLICIT</codeph> clause
                            creates an implicit cast, a cast that is applied implicitly in both the
                            assignment and expression context. This example implicit cast assumes
                            that <codeph>tbl1.c1</codeph> is a column of type <codeph>int</codeph>.
                            For the calculation in the predicate, the value of <codeph>c1</codeph>
                            is implicitly cast from <codeph>int</codeph> to a
                                <codeph>decimal</codeph>
                            type.<codeblock>SELECT * FROM tbl1 WHERE tbl1.c2 = (4.3 + tbl1.c1) ;</codeblock></li>
                    </ul></p>
                <p>You can usually omit an explicit type cast if there is no ambiguity about the
                    type a value expression must produce (for example, when it is assigned to a
                    table column); the system automatically applies a type cast. Greenplum Database
                    implicitly applies casts only to casts defined with a cast context of
                    assignment or explicit in the system catalogs. Other casts must be
                    invoked with explicit casting syntax to prevent unexpected conversions from
                    being applied without the user's knowledge. </p>
                <p>You can display cast information with the <codeph>psql</codeph> meta-command
                        <codeph>\dC</codeph>. Cast information is stored in the catalog table
                        <codeph>pg_cast</codeph>, and type information is stored in the catalog
                    table <codeph>pg_type</codeph>. </p>
            </body>
        </topic>
        <topic id="topic15" xml:lang="en">
            <title id="in145048">Scalar Subqueries</title>
            <body>
                <p>A scalar subquery is a <codeph>SELECT</codeph> query in parentheses that returns
                    exactly one row with one column. Do not use a <codeph>SELECT</codeph> query that
                    returns multiple rows or columns as a scalar subquery. The query runs and uses
                    the returned value in the surrounding value expression. A correlated scalar
                    subquery contains references to the outer query block.</p>
            </body>
        </topic>
        <topic id="topic16" xml:lang="en">
            <title>Correlated Subqueries</title>
            <body>
                <p>A correlated subquery (CSQ) is a <codeph>SELECT</codeph> query with a
                        <codeph>WHERE</codeph> clause or target list that contains references to the
                    parent outer clause. CSQs efficiently express results in terms of results of
                    another query. Greenplum Database supports correlated subqueries that provide
                    compatibility with many existing applications. A CSQ is a scalar or table
                    subquery, depending on whether it returns one or multiple rows. Greenplum
                    Database does not support correlated subqueries with skip-level
                    correlations.</p>
            </body>
        </topic>
        <topic id="topic17" xml:lang="en">
            <title>Correlated Subquery Examples</title>
            <topic id="topic18" xml:lang="en">
                <title>Example 1 – Scalar correlated subquery</title>
                <body>
                    <codeblock>SELECT * FROM t1 WHERE t1.x 
            &gt; (SELECT MAX(t2.x) FROM t2 WHERE t2.y = t1.y);
</codeblock>
                </body>
            </topic>
            <topic id="topic19" xml:lang="en">
                <title>Example 2 – Correlated EXISTS subquery</title>
                <body>
                    <codeblock>SELECT * FROM t1 WHERE 
EXISTS (SELECT 1 FROM t2 WHERE t2.x = t1.x);
</codeblock>
                    <p>Greenplum Database uses one of the following methods to run CSQs:</p>
                    <ul>
                        <li id="in197793">Unnest the CSQ into join operations &#8211; This method is
                            most efficient, and it is how Greenplum Database runs most CSQs,
                            including queries from the TPC-H benchmark.</li>
                        <li id="in197800">Run the CSQ on every row of the outer query &#8211; This
                            method is relatively inefficient, and it is how Greenplum Database runs
                            queries that contain CSQs in the <codeph>SELECT</codeph> list or are
                            connected by <codeph>OR</codeph> conditions.</li>
                    </ul>
                    <p>The following examples illustrate how to rewrite some of these types of
                        queries to improve performance.</p>
                </body>
            </topic>
            <topic id="topic20" xml:lang="en">
                <title>Example 3 - CSQ in the Select List</title>
                <body>
                    <p>
                        <i>Original Query</i>
                    </p>
                    <codeblock>SELECT T1.a,
      (SELECT COUNT(DISTINCT T2.z) FROM t2 WHERE t1.x = t2.y) dt2 
FROM t1;</codeblock>
                    <p>Rewrite this query to perform an inner join with <codeph>t1</codeph> first
                        and then perform a left join with <codeph>t1</codeph> again. The rewrite
                        applies for only an equijoin in the correlated condition.</p>
                    <p>
                        <i>Rewritten Query</i>
                    </p>
                    <codeblock>SELECT t1.a, dt2 FROM t1 
       LEFT JOIN 
        (SELECT t2.y AS csq_y, COUNT(DISTINCT t2.z) AS dt2 
              FROM t1, t2 WHERE t1.x = t2.y 
              GROUP BY t1.x) 
       ON (t1.x = csq_y);
</codeblock>
                </body>
            </topic>
        </topic>
        <topic id="topic21" xml:lang="en">
            <title>Example 4 - CSQs connected by OR Clauses</title>
            <body>
                <p>
                    <i>Original Query</i>
                </p>
                <codeblock>SELECT * FROM t1 
WHERE 
x &gt; (SELECT COUNT(*) FROM t2 WHERE t1.x = t2.x) 
OR x &lt; (SELECT COUNT(*) FROM t3 WHERE t1.y = t3.y)
</codeblock>
                <p>Rewrite this query to separate it into two parts with a union on the
                        <codeph>OR</codeph> conditions.</p>
                <p>
                    <i>Rewritten Query</i>
                </p>
                <codeblock>SELECT * FROM t1 
WHERE x &gt; (SELECT count(*) FROM t2 WHERE t1.x = t2.x) 
UNION 
SELECT * FROM t1 
WHERE x &lt; (SELECT count(*) FROM t3 WHERE t1.y = t3.y)
</codeblock>
                <p>To view the query plan, use <codeph>EXPLAIN SELECT</codeph> or <codeph>EXPLAIN
                        ANALYZE SELECT</codeph>. Subplan nodes in the query plan indicate that the
                    query will run on every row of the outer query, and the query is a candidate for
                    rewriting. For more information about these statements, see <xref
                        href="query-profiling.xml#topic39"/>.</p>
            </body>
        </topic>
        <topic id="topic23" xml:lang="en">
            <title>Array Constructors</title>
            <body>
                <p>An array constructor is an expression that builds an array value from values for
                    its member elements. A simple array constructor consists of the key word
                        <codeph>ARRAY</codeph>, a left square bracket <codeph>[</codeph>, one or
                    more expressions separated by commas for the array element values, and a right
                    square bracket <codeph>]</codeph>. For example,</p>
                <p>
                    <codeblock>SELECT ARRAY[1,2,3+4];
  array
---------
 {1,2,7}
</codeblock>
                </p>
                <p>The array element type is the common type of its member expressions, determined
                    using the same rules as for <codeph>UNION</codeph> or <codeph>CASE</codeph>
                    constructs.</p>
                <p>You can build multidimensional array values by nesting array constructors. In the
                    inner constructors, you can omit the keyword <codeph>ARRAY</codeph>. For
                    example, the following two <codeph>SELECT</codeph> statements produce the same
                    result:</p>
                <p>
                    <codeblock>SELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];
SELECT ARRAY[[1,2],[3,4]];
     array
---------------
 {{1,2},{3,4}}
</codeblock>
                </p>
                <p>Since multidimensional arrays must be rectangular, inner constructors at the same
                    level must produce sub-arrays of identical dimensions.</p>
                <p>Multidimensional array constructor elements are not limited to a
                        sub-<codeph>ARRAY</codeph> construct; they are anything that produces an
                    array of the proper kind. For example:</p>
                <codeblock>CREATE TABLE arr(f1 int[], f2 int[]);
INSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], 
ARRAY[[5,6],[7,8]]);
SELECT ARRAY[f1, f2, '{{9,10},{11,12}}'::int[]] FROM arr;
                     array
------------------------------------------------
 {{{1,2},{3,4}},{{5,6},{7,8}},{{9,10},{11,12}}}
</codeblock>
                <p>You can construct an array from the results of a subquery. Write the array
                    constructor with the keyword <codeph>ARRAY</codeph> followed by a subquery in
                    parentheses. For example:</p>
                <codeblock>SELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');
                          ?column?
-----------------------------------------------------------
 {2011,1954,1948,1952,1951,1244,1950,2005,1949,1953,2006,31}
</codeblock>
                <p>The subquery must return a single column. The resulting one-dimensional array has
                    an element for each row in the subquery result, with an element type matching
                    that of the subquery's output column. The subscripts of an array value built
                    with <codeph>ARRAY</codeph> always begin with <codeph>1</codeph>.</p>
            </body>
        </topic>
        <topic id="topic24" xml:lang="en">
            <title>Row Constructors</title>
            <body>
                <p>A row constructor is an expression that builds a row value (also called a
                    composite value) from values for its member fields. For example,</p>
                <p>
                    <codeblock>SELECT ROW(1,2.5,'this is a test');
</codeblock>
                </p>
                <p>Row constructors have the syntax <codeph>rowvalue.*</codeph>, which expands to a
                    list of the elements of the row value, as when you use the syntax
                        <codeph>.*</codeph> at the top level of a <codeph>SELECT</codeph> list. For
                    example, if table <codeph>t</codeph> has columns <codeph>f1</codeph> and
                        <codeph>f2</codeph>, the following queries are the same:</p>
                <p>
                    <codeblock>SELECT ROW(t.*, 42) FROM t;
SELECT ROW(t.f1, t.f2, 42) FROM t;
</codeblock>
                </p>
                <p>By default, the value created by a <codeph>ROW</codeph> expression has an
                    anonymous record type. If necessary, it can be cast to a named composite type —
                    either the row type of a table, or a composite type created with <codeph>CREATE
                        TYPE AS</codeph>. To avoid ambiguity, you can explicitly cast the value if
                    necessary. For example:</p>
                <p>
                    <codeblock>CREATE TABLE mytable(f1 int, f2 float, f3 text);
CREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' 
LANGUAGE SQL;
</codeblock>
                </p>
                <p>In the following query, you do not need to cast the value because there is only
                    one <codeph>getf1()</codeph> function and therefore no ambiguity:</p>
                <p>
                    <codeblock>SELECT getf1(ROW(1,2.5,'this is a test'));
 getf1
-------
     1
CREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);
CREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT 
$1.f1' LANGUAGE SQL;
</codeblock>
                </p>
                <p>Now we need a cast to indicate which function to call:</p>
                <p>
                    <codeblock>SELECT getf1(ROW(1,2.5,'this is a test'));
ERROR:  function getf1(record) is not unique
</codeblock>
                    <codeblock>SELECT getf1(ROW(1,2.5,'this is a test')::mytable);
 getf1
-------
     1
SELECT getf1(CAST(ROW(11,'this is a test',2.5) AS 
myrowtype));
 getf1
-------
    11
</codeblock>
                </p>
                <p>You can use row constructors to build composite values to be stored in a
                    composite-type table column or to be passed to a function that accepts a
                    composite parameter.</p>
            </body>
        </topic>
        <topic id="topic25" xml:lang="en">
            <title>Expression Evaluation Rules</title>
            <body>
                <p>The order of evaluation of subexpressions is undefined. The inputs of an operator
                    or function are not necessarily evaluated left-to-right or in any other fixed
                    order.</p>
                <p>If you can determine the result of an expression by evaluating only some parts of
                    the expression, then other subexpressions might not be evaluated at all. For
                    example, in the following expression:</p>
                <p>
                    <codeblock>SELECT true OR somefunc();
</codeblock>
                </p>
                <p><codeph>somefunc()</codeph> would probably not be called at all. The same is true
                    in the following expression:</p>
                <p>
                    <codeblock>SELECT somefunc() OR true;
</codeblock>
                </p>
                <p>This is not the same as the left-to-right evaluation order that Boolean operators
                    enforce in some programming languages.</p>
                <p>Do not use functions with side effects as part of complex expressions, especially
                    in <codeph>WHERE</codeph> and <codeph>HAVING</codeph> clauses, because those
                    clauses are extensively reprocessed when developing an execution plan. Boolean
                    expressions (<codeph>AND</codeph>/<codeph>OR</codeph>/<codeph>NOT</codeph>
                    combinations) in those clauses can be reorganized in any manner that Boolean
                    algebra laws allow.</p>
                <p>Use a <codeph>CASE</codeph> construct to force evaluation order. The following
                    example is an untrustworthy way to avoid division by zero in a
                        <codeph>WHERE</codeph> clause:</p>
                <p>
                    <codeblock>SELECT ... WHERE x &lt;&gt; 0 AND y/x &gt; 1.5;
</codeblock>
                </p>
                <p>The following example shows a trustworthy evaluation order:</p>
                <p>
                    <codeblock>SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false 
END;
</codeblock>
                </p>
                <p>This <codeph>CASE</codeph> construct usage defeats optimization attempts; use it
                    only when necessary.</p>
            </body>
        </topic>
    </topic>
</topic>
