<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic26" xml:lang="en">
    <title id="in151167">使用函数和操作符</title>
    <shortdesc>用户定义和内置函数和运算符的说明。</shortdesc>
    <body>
        <ul>
            <li id="in140953">
                <xref format="dita" href="#topic27" type="topic"/></li>
            <li id="in141620">
                <xref format="dita" href="#topic28" type="topic"/>
            </li>
            <li id="in141625">
                <xref format="dita" href="#topic29" type="topic"/>
            </li>
            <li id="in184735">
                <xref format="dita" href="#topic30" type="topic"/>
            </li>
            <li id="in184739">
                <xref format="dita" href="#topic31" type="topic"/>
            </li>
        </ul>
    </body>
    <topic id="topic27" xml:lang="en">
        <title id="in201560">在Greenplum数据库中使用函数</title>
        <body>
            <p>在Greenplum数据库中调用函数时，函数属性控制函数的执行。易变性属性 (<codeph>IMMUTABLE</codeph>,
                    <codeph>STABLE</codeph>, <codeph>VOLATILE</codeph>) 和<codeph>EXECUTE
                    ON</codeph> 属性控制函数执行的两个不同方面。一般来说，易变性指示函数执行时间， <codeph>EXECUTE
                    ON</codeph> 指示执行位置。易变性属性是基于PostgreSQL的属性, <codeph>EXECUTE ON</codeph> 属性是Greenplum的属性。</p>
            <p>For example, a function defined with the <codeph>IMMUTABLE</codeph> attribute can be executed at query
                planning time, while a function with the <codeph>VOLATILE</codeph> attribute must be executed for every
                row in the query. A function with the <codeph>EXECUTE ON MASTER</codeph> attribute executes only on the
                master instance, and a function with the <codeph>EXECUTE ON ALL SEGMENTS</codeph> attribute executes on
                all primary segment instances (not the master). </p>
            <p>这些表总结了Greenplum数据库基于这些属性，对函数执行的假设。</p>
            <table id="in201681">
                <title>Greenplum数据库的函数易变性</title>
                <tgroup cols="4">
                    <colspec colname="col1" colnum="1" colwidth="77*"/>
                    <colspec colname="col2" colnum="2" colwidth="86*"/>
                    <colspec colname="col3" colnum="3" colwidth="144*"/>
                    <colspec colname="col4" colnum="4" colwidth="144*"/>
                    <thead>
                        <row>
                            <entry colname="col1">函数属性</entry>
                            <entry colname="col2">Greenplum支持</entry>
                            <entry colname="col3">描述</entry>
                            <entry colname="col4">注释</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry colname="col1">IMMUTABLE</entry>
                            <entry colname="col2">支持</entry>
                            <entry colname="col3">仅直接依赖信息参数列表。如果给定相同的参数值，则始终返回同样的结果。</entry>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">STABLE</entry>
                            <entry colname="col2">大部分情况下支持</entry>
                            <entry colname="col3">在一个单一表扫描中，对相同的参数值返回相同的结果，但是对不同的SQL语句结果会改变。</entry>
                            <entry colname="col4">结果依赖于数据库查找或者参数值。<codeph>current_timestamp</codeph>函数族是<codeph>STABLE</codeph>的，在一次执行中值不会改变。</entry>
                        </row>
                        <row>
                            <entry colname="col1">VOLATILE</entry>
                            <entry colname="col2">受限</entry>
                            <entry colname="col3">在一个单一表扫描中函数值可能会改变。例如：<codeph>random()</codeph>,
                                <codeph>timeofday()</codeph>，这是默认属性。</entry>
                            <entry colname="col4">任何有副作用的函数都是volatile，即使它的结果是可预测的也一样。例如：<codeph>setval()</codeph>。
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <table id="table_cnz_4ng_gcb">
                <title>Greenplum数据库的EXECUTE ON函数属性 </title>
                <tgroup cols="3">
                    <colspec colname="col1" colnum="1" colwidth="77*"/>
                    <colspec colname="col3" colnum="2" colwidth="144*"/>
                    <colspec colname="col4" colnum="3" colwidth="144*"/>
                    <thead>
                        <row>
                            <entry colname="col1">函数属性</entry>
                            <entry colname="col3">描述</entry>
                            <entry colname="col4">注释</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry colname="col1">EXECUTE ON ANY</entry>
                            <entry colname="col3">Indicates that the function can be executed on the
                                master, or any segment instance, and it returns the same result
                                regardless of where it executes. This is the default
                                attribute.</entry>
                            <entry colname="col4">Greenplum Database determines where the function
                                executes.</entry>
                        </row>
                        <row>
                            <entry colname="col1">EXECUTE ON MASTER</entry>
                            <entry colname="col3">Indicates that the function must be executed on
                                the master instance.</entry>
                            <entry colname="col4">Specify this attribute if the user-defined
                                function executes queries to access tables. </entry>
                        </row>
                        <row>
                            <entry colname="col1">EXECUTE ON ALL SEGMENTS</entry>
                            <entry colname="col3">Indicates that for each invocation, the function
                                must be executed on all primary segment instances, but not the
                                master.</entry>
                            <entry colname="col4"/>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <p>You can display the function volatility and <codeph>EXECUTE ON</codeph> attribute
                information with the psql <codeph>\df+ <varname>function</varname></codeph>
                command.</p>
            <p>Refer to the PostgreSQL <xref
                    href="https://www.postgresql.org/docs/9.4/xfunc-volatility.html"
                    scope="external" format="html">Function Volatility Categories</xref>
                documentation for additional information about the Greenplum Database function
                volatility classifications.</p>
            <p>For more information about <codeph>EXECUTE ON</codeph> attributes, see <codeph><xref
                        href="../../../ref_guide/sql_commands/CREATE_FUNCTION.xml#topic1"
                        format="dita" scope="peer">CREATE FUNCTION</xref></codeph>.</p>
            <p>In Greenplum Database, data is divided up across segments — each segment is a
                distinct PostgreSQL database. To prevent inconsistent or unexpected results, do not
                execute functions classified as <codeph>VOLATILE</codeph> at the segment level if
                they contain SQL commands or modify the database in any way. For example, functions
                such as <codeph>setval()</codeph> are not allowed to execute on distributed data in
                Greenplum Database because they can cause inconsistent data between segment
                instances.</p>
            <p>A function can execute read-only queries on replicated tables (<codeph>DISTRIBUTED REPLICATED</codeph>)
                on the segments, but any SQL command that modifies data must execute on the master instance. </p>
            <p>To ensure data consistency, you can safely use <codeph>VOLATILE</codeph> and
                    <codeph>STABLE</codeph> functions in statements that are evaluated on and run
                from the master. For example, the following statements run on the master (statements
                without a <codeph>FROM</codeph> clause):</p>
            <p>
                <codeblock>SELECT setval('myseq', 201);
SELECT foo();</codeblock>
            </p>
            <p>If a statement has a <codeph>FROM</codeph> clause containing a distributed table
                    <i>and</i> the function in the <codeph>FROM</codeph> clause returns a set of
                rows, the statement can run on the segments:</p>
            <p>
                <codeblock>SELECT * from foo();</codeblock>
            </p>
            <p>Greenplum Database does not support functions that return a table reference
                    (<codeph>rangeFuncs</codeph>) or functions that use the
                    <codeph>refCursor</codeph> data type.</p>
        </body>
        <topic id="topic281" xml:lang="en">
            <title id="in1414519">Function Volatility and Plan Caching</title>
            <body>
                <p>There is relatively little difference between the <codeph>STABLE</codeph> and
                        <codeph>IMMUTABLE</codeph> function volatility categories for simple
                    interactive queries that are planned and immediately executed. It does not
                    matter much whether a function is executed once during planning or once during
                    query execution start up. But there is a big difference when you save the plan
                    and reuse it later. If you mislabel a function <codeph>IMMUTABLE</codeph>,
                    Greenplum Database may prematurely fold it to a constant during planning,
                    possibly reusing a stale value during subsequent execution of the plan. You may
                    run into this hazard when using <codeph>PREPARE</codeph>d statements, or when
                    using languages such as PL/pgSQL that cache plans.</p>
            </body>
        </topic>
    </topic>
    <topic id="topic28" xml:lang="en">
        <title id="in141451">User-Defined Functions</title>
        <body>
            <p>Greenplum Database supports user-defined functions. See <xref format="html"
                    href="https://www.postgresql.org/docs/9.4/extend.html" scope="external"
                    >Extending SQL</xref> in the PostgreSQL documentation for more information.</p>
            <p>Use the <codeph>CREATE FUNCTION</codeph> statement to register user-defined functions
                that are used as described in <xref format="dita" href="#topic27" type="topic"/>. By
                default, user-defined functions are declared as <codeph>VOLATILE</codeph>, so if
                your user-defined function is <codeph>IMMUTABLE</codeph> or <codeph>STABLE</codeph>,
                you must specify the correct volatility level when you register your function.</p>
            <p>By default, user-defined functions are declared as <codeph>EXECUTE ON ANY</codeph>. A function that
                executes queries to access tables is supported only when the function executes on the master instance,
                except that a function can execute <codeph>SELECT</codeph> commands that access only replicated tables
                on the segment instances. A function that accesses hash-distributed or randomly distributed tables must
                be defined with the <codeph>EXECUTE ON MASTER</codeph> attribute. Otherwise, the function might return
                incorrect results when the function is used in a complicated query. Without the attribute, planner
                optimization might determine it would be beneficial to push the function invocation to segment
                instances. </p>
            <p>When you create user-defined functions, avoid using fatal errors or destructive
                calls. Greenplum Database may respond to such errors with a sudden shutdown or
                restart.</p>
            <p>In Greenplum Database, the shared library files for user-created functions must
                reside in the same library path location on every host in the Greenplum Database
                array (masters, segments, and mirrors).</p>
            <p>You can also create and execute anonymous code blocks that are written in a Greenplum
                Database procedural language such as PL/pgSQL. The anonymous blocks run as transient
                anonymous functions. For information about creating and executing anonymous blocks,
                see the <xref href="../../../ref_guide/sql_commands/DO.xml#topic1"
                        ><codeph>DO</codeph></xref> command.</p>
        </body>
    </topic>
    <topic id="topic29" xml:lang="en">
        <title id="in141007">Built-in Functions and Operators</title>
        <body>
            <p>The following table lists the categories of built-in functions and operators
                supported by PostgreSQL. All functions and operators are supported in Greenplum
                Database as in PostgreSQL with the exception of <codeph>STABLE</codeph> and
                    <codeph>VOLATILE</codeph> functions, which are subject to the restrictions noted
                in <xref format="dita" href="#topic27" type="topic"/>. See the <xref format="html"
                    href="https://www.postgresql.org/docs/9.4/functions.html"
                    scope="external">Functions and Operators</xref> section of the PostgreSQL
                documentation for more information about these built-in functions and operators.</p>
            <p>Greenplum Database includes JSON processing functions that manipulate values the
                    <codeph>json</codeph> data type. For information about JSON data, see <xref
                    href="json-data.xml#topic1"/>.</p>
            <table id="in204913">
                <title>Built-in functions and operators</title>
                <tgroup cols="4">
                    <colspec colname="col1" colnum="1" colwidth="129.02*"/>
                    <colspec colname="col2" colnum="2" colwidth="108*"/>
                    <colspec colname="col3" colnum="3" colwidth="144*"/>
                    <colspec colname="col4" colnum="4" colwidth="86*"/>
                    <thead>
                        <row>
                            <entry colname="col1">Operator/Function Category</entry>
                            <entry colname="col2">VOLATILE Functions</entry>
                            <entry colname="col3">STABLE Functions</entry>
                            <entry colname="col4">Restrictions</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-logical.html"
                                    scope="external">Logical Operators</xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-comparison.html"
                                    scope="external">Comparison Operators</xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-math.html"
                                    scope="external">
                                    <ph>Mathematical Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2">random<p>setseed</p></entry>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-string.html"
                                    scope="external">
                                    <ph>String Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2">
                                <i>All built-in conversion functions</i>
                            </entry>
                            <entry colname="col3">convert<p>pg_client_encoding</p></entry>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-binarystring.html"
                                    scope="external">
                                    <ph>Binary String Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-bitstring.html"
                                    scope="external">
                                    <ph>Bit String Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-matching.html"
                                    scope="external">
                                    <ph>Pattern Matching</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-formatting.html"
                                    scope="external">
                                    <ph>Data Type Formatting Functions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3">to_char<p>to_timestamp</p></entry>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-datetime.html"
                                    scope="external"> Date/Time Functions and Operators</xref>
                            </entry>
                            <entry colname="col2">timeofday</entry>
                            <entry colname="col3"
                                    >age<p>current_date</p><p>current_time</p><p>current_timestamp</p><p>localtime</p><p>localtimestamp</p><p>now</p></entry>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-enum.html"
                                    scope="external"> Enum Support Functions </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-geometry.html"
                                    scope="external">
                                    <ph>Geometric Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-net.html"
                                    scope="external">
                                    <ph>Network Address Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-sequence.html"
                                    scope="external">
                                    <ph>Sequence Manipulation Functions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2">nextval()<p>setval()</p></entry>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-conditional.html"
                                    scope="external">
                                    <ph>Conditional Expressions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-array.html"
                                    scope="external">
                                    <ph>Array Functions and Operators</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3">
                                <i>All array functions</i>
                            </entry>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-aggregate.html"
                                    scope="external">
                                    <ph>Aggregate Functions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-subquery.html"
                                    scope="external">
                                    <ph>Subquery Expressions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-comparisons.html"
                                    scope="external">
                                    <ph>Row and Array Comparisons</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-srf.html"
                                    scope="external">
                                    <ph>Set Returning Functions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2">generate_series</entry>
                            <entry colname="col3"/>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-info.html"
                                    scope="external">
                                    <ph>System Information Functions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"/>
                            <entry colname="col3">
                                <i>All session information functions</i>
                                <p>
                                    <i>All access privilege inquiry functions</i>
                                </p><p>
                                    <i>All schema visibility inquiry functions</i>
                                </p><p>
                                    <i>All system catalog information functions</i>
                                </p><p>
                                    <i>All comment information functions</i>
                                </p><p>
                                    <i>All transaction ids and snapshots</i>
                                </p></entry>
                            <entry colname="col4"/>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.4/functions-admin.html"
                                    scope="external">
                                    <ph>System Administration Functions</ph>
                                </xref>
                            </entry>
                            <entry colname="col2"
                                    >set_config<p>pg_cancel_backend</p><p>pg_terminate_backend</p><p>pg_reload_conf</p><p>pg_rotate_logfile</p><p>pg_start_backup</p><p>pg_stop_backup</p><p>pg_size_pretty</p><p>pg_ls_dir</p><p>pg_read_file</p><p>pg_stat_file</p></entry>
                            <entry colname="col3">current_setting<p><i>All database object size
                                        functions</i></p></entry>
                            <entry colname="col4"><b>Note:</b> The function
                                    <codeph>pg_column_size</codeph> displays bytes required to store
                                the value, possibly with TOAST compression.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <xref format="html"
                                    href="https://www.postgresql.org/docs/9.1/functions-xml.html"
                                    scope="external">XML Functions</xref> and function-like
                                expressions </entry>
                            <entry colname="col2"/>
                            <entry colname="col3">
                                <p>cursor_to_xml(cursor refcursor, count int, nulls boolean,
                                    tableforest boolean, targetns text)</p>
                                <p>cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest
                                    boolean, targetns text)</p>
                                <p>database_to_xml(nulls boolean, tableforest boolean, targetns
                                    text)</p>
                                <p>database_to_xmlschema(nulls boolean, tableforest boolean,
                                    targetns text)</p>
                                <p>database_to_xml_and_xmlschema(nulls boolean, tableforest boolean,
                                    targetns text)</p>
                                <p>query_to_xml(query text, nulls boolean, tableforest boolean,
                                    targetns text)</p>
                                <p>query_to_xmlschema(query text, nulls boolean, tableforest
                                    boolean, targetns text)</p>
                                <p>query_to_xml_and_xmlschema(query text, nulls boolean, tableforest
                                    boolean, targetns text)</p>
                                <p>schema_to_xml(schema name, nulls boolean, tableforest boolean,
                                    targetns text)</p>
                                <p>schema_to_xmlschema(schema name, nulls boolean, tableforest
                                    boolean, targetns text)</p>
                                <p>schema_to_xml_and_xmlschema(schema name, nulls boolean,
                                    tableforest boolean, targetns text)</p>
                                <p>table_to_xml(tbl regclass, nulls boolean, tableforest boolean,
                                    targetns text)</p>
                                <p>table_to_xmlschema(tbl regclass, nulls boolean, tableforest
                                    boolean, targetns text)</p>
                                <p>table_to_xml_and_xmlschema(tbl regclass, nulls boolean,
                                    tableforest boolean, targetns text)</p>
                                <p>xmlagg(xml)</p>
                                <p>xmlconcat(xml[, ...])</p>
                                <p>xmlelement(name name [, xmlattributes(value [AS attname] [, ...
                                    ])] [, content, ...])</p>
                                <p>xmlexists(text, xml)</p>
                                <p>xmlforest(content [AS name] [, ...])</p>
                                <p>xml_is_well_formed(text)</p>
                                <p>xml_is_well_formed_document(text)</p>
                                <p>xml_is_well_formed_content(text)</p>
                                <p>xmlparse ( { DOCUMENT | CONTENT } value)</p>
                                <p>xpath(text, xml)</p>
                                <p>xpath(text, xml, text[])</p>
                                <p>xpath_exists(text, xml)</p>
                                <p>xpath_exists(text, xml, text[])</p>
                                <p>xmlpi(name target [, content])</p>
                                <p>xmlroot(xml, version text | no value [, standalone yes|no|no
                                    value])</p>
                                <p>xmlserialize ( { DOCUMENT | CONTENT } value AS type )</p>
                                <p>xml(text)</p>
                                <p>text(xml)</p>
                                <p>xmlcomment(xml)</p>
                                <p>xmlconcat2(xml, xml)</p>
                            </entry>
                            <entry colname="col4"/>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </body>
    </topic>
    <topic id="topic30" xml:lang="en">
        <title id="in179666">Window Functions</title>
        <body>
            <p>The following built-in window functions are Greenplum extensions to the PostgreSQL
                database. All window functions are <i>immutable</i>. For more information about
                window functions, see <xref href="../topics/defining-queries.xml#topic13"/>.</p>
            <table id="in164369">
                <title>Window functions</title>
                <tgroup cols="4">
                    <colspec colname="col1" colnum="1" colwidth="87.46*"/>
                    <colspec colname="col2" colnum="2" colwidth="59*"/>
                    <colspec colname="col3" colnum="3" colwidth="180*"/>
                    <colspec colname="col4" colnum="4" colwidth="121.77*"/>
                    <thead>
                        <row>
                            <entry colname="col1">Function</entry>
                            <entry colname="col2">Return Type</entry>
                            <entry colname="col3">Full Syntax</entry>
                            <entry colname="col4">Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry colname="col1">
                                <codeph>cume_dist()</codeph>
                            </entry>
                            <entry colname="col2">
                                <codeph>double precision</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>CUME_DIST() OVER ( [PARTITION BY </codeph>
                                <ph>expr</ph>
                                <codeph>] ORDER BY </codeph>
                                <ph>expr</ph>
                                <codeph> )</codeph>
                            </entry>
                            <entry colname="col4">Calculates the cumulative distribution of a value
                                in a group of values. Rows with equal values always evaluate to the
                                same cumulative distribution value.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>dense_rank()</codeph>
                            </entry>
                            <entry colname="col2">
                                <codeph>bigint</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>DENSE_RANK () OVER ( [PARTITION BY </codeph>
                                <ph>expr</ph>
                                <codeph>] ORDER BY </codeph>
                                <ph>expr</ph>
                                <codeph>)</codeph>
                            </entry>
                            <entry colname="col4">Computes the rank of a row in an ordered group of
                                rows without skipping rank values. Rows with equal values are given
                                the same rank value.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>first_value(<i>expr</i>)</codeph>
                            </entry>
                            <entry colname="col2">same as input <ph>expr</ph> type</entry>
                            <entry colname="col3">
                                <codeph>FIRST_VALUE(</codeph>
                                <ph>expr</ph>
                                <codeph>) OVER ( [PARTITION BY </codeph>
                                <ph>expr</ph>
                                <codeph>] ORDER BY </codeph>
                                <ph>expr</ph>
                                <codeph> [ROWS|RANGE </codeph>
                                <ph>frame_expr</ph>
                                <codeph>] )</codeph>
                            </entry>
                            <entry colname="col4">Returns the first value in an ordered set of
                                values.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>lag(<i>expr</i> [,<i>offset</i>] [,<i>default</i>])</codeph>
                            </entry>
                            <entry colname="col2">same as input <i>expr</i> type</entry>
                            <entry colname="col3">
                                <codeph>LAG(</codeph>
                                <i>expr</i>
                                <codeph> [,</codeph>
                                <i>offset</i>
                                <codeph>] [,</codeph>
                                <i>default</i>
                                <codeph>]) OVER ( [PARTITION BY </codeph>
                                <i>expr</i>
                                <codeph>] ORDER BY </codeph>
                                <i>expr</i>
                                <codeph> )</codeph>
                            </entry>
                            <entry colname="col4">Provides access to more than one row of the same
                                table without doing a self join. Given a series of rows returned
                                from a query and a position of the cursor, <codeph>LAG</codeph>
                                provides access to a row at a given physical offset prior to that
                                position. The default <codeph>offset</codeph> is 1. <i>default</i>
                                sets the value that is returned if the offset goes beyond the scope
                                of the window. If <i>default</i> is not specified, the default value
                                is null.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>last_value(<i>expr</i></codeph>)</entry>
                            <entry colname="col2">same as input <i>expr</i> type</entry>
                            <entry colname="col3">
                                <codeph>LAST_VALUE(<i>expr</i>) OVER ( [PARTITION BY <i>expr</i>]
                                    ORDER BY <i>expr</i> [ROWS|RANGE <i>frame_expr</i>] )</codeph>
                            </entry>
                            <entry colname="col4">Returns the last value in an ordered set of
                                values.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>
                                    <codeph>lead(<i>expr</i> [,<i>offset</i>]
                                        [,<i>default</i>])</codeph>
                                </codeph>
                            </entry>
                            <entry colname="col2">same as input <i>expr</i> type</entry>
                            <entry colname="col3">
                                <codeph>LEAD(<i>expr </i>[,<i>offset</i>]
                                        [,<i>expr</i><i>default</i>]) OVER ( [PARTITION BY
                                        <i>expr</i>] ORDER BY <i>expr</i> )</codeph>
                            </entry>
                            <entry colname="col4">Provides access to more than one row of the same
                                table without doing a self join. Given a series of rows returned
                                from a query and a position of the cursor, <codeph>lead</codeph>
                                provides access to a row at a given physical offset after that
                                position. If <i>offset</i> is not specified, the default offset is
                                1. <i>default</i> sets the value that is returned if the offset goes
                                beyond the scope of the window. If <i>default</i> is not specified,
                                the default value is null.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>ntile(<i>expr</i>)</codeph>
                            </entry>
                            <entry colname="col2"><codeph>bigint</codeph></entry>
                            <entry colname="col3">
                                <codeph>NTILE(<i>expr</i>) OVER ( [PARTITION BY <i>expr</i>] ORDER
                                    BY <i>expr</i> )</codeph>
                            </entry>
                            <entry colname="col4">Divides an ordered data set into a number of
                                buckets (as defined by <i>expr</i>) and assigns a bucket number to
                                each row.</entry>
                        </row>
                        <row>
                            <entry colname="col1"><codeph>percent_rank()</codeph></entry>
                            <entry colname="col2">
                                <codeph>double precision</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>PERCENT_RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY
                                        <i>expr </i>)</codeph>
                            </entry>
                            <entry colname="col4">Calculates the rank of a hypothetical row
                                    <codeph>R</codeph> minus 1, divided by 1 less than the number of
                                rows being evaluated (within a window partition).</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>rank()</codeph>
                            </entry>
                            <entry colname="col2"><codeph>bigint</codeph></entry>
                            <entry colname="col3">
                                <codeph>RANK () OVER ( [PARTITION BY <i>expr</i>] ORDER BY <i>expr
                                    </i>)</codeph>
                            </entry>
                            <entry colname="col4">Calculates the rank of a row in an ordered group
                                of values. Rows with equal values for the ranking criteria receive
                                the same rank. The number of tied rows are added to the rank number
                                to calculate the next rank value. Ranks may not be consecutive
                                numbers in this case.</entry>
                        </row>
                        <row>
                            <entry colname="col1"><codeph>row_number()</codeph></entry>
                            <entry colname="col2">
                                <codeph>bigint</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>ROW_NUMBER () OVER ( [PARTITION BY <i>expr</i>] ORDER BY
                                        <i>expr </i>)</codeph>
                            </entry>
                            <entry colname="col4">Assigns a unique number to each row to which it is
                                applied (either each row in a window partition or each row of the
                                query).</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </body>
    </topic>
    <topic id="topic31" xml:lang="en">
        <title id="in184703">Advanced Aggregate Functions</title>
        <body>
            <p>The following built-in advanced aggregate functions are Greenplum extensions of the
                PostgreSQL database. These functions are <i>immutable</i>. Greenplum Database does
                not support the PostgreSQL ordered-set aggregate functions.
                <note>The Greenplum MADlib Extension for Analytics provides additional advanced
                    functions to perform statistical analysis and machine learning with Greenplum
                    Database data. See <xref href="../../../ref_guide/extensions/madlib.xml#topic1"
                        >Greenplum MADlib Extension for Analytics</xref> in the <cite>Greenplum
                        Database Reference Guide</cite>.</note></p>
            <table id="in2073121">
                <title>Advanced Aggregate Functions</title>
                <tgroup cols="4">
                    <colspec colname="col1" colnum="1" colwidth="102.44*"/>
                    <colspec colname="col2" colnum="2" colwidth="59*"/>
                    <colspec colname="col3" colnum="3" colwidth="201.99*"/>
                    <colspec colname="col4" colnum="4" colwidth="128*"/>
                    <thead>
                        <row>
                            <entry colname="col1">Function</entry>
                            <entry colname="col2">Return Type</entry>
                            <entry colname="col3">Full Syntax</entry>
                            <entry colname="col4">Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry colname="col1">
                                <codeph>MEDIAN (<i>expr</i>)</codeph>
                            </entry>
                            <entry colname="col2">
                                <codeph>timestamp, timestamptz, interval, float</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>MEDIAN (<i>expression</i>)</codeph>
                                <p>
                                    <i>Example:</i>
                                </p>
                                <codeblock>SELECT department_id, MEDIAN(salary) 
FROM employees 
GROUP BY department_id; </codeblock>
                            </entry>
                            <entry colname="col4">Can take a two-dimensional array as input. Treats
                                such arrays as matrices.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>sum(array[])</codeph>
                            </entry>
                            <entry colname="col2">
                                <codeph>smallint[]int[], bigint[], float[]</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>sum(array[[1,2],[3,4]])</codeph>
                                <p>
                                    <i>Example:</i>
                                </p>
                                <codeblock>CREATE TABLE mymatrix (myvalue int[]);
INSERT INTO mymatrix VALUES (array[[1,2],[3,4]]);
INSERT INTO mymatrix VALUES (array[[0,1],[1,0]]);
SELECT sum(myvalue) FROM mymatrix;
 sum 
---------------
 {{1,3},{4,4}}</codeblock>
                            </entry>
                            <entry colname="col4">Performs matrix summation. Can take as input a
                                two-dimensional array that is treated as a matrix.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>pivot_sum (label[], label, expr)</codeph>
                            </entry>
                            <entry colname="col2">
                                <codeph>int[], bigint[], float[]</codeph>
                            </entry>
                            <entry colname="col3">
                                <codeph>pivot_sum( array['A1','A2'], attr, value)</codeph>
                            </entry>
                            <entry colname="col4">A pivot aggregation using sum to resolve duplicate
                                entries.</entry>
                        </row>
                        <row>
                            <entry colname="col1">
                                <codeph>unnest (array[])</codeph>
                            </entry>
                            <entry colname="col2">set of <codeph>anyelement</codeph></entry>
                            <entry colname="col3">
                                <codeph>unnest( array['one', 'row', 'per', 'item'])</codeph>
                            </entry>
                            <entry colname="col4">Transforms a one dimensional array into rows.
                                Returns a set of <codeph>anyelement</codeph>, a polymorphic <xref
                                    format="html"
                                    href="https://www.postgresql.org/docs/9.4/datatype-pseudo.html"
                                    scope="external"><ph>pseudo-type</ph></xref>  in
                                PostgreSQL.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </body>
    </topic>
</topic>
