<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="tables-indexes">
  <title>在数据库表中搜索文本</title>
  <shortdesc>本主题说明如何使用文本搜索运算符搜索数据库表以及如何创建索引以加快文本搜索。
      </shortdesc>
  <body>
    <p>上一节中的示例说明了使用简单常量字符串进行全文匹配。
        本节介绍如何搜索表数据，可选择使用索引。
        </p>
    <p>本节包含以下子主题：</p>
    <ul id="ul_vng_jxw_4fb">
      <li><xref href="#tables-indexes/searching" format="dita"/></li>
      <li><xref href="#tables-indexes/indexes" format="dita"/></li>
    </ul>
    <section id="searching">
      <title>搜索表</title>
      <p>可以在没有索引的情况下进行全文搜索。
          在其<codeph>body</codeph>字段中打印包含单词<codeph>friend</codeph>的每一行的<codeph>title</codeph>的简单查询是：
          </p>
      <codeblock>SELECT title
FROM pgweb
WHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');</codeblock>
      <p>这也将找到诸如<codeph>friends</codeph>和<codeph>friendly</codeph>之类的相关单词，因为所有这些都被简化为相同的标准化词汇。
        </p>
      <p>上面的查询指定<codeph>english</codeph>配置用于解析和规范化字符串。
          或者，我们可以省略配置参数：
        </p>
      <codeblock>SELECT title
FROM pgweb
WHERE to_tsvector(body) @@ to_tsquery('friend');</codeblock>
      <p>此查询将使用<xref href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"/>设置的配置。
        </p>
      <p>更复杂的示例是在<codeph>title</codeph>或<codeph>body</codeph>中选择包含<codeph>create</codeph>和<codeph>table</codeph>的十个最新文档：
        </p>
      <codeblock>SELECT title
FROM pgweb
WHERE to_tsvector(title || ' ' || body) @@ to_tsquery('create &amp; table')
ORDER BY last_mod_date DESC
LIMIT 10;</codeblock>
      <p>为清楚起见，我们省略了在两个字段之一中查找包含<codeph>NULL</codeph>的行所需的<codeph>coalesce</codeph>函数调用。
        </p>
      <p>虽然这些查询在没有索引的情况下可以正常工作，但大多数应用程序会发现这种方法太慢，除非是偶尔的临时搜索。
          文本搜索的实际使用通常需要创建索引。
        </p>
    </section>
    <section id="indexes">
      <title>创建索引</title>
      <p>我们可以创建一个GIN索引（<xref href="gist-gin.xml#gist-gin"/>）来加速文本搜索：
        </p>
      <codeblock>CREATE INDEX pgweb_idx ON pgweb USING gin(to_tsvector('english', body));</codeblock>
      <p>请注意，使用了<codeph>to_tsvector</codeph>的双参数版本。
          只能在表达式索引中使用指定配置名称的文本搜索功能。
          这是因为索引内容必须不受<xref href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"/>的影响。
          如果它们受到影响，索引内容可能会不一致，因为不同的条目可能包含使用不同文本搜索配置创建的<codeph>tsvector</codeph>，并且无法猜测哪个是哪个。
          正确地导出和恢复这样的索引是不可能的。
        </p>
      <p>因为在上面的索引中使用了<codeph>to_tsvector</codeph>的双参数版本，所以只有使用具有相同配置名称的<codeph>to_tsvector</codeph>的双参数版本的查询引用才会使用该索引。
          也就是说，<codeph>WHERE to_tsvector('english', body) @@ 'a &amp; b'</codeph>可以使用索引，但<codeph>WHERE to_tsvector(body) @@ 'a &amp; b'</codeph>不能。
          这可确保索引仅与用于创建索引条目的相同配置一起使用。
        </p>
      <p>可以设置更复杂的表达式索引，其中配置名称由另一列指定，例如：
        </p>
      <codeblock>CREATE INDEX pgweb_idx ON pgweb USING gin(to_tsvector(config_name, body));</codeblock>
      <p>其中<codeph>config_name</codeph>是<codeph>pgweb</codeph>表中的一列。
          这允许在同一索引中进行混合配置，同时记录每个索引条目使用的配置。
          例如，如果文档集合包含不同语言的文档，这将是有用的。
          同样，要使用索引的查询必须用来匹配，例如，<codeph>WHERE to_tsvector(config_name, body) @@ 'a &amp; b'</codeph>。
        </p>
      <p>索引甚至可以连接列：</p>
      <codeblock>CREATE INDEX pgweb_idx ON pgweb USING gin(to_tsvector('english', title || ' ' || body));</codeblock>
      <p>另一种方法是创建一个单独的<codeph>tsvector</codeph>列来保存<codeph>to_tsvector</codeph>的输出。
          此示例是title和body的连接，使用<codeph>coalesce</codeph>确保当另一个为NULL时仍将索引一个字段：
        </p>
      <codeblock>ALTER TABLE pgweb ADD COLUMN textsearchable_index_col tsvector;
UPDATE pgweb SET textsearchable_index_col =
     to_tsvector('english', coalesce(title,'') || ' ' || coalesce(body,''));</codeblock>
      <p>然后我们创建一个GIN索引来加速搜索：</p>
      <codeblock>CREATE INDEX textsearch_idx ON pgweb USING gin(textsearchable_index_col);</codeblock>
      <p>现在我们准备执行快速全文搜索：</p>
      <codeblock>SELECT title FROM pgweb WHERE textsearchable_index_col @@ to_tsquery('create &amp; table') 
ORDER BY last_mod_date DESC LIMIT 10;</codeblock>
      <p otherprops="op-hidden">当使用单列存储<codeph>tsvector</codeph>表示时，有必要创建一个触发器来保持<codeph>tsvector</codeph>列在title和body发生变化时一致。
          <xref href="features.xml#triggers-for-automatic-updates" format="dita"/>解释了如何使用它。</p>
      <p>与表达式索引相比，单列方法的一个优点是，不必在查询中显式指定文本搜索配置以便使用索引。
          如上例所示，查询可以依赖于<codeph>default_text_search_config</codeph>。
          另一个优点是搜索速度更快，因为没有必要重做<codeph>to_tsvector</codeph>调用来验证索引匹配。
          （当使用GiST索引而不是GIN索引时，这一点更为重要;请参阅<xref href="gist-gin.xml#gist-gin"/>。）
          然而，表达式索引方法设置起来更简单，并且由于<codeph>tsvector</codeph>不是显式存储，因此需要更少的磁盘空间。
        </p>
    </section>
  </body>
</topic>
