<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="intro">
  <title>关于全文搜索</title>
  <shortdesc>本主题概述了Greenplum数据库全文搜索，基本文本搜索表达式，配置和自定义文本搜索。
    以及Greenplum数据库全文搜索与Pivotal GPText的比较。
    </shortdesc>
  <body>
    <p>本节包含以下子主题：</p>
    <ul id="ul_djv_rww_4fb">
      <li><xref href="#intro/document" format="dita"/></li>
      <li><xref href="#intro/basic-text-matching" format="dita"/></li>
      <li><xref href="#intro/configurations" format="dita"/></li>
      <li><xref href="#intro/gptext" format="dita"/></li>
    </ul>
    <section id="section_dm1_www_4fb">
      <p>全文搜索（或“文本搜索”）提供识别满足查询的自然语言文档的能力，并且有选择地通过与查询的相关性对它们进行排名。
        最常见的搜索类型是查找包含给定查询字词的所有文档，并按照它们与查询的相似性的顺序返回它们。
        </p>
      <p>Greenplum数据库提供了一个数据类型<codeph>tsvector</codeph>来存储预处理文档，以及一个数据类型<codeph>tsquery</codeph>来存储已处理的查询（<xref href="../../ref_guide/datatype-textsearch.xml"/>）。
        这些数据类型有许多可用的函数和运算符（<xref href="../../ref_guide/function-summary.xml#topic_vpj_ss1_lfb"/>），其中最重要的是匹配运算符<codeph>@@</codeph>，我们在<xref href="#intro/basic-text-matching" format="dita"/>中介绍它们。
        可以使用索引（<xref href="gist-gin.xml#gist-gin"/>）加速全文搜索。
        </p>
      <p>查询和相似性的概念非常灵活，取决于具体的应用。
        最简单的搜索将查询视为一组单词和文档中查询单词出现频率的相似性。
        </p>
      <p>Greenplum数据库支持文本数据类型的标准文本匹配运算符<codeph>~</codeph>，<codeph>~*</codeph>，<codeph>LIKE</codeph>和<codeph>ILIKE</codeph>，但这些运算符缺少搜索文档所需的许多基本属性：
        </p>
      <ul id="ul_py4_m5t_kfb">
        <li>没有语言支持，即使是英语也是如此。
          正则表达式是不够的，因为它们不能容易地处理派生词，例如<codeph>satisfies</codeph>和<codeph>satisfy</codeph>。
          您可能会错过包含<codeph>satisfies</codeph>的文档，尽管您可能希望在搜索<codeph>satisfy</codeph>时找到它们。
          可以使用OR来搜索多个派生形式，但这很繁琐且容易出错（有些词可能有几千种衍生词）。
          </li>
        <li>
          <p>它们不提供搜索结果的排序（排名），这使得它们在找到数千个匹配文档时无效。
            </p>
        </li>
        <li>
          <p>它们往往很慢，因为没有索引支持，所以他们必须为每次搜索处理所有文档。
            </p>
        </li>
      </ul>
      <p>全文索引允许对文档进行预处理并保存索引以供以后快速搜索。
        预处理包括：
        </p>
      <ul id="ul_qy4_m5t_kfb">
        <li><b>将文档解析为token。</b>b>
          识别各种类型的令牌（例如，数字，单词，复杂单词，电子邮件地址）是有用的，以便可以不同地处理它们。
          原则上，令牌类取决于特定的应用程序，但是对于大多数用途来说，使用预定义的一组类就足够了。
          Greenplum数据库使用解析器执行此步骤。
          提供了标准解析器，可以根据特定需求创建自定义解析器。
          </li>
        <li><b>将token转换为词位。</b>
          词位是一个字符串，就像一个token，但它已被标准化，以便使相同单词的不同形式相似。
          例如，规范化几乎总是包括将大写字母折叠成小写字母，并且通常涉及删除后缀（例如英语中的s或es）。
          这允许搜索找到相同单词的变体形式，而无需繁琐地输入所有可能的变体。
          此外，该步骤通常消除了<i>停止词</i>，这些词是如此常见以至于它们对搜索无用。
          （简而言之，token是文档文本的原始片段，而词位是被认为对索引和搜索有用的词。）
          Greenplum数据库使用词典来执行此步骤。
          提供各种标准词典，并且可以为特定需求创建自定义词典。
          </li>
        <li><b>存储为搜索而优化的预处理文档。</b>
          例如，每个文档可以表示为标准化词位的排序数组。
          与词位一起，通常希望存储位置信息以用于邻近度排序，使得包含更“密集”的查询词区域的文档被分配比具有分散查询词的更高的等级。
          </li>
      </ul>
      <p>字典允许对token如何标准化进行细粒度控制。
        使用适当的词典，您可以：
        </p>
      <ul id="ul_ry4_m5t_kfb">
        <li>定义不应编入索引的停止词。</li>
        <li>使用Ispell将同义词映射到单个单词。</li>
        <li>使用同义词库将短语映射到单个单词。</li>
        <li>使用Ispell字典将单词的不同变体映射到规范形式。</li>
        <li>使用Snowball词干分析器规则将单词的不同变体映射到规范形式。</li>
      </ul>
    </section>
    <section id="document">
      <title>什么是文档</title>
      <p>文档是在全文搜索系统中搜索的单位; 例如，杂志文章或电子邮件消息。
        文本搜索引擎必须能够解析文档并存储与其父文档关联的词位（关键词）。
        稍后，这些关联用于搜索包含查询词的文档。
        </p>
      <p>对于Greenplum数据库中的搜索，文档通常是数据库表的行中的文本字段，或者可能是这些字段的组合（串联），可能存储在若干表中或动态获得。
        换句话说，可以从不同的部分构造文档以进行索引，并且它可以不作为整体存储在任何地方。
        例如：
        </p>
      <codeblock>SELECT title || ' ' ||  author || ' ' ||  abstract || ' ' || body AS document
FROM messages
WHERE mid = 12;

SELECT m.title || ' ' || m.author || ' ' || m.abstract || ' ' || d.body AS document
FROM messages m, docs d
WHERE mid = did AND mid = 12;</codeblock>
      <note>
        <p>实际上，在这些示例查询中，应该使用<codeph>coalesce</codeph>来防止单个<codeph>NULL</codeph>属性导致整个文档的<codeph>NULL</codeph>结果。
          </p>
      </note>
      <p>另一种可能性是将文档作为简单文本文件存储在文件系统中。
        在这种情况下，数据库可用于存储全文索引并执行搜索，并且一些唯一标识符可用于从文件系统检索文档。
        但是，从数据库外部检索文件需要超级用户权限或特殊功能支持，因此这通常不如将所有数据保留在Greenplum数据库中。
        此外，将所有内容保留在数据库中可以轻松访问文档元数据，以帮助索引和显示。
        </p>
      <p>出于文本搜索的目的，每个文档必须简化为预处理的<codeph>tsvector</codeph>格式。
        搜索和排名完全基于文档的<codeph>tsvector</codeph>表示执行 - 只有在选择文档以显示给用户时才需要检索原始文本。
        因此，我们经常将<codeph>tsvector</codeph>称为文档，但当然它只是完整文档的紧凑表示。
        </p>
    </section>
    <section id="basic-text-matching">
      <title>基本文本匹配</title>
      <p>Greenplum数据库中的全文搜索基于匹配运算符<codeph>@@</codeph>，如果<codeph>tsvector</codeph>（文档）与<codeph>tsquery</codeph>（查询）匹配，则返回<codeph>true</codeph>。
        首先写入哪种数据类型无关紧要：
        </p>
      <codeblock>SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat &amp; rat'::tsquery;
 ?column?
----------
 t

SELECT 'fat &amp; cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector;
 ?column?
----------
 f</codeblock>
      <p>如上例所示，<codeph>tsquery</codeph>不仅仅是原始文本，也不仅仅是<codeph>tsvector</codeph>。
        <codeph>tsquery</codeph>包含搜索项，它必须是已经规范化的词位，并且可以使用AND，OR和NOT运算符组合多个项。
        （有关详细信息，请参阅。）有一些函数<codeph>to_tsquery</codeph>和<codeph>plainto_tsquery</codeph>有助于将用户编写的文本转换为正确的<codeph>tsquery</codeph>，例如通过规范化文本中出现的单词。
        同样，<codeph>to_tsvector</codeph>用于解析和规范化文档字符串。
        所以在实践中，文本搜索匹配看起来更像是这样的：
        </p>
      <codeblock>SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat &amp; rat');
 ?column? 
----------
 t</codeblock>
      <p>如果写为，则发现此匹配不会成功</p>
      <codeblock>SELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat &amp; rat');
 ?column? 
----------
 f</codeblock>
      <p>因为这里没有<codeph>rats</codeph>这个词的标准化。
        <codeph>tsvector</codeph>的元素是词位，假设已经标准化，因此<codeph>rats</codeph>与<codeph>rat</codeph>不匹配。
        </p>
      <p><codeph>@@</codeph>运算符还支持文本输入，允许在简单情况下将文本字符串显式转换为<codeph>tsvector</codeph>或<codeph>tsquery</codeph>。
        可用的变体是：
        </p>
      <codeblock>tsvector @@ tsquery
tsquery  @@ tsvector
text @@ tsquery
text @@ text</codeblock>
      <p>我们已经看到了前两个。
        形式<codeph>text @@ tsquery</codeph>等同于<codeph>to_tsvector(x) @@ y</codeph>。
        形式<codeph>text @@ text</codeph>等同于<codeph>to_tsvector(x) @@ plainto_tsquery(y)</codeph>。
        </p>
    </section>
    <section id="configurations">
      <title>配置</title>
      <p>以上都是简单的文本搜索示例。
        如前所述，全文搜索功能包括执行更多操作的能力：跳过索引某些单词（停止词），处理同义词，以及使用复杂的解析，例如，基于不仅仅是空格的解析。
        此功能由文本搜索配置控制。
        Greenplum数据库附带了许多语言的预定义配置，您可以轻松创建自己的配置。
        （psql的<codeph>\dF</codeph>命令显示所有可用的配置。）
        </p>
      <p>在安装过程中，会选择适当的配置，并在<codeph>postgresql.conf</codeph>中相应地设置<xref href="../../ref_guide/config_params/guc-list.xml#default_text_search_config"/>。
        如果您对整个集群使用相同的文本搜索配置，则可以使用<codeph>postgresql.conf</codeph>中的值。
        要在整个集群中使用不同的配置，但在任何一个数据库中使用相同的配置，请使用<codeph> ALTER DATABASE ...
          SET</codeph>。
        否则，您可以在每个会话中设置<codeph>default_text_search_config</codeph>。
        </p>
      <p>每个依赖于配置的文本搜索功能都有一个可选的<codeph>regconfig</codeph>参数，因此可以显式指定要使用的配置。
        <codeph>default_text_search_config</codeph>仅在省略此参数时使用。
        </p>
      <p>为了更容易构建自定义文本搜索配置，可以从更简单的数据库对象构建配置。
        Greenplum数据库的文本搜索工具提供了四种与配置相关的数据库对象：
        </p>
      <ul id="ul_vjd_jyt_kfb">
        <li><i>文本搜索解析器</i>将文档分解为token并对每个token进行分类（例如，作为单词或数字）。
          </li>
        <li><i>文本搜索词典</i>将token转换为标准化形式并拒绝停止词。
          </li>
        <li><i>文本搜索模板</i>提供基本字典的功能。（字典只是为模板指定模板和一组参数。）
          </li>
        <li><i>文本搜索配置</i>选择一个解析器和一组字典，用于规范化解析器生成的token。
          </li>
      </ul>
      <p>文本搜索解析器和模板是从低级C函数构建的; 因此，它需要C编程才能开发新的，并且需要超级用户权限才能将其安装到数据库中。
        （在Greenplum数据库发行版的<codeph>contrib/</codeph>区域中有附加解析器和模板的示例。）
        由于字典和配置只是参数化并将一些底层解析器和模板连接在一起，因此创建新字典或配置不需要特殊权限。
        本章稍后将介绍创建自定义词典和配置的示例。
        </p>
    </section>
  <section id="gptext">
    <title>对比Greenplum数据库文本搜索与Pivotal GPText</title>
      <p>Greenplum数据库文本搜索是将PostgreSQL文本搜索移植到Greenplum数据库MPP平台。
        Pivotal还提供Pivotal GPText，它将Greenplum数据库与Apache Solr文本搜索平台集成在一起。
        GPText在您的Greenplum数据库集群旁边安装Apache Solr集群，并提供Greenplum数据库功能，您可以使用它来创建Solr索引，查询它们，并在数据库会话中接收结果。
        </p>
      <p>这两个系统都提供强大的企业级文档索引和搜索服务。
        Greenplum数据库文本搜索可立即供您使用，无需安装和维护其他软件。
        如果它符合您的应用程序的要求，您应该使用它。
        </p>
      <p>带有Solr的GPText具有Greenplum数据库文本搜索所不具备的许多功能。
        特别是，GPText更适合高级文本分析应用程序。
        以下是将GPText用于文本搜索应用程序时可以使用的一些优点和功能。
        </p>
      <ul id="ul_ywm_fg1_nfb">
        <li>Apache Solr集群可以与数据库分开扩展。
          Solr节点可以部署在Greenplum数据库主机上，也可以部署在网络上的不同主机上。
          </li>
        <li>可以将索引和搜索工作负载从Greenplum数据库移出到Solr，以维护数据库查询性能。
          </li>
        <li>GPText创建分割为分片的Solr索引，每个Greenplum数据库segment一个，因此Greenplum数据库MPP体系结构的优势扩展到了文本搜索工作负载。
          </li>
        <li>使用Solr索引和搜索文档非常快，可以通过向集群添加更多Solr节点来扩展。
          </li>
        <li>文档内容可以存储在Greenplum数据库表，Solr索引或两者中。</li>
        <li>通过GPText，Solr可以索引存储为Greenplum数据库表格中文本的文档，以及使用HTTP，FTP，S3或HDFS URL访问的外部存储中的文档。
          </li>
        <li>Solr自动识别大多数丰富的文档格式，并分别索引文档内容和元数据。</li>
        <li>Solr索引可高度自定义。 您可以将文本分析链自定义到字段级别。
          </li>
        <li>除了Apache项目提供的大量语言，标记符和过滤器之外，GPText还提供社交媒体标记器，国际文本标记器和通用查询解析器，它们可以理解几种常见的文本搜索语法。
          </li>
        <li>GPText API支持高级文本分析工具，例如分面，命名实体识别（NER）和词性（POS）识别。
          </li>
      </ul>
      <p>有关GPText的详细信息，请参阅<xref href="https://gptext.docs.pivotal.io" format="html" scope="external">GPText文档网站</xref>。</p>
    </section>
  </body>
</topic>
