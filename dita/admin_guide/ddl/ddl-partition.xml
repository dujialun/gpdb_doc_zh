<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_o3v_dwy_sp">
  <title id="im204286">对大型表分区</title>
  <body>
    <p>表分区让我们能通过把表划分成较小的、更容易管理的小块来支持非常大的表，例如事实表。
      通过让Greenplum数据库查询优化器只扫描满足给定查询所需的数据而避免扫描大表的全部内容，分区表能够提升查询性能。<ul
        id="ul_szj_5sz_bt">
        <li><xref href="#topic_tvx_nsz_bt" format="dita"/></li>
        <li><xref href="#topic65" format="dita"/></li>
        <li><xref href="#topic66" format="dita"/></li>
        <li><xref href="#topic73" format="dita"/></li>
        <li><xref href="#topic74" format="dita"/></li>
        <li><xref href="#topic76" format="dita"/></li>
        <li><xref href="#topic77" format="dita"/></li>
      </ul></p>
  </body>
  <topic id="topic_tvx_nsz_bt">
    <title>关于表分区</title>
    <body>
      <p>分区并不会改变表数据在Segment之间的物理分布。
        表分布是物理的：Greenplum数据库会在物理上把分区表和未分区表划分到多个Segment上来启用并行查询处理。
        表分区是逻辑的：Greenplum数据库在逻辑上划分大表来提升查询性能并且有利于数据仓库维护任务，例如把旧数据滚出数据仓库。
        </p>
      <p>Greenplum数据库支持：</p>
      <ul id="ul_ohc_2wy_sp">
        <li id="im204035"><i>范围分区</i>：基于一个数字型范围划分数据，例如按照日期或价格划分。</li>
        <li id="im207235"><i>列表分区</i>：基于一个值列表划分数据，例如按照销售范围或产品线划分。</li>
        <li id="im207242">两种类型的组合。</li>
      </ul>
      <fig id="im207241">
        <title>多层分区设计的例子</title>
        <image href="../graphics/partitions.jpg" placement="break" width="344px" height="203px"
          id="image_pmc_2wy_sp"/>
      </fig>
    </body>
  </topic>
  <topic id="topic64" xml:lang="en">
    <title>Greenplum数据库中的表分区</title>
    <body>
      <p>Greenplum数据库把表划分成部分（也称为分区）来启用大规模并行处理。
        表分区在使用<codeph>PARTITION BY</codeph>（以及可选的<codeph>SUBPARTITION BY</codeph>）子句的<codeph>CREATE TABLE</codeph>执行期间进行。
        分区操作会创建一个顶层（父）表以及一层或者多层子表。
        在内部，Greenplum数据库会在顶层表和它的底层分区之间创建继承关系，类似于PostgreSQL的<codeph>INHERITS</codeph>子句的功能。
        </p>
      <p>Greenplum使用表创建时定义的分区标准来创建每一个分区及其上一个可区分的<codeph>CHECK</codeph>约束，这个约束限制了该表能含有的数据。
        查询优化器使用<codeph>CHECK</codeph>约束来决定要扫描哪些表分区来满足一个给定的查询谓词。
        </p>
      <p>Greenplum系统目录存储了分区层次信息，这样插入到顶层父表的行会被正确地传播到子表分区。
        要更改分区设计或者表结构，可使用带有<codeph>PARTITION</codeph>子句的<codeph>ALTER TABLE</codeph>修改父表。
        </p>
      <p>要把数据插入到一个分过区的表中，用户需要指定根分区表，也就是用<codeph>CREATE TABLE</codeph>命令创建的那个表。
        用户也可以在<codeph>INSERT</codeph>命令中指定分区表的一个叶子子表。
        如果该数据对于指定的叶子子表不合法，则会返回一个错误。
        不支持在DML命令中指定一个非叶子或者非根分区表。
        </p>
    </body>
  </topic>
  <topic id="topic65" xml:lang="en">
    <title>决定表的分区策略</title>
    <body>
      <p>Greenplum数据库不支持对复制表进行分区(<codeph>DISTRIBUTED REPLICATED</codeph>)。
        不是所有的哈希分布表或随机分布表都适合于分区。
        如果下列问题的答案全部或者大部分都是<i>yes</i>，表分区就是一种可行的改进查询性能的数据库设计策略。
        如果下列问题的答案大部分都是<i>no</i>，表分区对于该表就不是正确的方案。
        请测试用户的设计策略来确保查询性能能得到预期的改进。
        </p>
      <ul id="ul_jpc_2wy_sp">
        <li id="im148863"><b>表是否足够大？</b>大型的事实表是进行表划分很好的候选。
          如果在一个表中有几百万或者几十亿个记录，从逻辑上将数据分成较小的块会让用户在性能方面受益。
          对于只有几千行或者更少数据的小表来说，维护分区的管理开销将会超过用户可能得到的性能收益。
          </li>
        <li id="im148864"><b>用户是否体验到不满意的性能？</b>正如任何性能调节的动机一样，只有针对一个表的查询产生比预期还要慢的响应时间时才应该对该表分区。 </li>
        <li id="im148865"><b>用户的查询谓词有没有可识别的访问模式？</b>检查用户的查询负载的<codeph>WHERE</codeph>子句并且查找一直被用来访问数据的表列。
          例如，如果大部分查询都倾向于用日期查找记录，那么按月或者按周的日期分区设计可能会对用户有益。
          或者如果用户倾向于根据地区访问记录，可考虑一种列表分区设计来根据地区划分表。
          </li>
        <li id="im204373"><b>用户的数据仓库是否维护了一个历史数据的窗口？</b>
          另一个分区设计的考虑是用户的组织对维护历史数据的业务需求。
          例如，用户的数据仓库可能要求用户保留过去十二个月的数据。
          如果数据按月分区，用户可以轻易地从仓库中删除最旧的月份分区并且把当前数据载入到最近的月份分区中。</li>
        <li id="im148867"><b>数据能否基于某种定义的原则被划分成差不多相等的部分？</b>尽可能选择将把用户的数据均匀划分的分区原则。
          如果分区包含基本同等数量的记录，查询性能会基于创建的分区数量而提升。
          例如，通过将一个大型表划分成10个分区，一个查询的执行速度将比在未分区表上快10倍，前提是这些分区就是为支持该查询的条件而设计。</li>
      </ul>
      <p>不要创建超过所需数量的分区。
        创建过多的分区可能会拖慢管理和维护工作，例如清理、恢复Segment、扩展集群、检查磁盘用量等等。</p>
      <p>除非查询优化器能基于查询谓词排除一些分区，否则分区技术不能改进查询性能。
        每个分区都扫描的查询运行起来会比表没有分区时还慢，因此如果用户的查询中很少能排除分区，请避免进行分区。
        请检查查询的解释计划来确认分区被排除。
        参考<xref href="../query/topics/query-profiling.xml#topic39"/>获取更多关于分区的信息。</p>
      <note type="warning">请对多级分区格外谨慎，因为分区文件的数量可能会增长得非常快。
        例如，如果一个表被按照日和城市划分并且有1,000个日以及1,000个城市，那么分区的总数就是一百万。
        列存表会把每一列存在一个物理表中，因此如果这个表有100个列，系统就需要为该表管理一亿个文件。</note>
      <p>在选定一种多级分区策略之前，可以考虑一种带有位图索引的单级分区。
        索引会降低数据装载的速度，因此推荐用用户的数据和模式进行性能测试以决定最佳的策略。</p>
    </body>
  </topic>
  <topic id="topic66" xml:lang="en">
    <title>创建分区表</title>
    <body>
      <p>在使用<codeph>CREATE TABLE</codeph>创建表时就可以对它们分区。
        这个主题提供了用于创建带有数个分区的表的SQL语法的例子。
        </p>
      <p>对一个表分区：</p>
      <ol id="ol_fsc_2wy_sp">
        <li id="im204435">决定分区设计：日期范围、数字范围或者值的列表。</li>
        <li id="im204448">选择要按哪个（哪些）列对表分区。</li>
        <li id="im204455">决定用户需要多少个分区级别。
          例如，用户可以按月创建一个日期范围分区表，然后对每个月的分区按照销售地区划分子分区。</li>
      </ol>
      <ul id="ul_rvc_2wy_sp">
        <li id="im153718">
          <xref href="#topic67" type="topic" format="dita"/>
        </li>
        <li id="im153726">
          <xref href="#topic68" type="topic" format="dita"/>
        </li>
        <li id="im153737">
          <xref href="#topic69" type="topic" format="dita"/>
        </li>
        <li id="im153742">
          <xref href="#topic70" type="topic" format="dita"/>
        </li>
        <li id="im153747">
          <xref href="#topic71" type="topic" format="dita"/>
        </li>
      </ul>
    </body>
    <topic id="topic67" xml:lang="en">
      <title id="im148871">定义日期范围分区表</title>
      <body>
        <p>一个按日期范围分区的表使用单个<codeph>date</codeph>或者<codeph>timestamp</codeph>列作为分区键列。
          如果需要，用户可以使用同一个分区键列来创建子分区，例如按月分区然后按日建子分区。
          请考虑使用最细的粒度分区。
          例如，对于一个用日期分区的表，用户可以按日分区并且得到365个每日的分区，而不是先按年分区然后按月建子分区再然后按日建子分区。
          一种多级设计可能会减少查询规划时间，但是一种平面的分区设计运行得更快。
          </p>
        <p>用户可以通过给出一个<codeph>START</codeph>值、一个<codeph>END</codeph>值以及一个定义分区增量值的<codeph>EVERY</codeph>子句让Greenplum数据库自动产生分区。
          默认情况下，<codeph>START</codeph>值总是被包括在内而<codeph>END</codeph>值总是被排除在外。例如：
          </p>
        <p>
          <codeblock>CREATE TABLE sales (id int, date date, amt decimal(10,2))
DISTRIBUTED BY (id)
PARTITION BY RANGE (date)
( START (date '2016-01-01') INCLUSIVE
   END (date '2017-01-01') EXCLUSIVE
   EVERY (INTERVAL '1 day') );
</codeblock>
        </p>
        <p>用户也可以逐个声明并且命名每一个分区。例如：</p>
        <p>
          <codeblock>CREATE TABLE sales (id int, date date, amt decimal(10,2))
DISTRIBUTED BY (id)
PARTITION BY RANGE (date)
( PARTITION Jan16 START (date '2016-01-01') INCLUSIVE , 
  PARTITION Feb16 START (date '2016-02-01') INCLUSIVE ,
  PARTITION Mar16 START (date '2016-03-01') INCLUSIVE ,
  PARTITION Apr16 START (date '2016-04-01') INCLUSIVE ,
  PARTITION May16 START (date '2016-05-01') INCLUSIVE ,
  PARTITION Jun16 START (date '2016-06-01') INCLUSIVE ,
  PARTITION Jul16 START (date '2016-07-01') INCLUSIVE ,
  PARTITION Aug16 START (date '2016-08-01') INCLUSIVE ,
  PARTITION Sep16 START (date '2016-09-01') INCLUSIVE ,
  PARTITION Oct16 START (date '2016-10-01') INCLUSIVE ,
  PARTITION Nov16 START (date '2016-11-01') INCLUSIVE ,
  PARTITION Dec16 START (date '2016-12-01') INCLUSIVE 
                  END (date '2017-01-01') EXCLUSIVE );
</codeblock>
        </p>
        <p>用户不需要为每一个分区声明一个<codeph>END</codeph>子句，只需要为最后一个分区写上就好。
          在这个例子中，<codeph>Jan16</codeph>会在<codeph>Feb16</codeph>开始处结束。</p>
      </body>
    </topic>
    <topic id="topic68" xml:lang="en">
      <title id="im172582">定义数字范围分区表</title>
      <body>
        <p>一个按数字范围分区的表使用单个数字数据类型列作为分区键列。例如：</p>
        <p>
          <codeblock>CREATE TABLE rank (id int, rank int, year int, gender 
char(1), count int)
DISTRIBUTED BY (id)
PARTITION BY RANGE (year)
( START (2006) END (2016) EVERY (1), 
  DEFAULT PARTITION extra ); 
</codeblock>
        </p>
        <p>更多有关默认分区的信息，请见<xref href="#topic80" type="topic" format="dita"/>。</p>
      </body>
    </topic>
    <topic id="topic69" xml:lang="en">
      <title id="im148873">定义列表分区表</title>
      <body>
        <p>一个按列表分区的表可以使用任意允许等值比较的数据类型列作为它的分区键列。
          一个列表分区也可以用一个多列（组合）分区键，反之一个范围分区只允许单一列作为分区键。
          对于列表分区，用户必须为每一个用户想要创建的分区（列表值）声明一个分区说明。例如：</p>
        <p>
          <codeblock>CREATE TABLE rank (id int, rank int, year int, gender 
char(1), count int ) 
DISTRIBUTED BY (id)
PARTITION BY LIST (gender)
( PARTITION girls VALUES ('F'), 
  PARTITION boys VALUES ('M'), 
  DEFAULT PARTITION other );
</codeblock>
        </p>
        <note>当前的Greenplum数据库传统优化器允许列表分区带有多列（组合）分区键。
          一个范围分区只允许单一列作为分区键。
          Greenplum查询优化器不支持组合键，因此用户不能使用组合分区键。</note>
        <p>更多有关默认分区的信息，请见<xref href="#topic80" type="topic" format="dita"/>。</p>
      </body>
    </topic>
    <topic id="topic70" xml:lang="en">
      <title id="im148875">定义多级分区表</title>
      <body>
        <p>用户可以用分区的子分区创建一种多级分区设计。
          使用一个 子分区模板可以确保每一个分区都有相同的子分区设计，包括用户后来增加的分区。
          例如，下面的SQL创建所示的两级分区设计<xref href="#topic_tvx_nsz_bt/im207241" format="dita"/>：
          </p>
        <p>
          <codeblock>CREATE TABLE sales (trans_id int, date date, amount 
decimal(9,2), region text) 
DISTRIBUTED BY (trans_id)
PARTITION BY RANGE (date)
SUBPARTITION BY LIST (region)
SUBPARTITION TEMPLATE
( SUBPARTITION usa VALUES ('usa'), 
  SUBPARTITION asia VALUES ('asia'), 
  SUBPARTITION europe VALUES ('europe'), 
  DEFAULT SUBPARTITION other_regions)
  (START (date '2011-01-01') INCLUSIVE
   END (date '2012-01-01') EXCLUSIVE
   EVERY (INTERVAL '1 month'), 
   DEFAULT PARTITION outlying_dates );
</codeblock>
        </p>
        <p>下面的例子展示了一个三级分区设计，其中<codeph>sales</codeph>表被按照<codeph>year</codeph>分区，然后按照<codeph>month</codeph>分区，再然后按照<codeph>region</codeph>分区。
          <codeph>SUBPARTITION TEMPLATE</codeph>子句保证每一个年度的分区都有相同的子分区结构。
          这个例子在该层次的每一个级别上都声明了一个<codeph>DEFAULT</codeph>分区。
          </p>
        <p>
          <codeblock>CREATE TABLE p3_sales (id int, year int, month int, day int, 
region text)
DISTRIBUTED BY (id)
PARTITION BY RANGE (year)
    SUBPARTITION BY RANGE (month)
       SUBPARTITION TEMPLATE (
        START (1) END (13) EVERY (1), 
        DEFAULT SUBPARTITION other_months )
           SUBPARTITION BY LIST (region)
             SUBPARTITION TEMPLATE (
               SUBPARTITION usa VALUES ('usa'),
               SUBPARTITION europe VALUES ('europe'),
               SUBPARTITION asia VALUES ('asia'),
               DEFAULT SUBPARTITION other_regions )
( START (2002) END (2012) EVERY (1), 
  DEFAULT PARTITION outlying_years );
</codeblock>
        </p>
        <note type="caution">当用户创建基于范围的多级分区时，很容易会创建大量的子分区，有一些包含很少的甚至不包含数据。
          这可能会在系统表中增加很多项，这些项增加了优化和执行查询所需的时间和内存。
          增加范围区间或者选择一种不同的分区策略可减少创建的子分区数量。</note>
      </body>
    </topic>
    <topic id="topic71" xml:lang="en">
      <title id="im162902">对已有的表进行分区</title>
      <body>
        <p>表只能在创建时被分区。
          如果用户有一个表想要分区，用户必须创建一个分过区的表，把原始表的数据载入到新表，再删除原始表并且把分过区的表重命名为原始表的名称。
          用户还必须重新授权表上的权限。例如：</p>
        <p>
          <codeblock>CREATE TABLE sales2 (LIKE sales) 
PARTITION BY RANGE (date)
( START (date 2016-01-01') INCLUSIVE
   END (date '2017-01-01') EXCLUSIVE
   EVERY (INTERVAL '1 month') );
INSERT INTO sales2 SELECT * FROM sales;
DROP TABLE sales;
ALTER TABLE sales2 RENAME TO sales;
GRANT ALL PRIVILEGES ON sales TO admin;
GRANT SELECT ON sales TO guest;
</codeblock>
        </p>
      </body>
    </topic>
    <topic id="topic72" xml:lang="en">
      <title>分区表的限制</title>
      <body>
        <p>对于每个分区级别，一个已分区的表最多能有32,767个分区。</p>
        <p>一个已分区表上的主键或者唯一约束必须包含所有的分区列。
          一个唯一索引可以忽略分区列，但是它只能在已分区表的每个部分而不是整个已分区的表上被强制。</p>
        <p>用<codeph>DISTRIBUTED REPLICATED</codeph>分布策略创建的表不能被分区。</p>
        <p>Greenplum的下一代查询优化器GPORCA支持统一的多级分区表。
          如果启用了GPORCA（默认情况）并且多级分区表不统一，Greenplum数据库会用传统查询优化器对该表执行查询。
          有关统一多级分区表的信息，请见<xref href="../query/topics/query-piv-uniform-part-tbl.xml#topic1"/>。
          </p>
        <p>有关交换叶节点和外部表的信息，请参考<xref href="#topic_yhz_gpn_qs" format="dita"/>。</p>
        <p>当一个叶子子分区是外部表时，对分区表有一些限制：</p>
        <ul id="ul_byq_wdd_bt">
          <li>针对包含外部表分区的分区表运行的查询将用传统查询优化器执行。</li>
          <li>外部表分区是一个只读外部表。尝试在该外部表分区中访问或者修改数据的命令会返回一个错误。例如：<ul
              id="ul_ugr_try_bt">
              <li>尝试在外部表分区中改变数据的<codeph>INSERT</codeph>、<codeph>DELETE</codeph>以及<codeph>UPDATE</codeph>命令会返回一个错误。</li>
              <li><codeph>TRUNCATE</codeph>命令返回一个错误。</li>
              <li><codeph>COPY</codeph>命令无法复制数据到一个会更新外部表分区的分区表中。</li>
              <li>尝试从一个外部表分区中复制出数据的<codeph>COPY</codeph>命令会返回一个错误，除非用户为<codeph>COPY</codeph>命令指定<codeph>IGNORE EXTERNAL PARTITIONS</codeph>子句。
                如果用户指定该子句，数据不会被从外部表分区复制出来。
                <p>要对一个有外部表作为叶子子表的分区表使用<codeph>COPY</codeph>命令，可以使用一个SQL查询来拷贝数据。
                  例如，如果表<codeph>my_sales</codeph>包含一个外部表作为叶子子表，这个命令可以把其数据发送到<codeph>stdout</codeph>：
                  <codeblock>COPY (SELECT * from my_sales ) TO stdout</codeblock></p></li>
              <li><codeph>VACUUM</codeph>命令会跳过外部表分区。</li>
            </ul></li>
          <li>
            <p>如果在外部表分区上没有数据改变，则支持下列操作。否则，返回一个错误。</p>
            <ul id="ul_hcw_mrn_qs">
              <li>增加或者删除一列。</li>
              <li>更改列的数据类型。</li>
            </ul>
          </li>
          <li>如果分区表包含一个外部表分区，则不支持这些<codeph>ALTER PARTITION</codeph>操作：<ul id="ul_edw_mrn_qs">
              <li>设置一个子分区模板。</li>
              <li>更改分区属性。</li>
              <li>创建一个默认分区。</li>
              <li>设置一种分布策略。</li>
              <li>设置或者删除列的一个<codeph>NOT NULL</codeph>约束。</li>
              <li>增加或者删除约束。</li>
              <li>分裂一个外部分区。</li>
            </ul></li>
          <li>如果分区表的一个叶子子分区是一个可读的外部表，Greenplum数据库工具<codeph>gpbackup</codeph>不会从该叶子子分区中备份数据。</li>
        </ul>
      </body>
    </topic>
  </topic>
  <topic id="topic73" xml:lang="en">
    <title>加载分区表</title>
    <body>
      <p>在用户创建了分区表结构之后，顶层父表为空。
        数据会被路由到底层的子表分区中。
        在一个多级分区设计中，只有层次底部的子分区能够包含数据。</p>
      <p>不能被映射到一个子表分区的行会被拒绝并且载入会失败。
        为了避免无法映射的行在载入时被拒绝，可以为用户的分区层次定义一个<codeph>DEFAULT</codeph>分区。
        任何不匹配一个分区的<codeph>CHECK</codeph>约束的行会被载入到<codeph>DEFAULT</codeph>分区。
        参见<xref href="#topic80" type="topic" format="dita"/>。
        </p>
      <p>在运行时，查询优化器扫描整个表继承层次并使用<codeph>CHECK</codeph>表约束来决定要扫描哪个子表分区来满足查询的条件。
        <codeph>DEFAULT</codeph>分区（如果用户的层次中有一个）总是会被扫描。
        包含数据的<codeph>DEFAULT</codeph>分区会拖慢总体扫描时间。
        </p>
      <p>当用户使用<codeph>COPY</codeph>或者<codeph>INSERT</codeph>来载入数据到父表时，数据会被自动路由到正确的分区，这就像是向一个常规表中载入数据一样。
        </p>
      <p>向分区表中载入数据的最佳方法是创建一个中间状态表，把数据载入其中，然后把它交换到用户的分区设计中。参见<xref href="#topic83"
          type="topic" format="dita"/>。</p>
    </body>
  </topic>
  <topic id="topic74" xml:lang="en">
    <title id="im148883">验证分区策略</title>
    <body>
      <p>当一个表基于查询谓词被分区时，用户可以使用<codeph>EXPLAIN</codeph>来验证查询优化器只扫描相关的数据来检查查询计划。</p>
      <p>例如，假设一个<i>sales</i>表被按日期范围分区，先用月份分区然后用地区建立子分区，如图<xref href="#topic_tvx_nsz_bt/im207241" format="dita"/>所示。
        对于下列查询：</p>
      <p>
        <codeblock>EXPLAIN SELECT * FROM sales WHERE date='01-07-12' AND 
region='usa';
</codeblock>
      </p>
      <p>这个查询的查询计划应该展示只涉及到下列表的表扫描：</p>
      <ul id="ul_xyc_2wy_sp">
        <li id="im152925">返回0-1行的默认分区（如果用户的分区设计有一个默认分区）</li>
        <li id="im148892">返回0-1行的January 2012分区（<i>sales_1_prt_1</i>）</li>
        <li id="im148893">返回若干行的USA地区子分区（<i>sales_1_2_prt_usa</i>）。</li>
      </ul>
      <p>下面的例子展示了相关的查询计划片段。</p>
      <p>
        <codeblock>-&gt;  <codeph>Seq Scan on</codeph><codeph>sales_1_prt_1</codeph> sales (cost=0.00..0.00 <codeph>rows=0</codeph> 
     width=0)
Filter: "date"=01-07-12::date AND region='USA'::text
-&gt;  <codeph>Seq Scan on</codeph><codeph>sales_1_2_prt_usa</codeph> sales (cost=0.00..9.87 
<codeph>rows=20</codeph> 
      width=40)
</codeblock>
      </p>
      <p>确保查询优化器不会扫描不必要的分区或者子分区（例如，扫描没有在查询谓词中指定的月份或者地区），以及顶层表的扫描返回0-1行。</p>
    </body>
    <topic id="topic75" xml:lang="en">
      <title>选择性分区扫描疑难解答</title>
      <body>
        <p>下列限制可能导致一个对用户的分区层次进行非选择性扫描的查询计划。</p>
        <ul id="ul_kcd_2wy_sp">
          <li id="im148903">只有当查询包含表的使用不可变操作符，例如
            <p> =, &lt; , &lt;= , &gt;,  &gt;= , 和 &lt;&gt;</p>
            的直接或者简单限制时，查询优化器才能有选择地扫描分区表。</li>
          <li id="im183866">选择性扫描识别查询中的<codeph>STABLE</codeph>以及<codeph>IMMUTABLE</codeph>函数，但是不识别<codeph>VOLATILE</codeph>函数。
            例如，<codeph>date &gt; CURRENT_DATE</codeph>这样的<codeph>WHERE</codeph>子句导致查询优化器选择性扫描分区表，但是<codeph>time &gt; TIMEOFDAY</codeph>不会。
            </li>
        </ul>
      </body>
    </topic>
  </topic>
  <topic id="topic76" xml:lang="en">
    <title>查看用户的分区设计</title>
    <body>
      <p>用户可以使用<i>pg_partitions</i>视图查看有关分区设计的信息。
        例如，要查看<i>sales</i>表的分区设计：</p>
      <p>
        <codeblock>SELECT partitionboundary, partitiontablename, partitionname, 
partitionlevel, partitionrank 
FROM pg_partitions 
WHERE tablename='sales';
</codeblock>
      </p>
      <p>下列表和视图展示了关于分区表的信息。</p>
      <ul id="ul_ycd_2wy_sp">
        <li id="im211944"><i>pg_partition </i>- 跟踪分区表以及它们的继承层次关系。</li>
        <li id="im156096"><i>pg_partition_templates</i> - 展示使用一个子分区模板创建的子分区。</li>
        <li id="im156103"><i>pg_partition_columns</i> - 显示在一个分区设计中用到的分区键列。</li>
      </ul>
      <p>有关Greenplum数据库系统目录表和视图的信息，请见<i>Greenplum数据库参考指南</i>。</p>
    </body>
  </topic>
  <topic id="topic77" xml:lang="en">
    <title id="im154268">维护分区表</title>
    <body>
      <p>要维护一个分区表，对顶层父表使用<codeph>ALTER TABLE</codeph>命令。
        最常用的情景是删除旧的分区以及增加新的分区，以此在一种范围分区设计中维护数据的一个滚动窗口。
        用户可以把旧的分区转换（<i>交换</i>）成追加优化的压缩存储格式来节省空间。
        如果在用户的分区设计中有一个默认分区，用户可以通过<i>分裂</i>默认分区来增加一个分区。</p>
      <ul id="ul_ufd_2wy_sp">
        <li id="im154171">
          <xref href="#topic78" type="topic" format="dita"/>
        </li>
        <li id="im153528">
          <xref href="#topic79" type="topic" format="dita"/>
        </li>
        <li id="im153533">
          <xref href="#topic80" type="topic" format="dita"/>
        </li>
        <li id="im153537">
          <xref href="#topic81" type="topic" format="dita"/>
        </li>
        <li id="im153550">
          <xref href="#topic82" type="topic" format="dita"/>
        </li>
        <li id="im153555">
          <xref href="#topic83" type="topic" format="dita"/>
        </li>
        <li id="im153559">
          <xref href="#topic84" type="topic" format="dita"/>
        </li>
        <li id="im163231">
          <xref href="#topic85" type="topic" format="dita"/>
        </li>
        <li>
          <xref href="#topic_yhz_gpn_qs" format="dita"/>
        </li>
      </ul>
      <note type="important">重要： 在定义和改变分区设计时，要使用给定的分区名而不是表对象名。
        尽管用户可以直接使用SQL命令来查询和装载任何表（包括分区表），用户只能使用<codeph>ALTER TABLE...PARTITION</codeph>子句修改一个分区表的结构。
        <p>分区并不要求有名称。如果一个分区没有名称，可使用下列表达式之一来指定它：<codeph>PARTITION FOR (value)</codeph>或者<codeph>PARTITION FOR(RANK(number)</codeph>。
          </p></note>
    </body>
    <topic id="topic78" xml:lang="en">
      <title id="im172625">增加分区</title>
      <body>
        <p>用户可以用<codeph>ALTER TABLE</codeph>命令为一个分区设计增加一个分区。
          如果原始分区设计包括由一个子分区模板定义的子分区，新增加的分区也会根据该模板划分子分区。例如：
          </p>
        <p>
          <codeblock>ALTER TABLE sales ADD PARTITION 
            START (date '2017-02-01') INCLUSIVE 
            END (date '2017-03-01') EXCLUSIVE;
</codeblock>
        </p>
        <p>如果在创建表时没有使用一个子分区模板，用户可以在增加分区时定义子分区：</p>
        <p>
          <codeblock>ALTER TABLE sales ADD PARTITION 
            START (date '2017-02-01') INCLUSIVE 
            END (date '2017-03-01') EXCLUSIVE
      ( SUBPARTITION usa VALUES ('usa'), 
        SUBPARTITION asia VALUES ('asia'), 
        SUBPARTITION europe VALUES ('europe') );
</codeblock>
        </p>
        <p>当用户为一个现有分区增加一个子分区时，用户可以指定要更改的分区。例如：</p>
        <p>
          <codeblock>ALTER TABLE sales ALTER PARTITION FOR (RANK(12))
      ADD PARTITION africa VALUES ('africa');
</codeblock>
        </p>
        <note type="note">用户不能向一个具有默认分区的分区设计中增加分区。
          用户必须分裂默认分区来增加分区。
          参见<xref href="#topic84" type="topic" format="dita"/>。</note>
      </body>
    </topic>
    <topic id="topic79" xml:lang="en">
      <title id="im153493">重命名分区</title>
      <body>
        <p>分区表使用下列命名习惯。分区子表的名称服从唯一性要求和长度限制。</p>
        <p>
          <codeblock><i>&lt;parentname&gt;</i>_<i>&lt;level&gt;</i>_prt_<i>&lt;partition_name&gt;</i></codeblock>
        </p>
        <p>例如：</p>
        <p>
          <codeblock><i>sales_1_prt_jan16</i></codeblock>
        </p>
        <p>对于自动生成的范围分区，在没有给出名称时会分配一个数字：</p>
        <p>
          <codeblock><i>sales_1_prt_1</i></codeblock>
        </p>
        <p>要重命名一个已分区的子表，应重命名顶层父表。在所有相关的子表分区的表名中，<i>&lt;parentname&gt;</i>都会改变。例如下面的命令：
          </p>
        <p>
          <codeblock>ALTER TABLE sales RENAME TO globalsales;
</codeblock>
        </p>
        <p>会修改相关的表名：</p>
        <p>
          <codeblock><i>globalsales_1_prt_1</i></codeblock>
        </p>
        <p>用户可以更改一个分区的名称让它更容易标识。例如：:</p>
        <p>
          <codeblock>ALTER TABLE sales RENAME PARTITION FOR ('2016-01-01') TO jan16;
</codeblock>
        </p>
        <p>会把相关的表名改为如下：</p>
        <p>
          <codeblock><i>sales_1_prt_jan16</i></codeblock>
        </p>
        <p>在使用<codeph>ALTER TABLE</codeph>命令修改分区表时，总是用它们的分区名（<i>jan16</i>）而不是它们的完整表名（<i>sales_1_prt_jan16</i>）引用表。
          </p>
        <note type="note">表名不能是一个<codeph>ALTER TABLE</codeph>语句中的分区名。
          例如，<codeph>ALTER TABLE sales...</codeph>是正确的。
          <codeph>ALTER TABLE sales_1_part_jan16...</codeph>则不被允许。
          </note>
      </body>
    </topic>
    <topic id="topic80" xml:lang="en">
      <title id="im152983">增加默认分区</title>
      <body>
        <p>用户可以用<codeph>ALTER TABLE</codeph>命令为一个分区设计增加一个默认分区。</p>
        <p>
          <codeblock>ALTER TABLE sales ADD DEFAULT PARTITION other;
</codeblock>
        </p>
        <p>如果用户的分区设计是多级的，该层次中每一级都必须有一个默认分区。例如：</p>
        <p>
          <codeblock>ALTER TABLE sales ALTER PARTITION FOR (RANK(1)) ADD DEFAULT 
PARTITION other;

ALTER TABLE sales ALTER PARTITION FOR (RANK(2)) ADD DEFAULT 
PARTITION other;

ALTER TABLE sales ALTER PARTITION FOR (RANK(3)) ADD DEFAULT 
PARTITION other;
</codeblock>
        </p>
        <p>如果到来的数据不匹配一个分区的<codeph>CHECK</codeph>约束并且没有默认分区，该数据就会被拒绝。
          默认分区确保到来的不匹配一个分区的数据能被插入到默认分区中。</p>
      </body>
    </topic>
    <topic id="topic81" xml:lang="en">
      <title id="im148907">删除分区</title>
      <body>
        <p>用户可以使用<codeph>ALTER TABLE</codeph>命令从用户的分区设计中删除一个分区。
          当用户删除一个具有子分区的分区时，子分区（以及其中的所有数据）也会被自动删除。
          对于范围分区，从范围中删除较老的分区很常见，因为旧的数据会被滚出数据仓库。例如：</p>
        <p>
          <codeblock>ALTER TABLE sales DROP PARTITION FOR (RANK(1));
</codeblock>
        </p>
      </body>
    </topic>
    <topic id="topic82" xml:lang="en">
      <title id="im164130">截断分区</title>
      <body>
        <p>用户可以使用<codeph>ALTER TABLE</codeph>命令截断一个分区。
          当用户截断一个具有子分区的分区时，子分区也会被自动截断。</p>
        <p>
          <codeblock>ALTER TABLE sales TRUNCATE PARTITION FOR (RANK(1));
</codeblock>
        </p>
      </body>
    </topic>
    <topic id="topic83" xml:lang="en">
      <title id="im148982">交换分区</title>
      <body>
        <p>用户可以使用<codeph>ALTER TABLE</codeph>命令交换一个分区。
          交换一个分区用一个表换掉一个现有的分区。
          用户只能在分区层次的最底层交换分区（只有包含数据的分区才可以被交换）。
          </p>
        <p>不可以交换包含复制表的分区。
          不支持使用分区表或分区表的子分区交换分区。</p>
        <p>分区交换对数据装载有用。
          例如，装载一个分段表并且把装载好的表换入到用户的分区设计中去。
          用户可以使用分区交换来把较老分区的存储类型改为追加优化表。例如：</p>
        <p>
          <codeblock>CREATE TABLE jan12 (LIKE sales) WITH (appendoptimized=true);
INSERT INTO jan12 SELECT * FROM sales_1_prt_1 ;
ALTER TABLE sales EXCHANGE PARTITION FOR (DATE '2012-01-01') 
WITH TABLE jan12;
</codeblock>
        </p>
        <note type="note">这个例子指的是表<codeph>sales</codeph>的单级定义，就是在前面那些例子对它增加或者修改分区之前。</note>
        <note type="warning">如果用户指定<codeph>WITHOUT VALIDATION</codeph>子句，用户必须确保用户用于交换现有分区的表中的数据对于该分区上的约束是合法的。
          否则，针对分区表的查询可能会返回不正确的结果。</note>
        <p>Greenplum数据库服务器配置参数<codeph>gp_enable_exchange_default_partition</codeph>控制<codeph>EXCHANGE DEFAULT PARTITION</codeph>子句的可用性。
          该参数的默认值是<codeph>off</codeph>，表示该子句不可用，如果在<codeph>ALTER TABLE</codeph>命令中指定了该子句，Greenplum数据库会返回一个错误。
          </p>
        <p>关于该参数的信息，请见<cite>Greenplum数据库参考指南</cite>中的“服务器配置参数”。
          <note type="warning">在用户交换默认分区前，用户必须确保要被交换的表中的数据（即新的默认分区）对于默认分区是合法的。
            例如，新默认分区中的数据不能含有对分区表其他叶子子分区有效的数据。
            否则，交换过默认分区的分区表上由GPORCA执行的查询可能会返回不正确的结果。</note></p>
      </body>
    </topic>
    <topic id="topic84" xml:lang="en">
      <title id="im153485">分裂分区</title>
      <body>
        <p>分裂一个分区会把一个分区划分成两个分区。
          用户可以使用<codeph>ALTER TABLE</codeph>命令分裂分区。
          只能在最低层级的分区做分裂（包含数据的分区）。
          对于对级别分区，只是范围分区可以分裂，列表分区不行。
          用户指定的分裂值会分在后一个分区中。</p>
        <p>例如，把一个月度分区分裂成两个，第一个分区包含日期January 1-15而第二个分区包含日期January 16-31：
          </p>
        <p>
          <codeblock>ALTER TABLE sales SPLIT PARTITION FOR ('2017-01-01')
AT ('2017-01-16')
INTO (PARTITION jan171to15, PARTITION jan1716to31);
</codeblock>
        </p>
        <p>如果用户的分区设计有一个默认分区，用户必须分裂该默认分区来增加分区。</p>
        <p>在使用<codeph>INTO</codeph>子句时，指定当前的默认分区为第二个分区名。
          例如，要分裂一个默认的范围分区来为January 2017增加一个新的月度分区：
          </p>
        <p>
          <codeblock>ALTER TABLE sales SPLIT DEFAULT PARTITION 
START ('2017-01-01') INCLUSIVE 
END ('2017-02-01') EXCLUSIVE 
INTO (PARTITION jan17, default partition);
</codeblock>
        </p>
      </body>
    </topic>
    <topic id="topic85" xml:lang="en">
      <title id="im163198">修改子分区模板</title>
      <body>
        <p>使用<codeph>ALTER TABLE</codeph> SET SUBPARTITION TEMPLATE 来修改一个分区表的子分区模板。
          在用户设置了新子分区模板之后增加的分区会具有新的分区设计。
          现有的分区不会被改变。
          </p>
        <p>下面的例子修改这个分区表的子分区模板：<codeblock>CREATE TABLE sales (trans_id int, date date, amount decimal(9,2), region text)
  DISTRIBUTED BY (trans_id)
  PARTITION BY RANGE (date)
  SUBPARTITION BY LIST (region)
  SUBPARTITION TEMPLATE
    ( SUBPARTITION usa VALUES ('usa'),
      SUBPARTITION asia VALUES ('asia'),
      SUBPARTITION europe VALUES ('europe'),
      DEFAULT SUBPARTITION other_regions )
  ( START (date '2014-01-01') INCLUSIVE
    END (date '2014-04-01') EXCLUSIVE
    EVERY (INTERVAL '1 month') );</codeblock></p>
        <p>这个<codeph>ALTER TABLE</codeph>命令修改子分区模板。</p>
        <p>
          <codeblock>ALTER TABLE sales SET SUBPARTITION TEMPLATE
( SUBPARTITION usa VALUES ('usa'), 
  SUBPARTITION asia VALUES ('asia'), 
  SUBPARTITION europe VALUES ('europe'),
  SUBPARTITION africa VALUES ('africa'), 
  DEFAULT SUBPARTITION regions );</codeblock>
        </p>
        <p>当用户为表sales增加一个日期范围分区时，它包括非洲的新地区列表子分区。
          例如，下面的命令创建子分区<codeph>usa</codeph>、<codeph>asia</codeph>、<codeph>europe</codeph>、 <codeph>africa</codeph>以及一个名为other的默认分区：
          </p>
        <p>
          <codeblock>ALTER TABLE sales ADD PARTITION "4"
  START ('2014-04-01') INCLUSIVE 
  END ('2014-05-01') EXCLUSIVE ;</codeblock>
        </p>
        <p>要查看为分区表<codeph>sales</codeph>创建的表，用户可以从psql命令行使用<codeph>\dt sales*</codeph>。
          </p>
        <p>要移除一个子分区模板，使用带有空圆括号的<codeph>SET SUBPARTITION TEMPLATE</codeph>。
          例如，要清除sales表的子分区模板：</p>
        <p>
          <codeblock>ALTER TABLE sales SET SUBPARTITION TEMPLATE ();
</codeblock>
        </p>
      </body>
    </topic>
    <topic id="topic_yhz_gpn_qs">
      <title>用外部表交换叶子子分区</title>
      <body>
        <p>用户可以用一个可读的外部表交换一个分区表中的一个叶子子分区。
          外部表数据可以位于一个主机文件系统、一个NFS挂载或者一个Hadoop文件系统（HDFS）。</p>
        <p>例如，如果用户有一个分区表，它按月被分成月度分全局并且对该表的大部分查询值访问较新的数据，用户可以把较旧的、较少访问的数据拷贝到外部表并且把较旧的分区与这些外部表交换。
          对于之访问较新数据的查询，用户可以创建使用分区排除的查询来防止扫描较旧的、不需要的分区。</p>
         <p>如果分区表含有一个带检查约束或者<codeph>NOT NULL</codeph>约束的列，用一个外部表交换一个叶子子分区是不可以的。
           </p>
        <p>关于交换和修改一个叶子子分区的信息，请见<cite>Greenplum数据库命令参考</cite>中的<codeph>ALTER TABLE</codeph>命令。
          </p>
        <p>关于含有外部表分区的分区表的限制，请见<xref href="#topic72" format="dita"/>。</p>
      </body>
      <topic id="topic_y3y_1xd_bt">
        <title>用外部表交换分区的例子</title>
        <body>
          <p>这是一个简单的例子，它把这个分区表的一个叶子子分区交换为一个外部表。分区表包含2010至2013年份的数据。</p>
          <codeblock>CREATE TABLE sales (id int, year int, qtr int, day int, region text)
  DISTRIBUTED BY (id) 
  PARTITION BY RANGE (year) 
  ( PARTITION yr START (2010) END (2014) EVERY (1) ) ;</codeblock>
          <p>该分区表有四个叶子子分区。
            每一个叶子子分区含有单一年份的数据。
            叶子子分区表<codeph>sales_1_prt_yr_1</codeph>包含2010年的数据。
            这些步骤把表<codeph>sales_1_prt_yr_1</codeph>交换为一个使用<codeph>gpfdist</codeph>协议的外部表：
            </p>
          <ol id="ol_uls_2xd_bt">
            <li>确保Greenplum数据库系统启用了该外部表协议。
              <p>这个例子使用了<codeph>gpfdist</codeph>协议。这个命令开始<codeph>gpfdist</codeph>协议。
              <codeblock> $ gpfdist</codeblock></p></li>
            <li>创建一个可写的外部表。<p>这个<codeph>CREATE WRITABLE EXTERNAL
                  TABLE</codeph>命令用和分区表相同的列创建一个可写的外部表。</p><codeblock>CREATE WRITABLE EXTERNAL TABLE my_sales_ext ( LIKE sales_1_prt_yr_1 )
  LOCATION ( 'gpfdist://gpdb_test/sales_2010' )
  FORMAT 'csv' 
  DISTRIBUTED BY (id) ;</codeblock></li>
            <li>创建一个可读的外部表，它从前一步创建的可写外部表的目的地读取数据。
              <p>这个<codeph>CREATE EXTERNAL
                  TABLE</codeph>创建一个可读外部表，它使用和可写外部数据相同的外部数据。</p><codeblock>CREATE EXTERNAL TABLE sales_2010_ext ( LIKE sales_1_prt_yr_1)
  LOCATION ( 'gpfdist://gpdb_test/sales_2010' )
  FORMAT 'csv' ;</codeblock></li>
            <li>从叶子子分区中拷贝数据到该可写外部表。
              <p>这个<codeph>INSERT</codeph></p><codeblock>INSERT INTO my_sales_ext SELECT * FROM sales_1_prt_yr_1 ;</codeblock></li>
            <li>用该外部表交换现有的叶子子分区。
              <p>这个<codeph>ALTER TABLE</codeph>命令指定了<codeph>EXCHANGE PARTITION</codeph>子句来切换可读外部表和叶子子分区。
                </p><codeblock>ALTER TABLE sales ALTER PARTITION yr_1 
   EXCHANGE PARTITION yr_1 
   WITH TABLE sales_2010_ext WITHOUT VALIDATION;</codeblock>
              <p>以表名<codeph>sales_1_prt_yr_1</codeph>成为叶子子分区的外部表，并且旧的叶子子分区变成表<codeph>sales_2010_ext</codeph>。
                </p>
              <note type="warning">为了确保针对分区表的查询返回正确的结果，外部表数据必须针对叶子子分区上的<codeph>CHECK</codeph>约束有效。
                在这种情况下，数据会从其上定义有<codeph>CHECK</codeph>约束的叶子子分区表中取出。</note></li>
            <li>删除滚出分区表的表。
              <codeblock>DROP TABLE sales_2010_ext ;</codeblock></li>
          </ol>
          <p>用户可以重命名该叶子子分区的名称来表明<codeph>sales_1_prt_yr_1</codeph>是一个外部表。</p>
          <p>这个示例命令把分区名改为<codeph>yr_1_ext</codeph>把叶子子分区表的名称改为<codeph>sales_1_prt_yr_1_ext</codeph>。
            </p>
          <codeblock>ALTER TABLE sales RENAME PARTITION yr_1 TO  yr_1_ext ;</codeblock>
        </body>
      </topic>
    </topic>
  </topic>
</topic>
