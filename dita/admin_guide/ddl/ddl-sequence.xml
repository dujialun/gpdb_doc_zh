<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_eys_3wy_sp">
  <title id="im148803">创建和使用序列</title>
  <body>
    <p>Greenplum数据库序列对象是一个特殊的单行表，用作数字生成器。
        您可以使用序列为添加到表中的行生成唯一的整数标识符。
        声明<codeph>SERIAL</codeph>类型的列会隐式创建一个序列计数器，以便在该表列中使用。
    </p>
    <p>Greenplum数据库提供了创建，更改和删除序列的命令。
        Greenplum数据库还提供内置函数来返回序列中的下一个值（<codeph>nextval()</codeph>）或将序列设置为特定的起始值（<codeph>setval()</codeph>）。
        </p>
    <note>Greenplum数据库不支持PostgreSQL<codeph>currval()</codeph>和<codeph>lastval()</codeph>序列函数。
       </note>
   <p>序列对象的属性包括序列的名称，其增量值以及序列计数器的最后，最小和最大值。
       序列还有一个名为<codeph>is_called</codeph>的特殊布尔属性，用于控制序列计数器上<codeph>nextval()</codeph>操作的自动递增行为。
       当序列的<codeph>is_called</codeph>属性为<codeph>true</codeph>时，<codeph>nextval()</codeph>会在返回值之前递增序列计数器。
       当序列的<codeph>is_called</codeph>属性值为<codeph>false</codeph>时，<codeph>nextval()</codeph>在返回值之前不会递增计数器。
       </p>
  </body>
  <topic id="topic87" xml:lang="en">
    <title>创建一个序列</title>
    <body>
      <p><codeph><xref href="../../ref_guide/sql_commands/CREATE_SEQUENCE.xml#topic1"/></codeph>命令使用给定的序列名称和可选的起始值创建和初始化序列。
          序列名称必须与同一Schema中任何其他序列，表，索引或视图的名称不同。 例如：
          </p>
      <p>
        <codeblock>CREATE SEQUENCE myserial START 101;
</codeblock>
      </p>
      <p>创建新序列时，Greenplum数据库将序列<codeph>is_called</codeph>属性设置为<codeph>false</codeph>。
          在新创建的序列上调用<codeph>nextval()</codeph>不会递增序列计数器，但会返回序列起始值并将<codeph>is_called</codeph>设置为<codeph>true</codeph>。
          </p>
    </body>
  </topic>
  <topic id="topic88" xml:lang="en">
    <title>使用一个序列</title>
    <body>
      <p>使用<codeph>CREATE SEQUENCE</codeph>命令创建序列后，可以检查序列并使用序列内置函数。
          </p>
     <section>
       <title>检查序列属性</title>
      <p>要检查序列的当前属性，请直接查询序列。
          例如，要检查名为<codeph>myserial</codeph>的序列：
          </p>
      <p>
        <codeblock>SELECT * FROM myserial;
</codeblock>
      </p>
     </section>
     <section>
       <title>返回下一个序列计数器值</title>
      <p>您可以调用<codeph>nextval()</codeph>内置函数来返回并使用序列中的下一个值。
          以下命令将名为<codeph>myserial</codeph>的序列的下一个值插入名为<codeph>vendors</codeph>的表的第一列：
          </p>
      <p>
        <codeblock>INSERT INTO vendors VALUES (nextval('myserial'), 'acme');
</codeblock>
      </p>
      <p><codeph>nextval()</codeph>使用序列的<codeph>is_called</codeph>属性值来确定在返回值之前是否递增序列计数器。
          当<codeph>is_called</codeph>为<codeph>true</codeph>时，<codeph>nextval()</codeph>使计数器前进。
          <codeph>nextval()</codeph>在返回之前将序列<codeph>is_called</codeph>属性设置为<codeph>true</codeph>。
          </p>
      <p><codeph>nextval()</codeph>操作永远不会回滚。
          即使执行<codeph>nextval()</codeph>的事务失败，获取的值也会被使用。
          这意味着失败的事务可能会在指定值的序列中留下未使用的漏洞。
          </p>
      <note>如果在Greenplum数据库中启用了镜像，则不能在<codeph>UPDATE</codeph>或<codeph>DELETE</codeph>语句中使用<codeph>nextval()</codeph>函数。
          </note>
     </section>
     <section>
       <title>设置序列计数器值</title>
      <p>您可以使用Greenplum数据库<codeph>setval()</codeph>内置函数来设置序列的计数器值。
          例如，以下命令将名为<codeph>myserial</codeph>的序列的计数器值设置为<codeph>201</codeph>：
          </p>
      <p>
        <codeblock>SELECT setval('myserial', 201);
</codeblock>
      </p>
      <p><codeph>setval()</codeph>有两个函数签名：<codeph>setval(sequence,
            start_val)</codeph>和<codeph>setval(sequence, start_val, is_called)</codeph>。
          <codeph>setval(sequence, start_val)</codeph>的默认行为设置序列<codeph>is_called</codeph>属性值为<codeph>true</codeph>。
          </p>
      <p>如果您不希望序列计数器在下一个<codeph>nextval()</codeph>调用时递增，
          请使用<codeph>setval(sequence, start_val, is_called)</codeph>函数签名，传递<codeph>false</codeph>参数：
          </p>
      <p>
        <codeblock>SELECT setval('myserial', 201, false);
</codeblock>
      </p>
      <p><codeph>setval()</codeph>操作永远不会回滚。</p>
     </section>
    </body>
  </topic>
  <topic id="topic89" xml:lang="en">
    <title>修改一个序列</title>
    <body>
      <p><codeph><xref href="../../ref_guide/sql_commands/ALTER_SEQUENCE.xml#topic1"/></codeph>命令更改现有序列的属性。
          您可以更改序列的开始，最小，最大和增量值。
          您也可以在起始值或指定值处重新启动序列。
          </p>
      <p>未在<codeph>ALTER SEQUENCE</codeph>命令中设置的任何参数都保留其先前的设置。
          </p>
      <p><codeph>ALTER SEQUENCE <varname>sequence</varname> START WITH
          <varname>start_value</varname></codeph>将序列的start_value属性设置为新的起始值。
          它对<codeph>last_value</codeph>属性或<codeph>nextval(sequence)</codeph>函数返回的值没有影响。
          </p>
      <p><codeph>ALTER SEQUENCE <varname>sequence</varname> RESTART</codeph>
          将序列的<codeph>last_value</codeph>属性重置为<codeph>start_value</codeph>属性的当前值，并将<codeph>is_called</codeph>属性重置为<codeph>false</codeph>。
          对<codeph>nextval(sequence)</codeph>函数的下一次调用将返回<varname>start_value</varname>。
          </p>
      <p><codeph>ALTER SEQUENCE <varname>sequence</varname> RESTART WITH
            <varname>restart_value</varname></codeph>
          将序列的<varname>last_value</varname>属性设置为新值，将<codeph>is_called</codeph>属性设置为<codeph>false</codeph>。
          下一次调用<codeph>nextval(sequence)</codeph>会返回<varname>restart_value</varname>。
          这等效于调用<codeph>setval(sequence, restart_value, false)</codeph>。
          </p>
      <p>以下命令在值<codeph>105</codeph>处重新启动名为<codeph>myserial</codeph>的序列：
          </p>
      <p>
        <codeblock>ALTER SEQUENCE myserial RESTART WITH 105;
</codeblock>
      </p>
    </body>
  </topic>
  <topic id="topic90" xml:lang="en">
    <title>删除一个序列</title>
    <body>
      <p><codeph><xref href="../../ref_guide/sql_commands/DROP_SEQUENCE.xml#topic1"/></codeph>命令可以删除序列。
          例如，以下命令将删除名为<codeph>myserial</codeph>的序列：
          </p>
      <p>
        <codeblock>DROP SEQUENCE myserial;
</codeblock>
      </p>
    </body>
  </topic>
  <topic id="topic91" xml:lang="en">
    <title>将序列指定为列的默认值</title>
    <body>
      <p>除了使用<codeph>SERIAL</codeph>或<codeph>BIGSERIAL</codeph>类型之外，
          您还可以直接在<codeph><xref href="../../ref_guide/sql_commands/CREATE_TABLE.xml#topic1"/></codeph>命令中引用序列。例如：
          </p>
      <p>
        <codeblock>CREATE TABLE tablename ( id INT4 DEFAULT nextval('myserial'), name text );
</codeblock>
      </p>
      <p>您还可以更改表列以将其默认值设置为序列计数器：</p>
        <codeblock>ALTER TABLE tablename ALTER COLUMN id SET DEFAULT nextval('myserial');
</codeblock>
    </body>
  </topic>
  <topic id="topic92" xml:lang="en">
    <title>序列回绕</title>
    <body>
      <p>默认情况下，序列不会回绕。
          这意味着当一个序列到达了最大值
          （<codeph>SMALLSERIAL</codeph>的<codeph>+32767</codeph>，
          <codeph>SERIAL</codeph>的<codeph>+2147483647</codeph>，
          <codeph>BIGSERIAL</codeph>的<codeph>+9223372036854775807</codeph>），
          再调用<codeph>nextval()</codeph>会失败。
          可以修改一个序列让它从<codeph>1</codeph>开始回绕：
          </p>
      <p>
        <codeblock>ALTER SEQUENCE myserial CYCLE;</codeblock>
      </p>
      <p>也可以在创建序列时指定回绕行为：</p>
      <p>
        <codeblock>CREATE SEQUENCE myserial CYCLE;</codeblock>
      </p>
    </body>
  </topic>
</topic>
