<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ix146103">插入, 更新, 和删除数据 </title>
  <shortdesc>这一节提供了Greenplum数据库中有关操纵数据和并发访问的信息。</shortdesc>
  <body>
    <p>这个主题包括下列小标题：<ul id="ul_ahw_hty_sp">
        <li><xref href="#topic2" format="dita"/></li>
        <li><xref href="#topic3" format="dita"/></li>
        <li><xref href="#topic4" format="dita"/></li>
        <li><xref href="#topic5" format="dita"/></li>
        <li><xref href="#topic7" format="dita"/></li>
        <li><xref href="#topic_gdd" format="dita"/></li>
        <li><xref href="#topic9" format="dita"/></li>
      </ul></p>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="ix140249">关于Greenplum数据库中的并发控制</title>
    <body>
      <p>Greenplum数据库和PostgreSQL不为并发控制使用锁。它们使用一种多版本模型来维护数据一致性，即多版本并发控制（MVCC）。 MVCC
        为每一个数据库会话实现了事务隔离，并且每一个查询事务会看到一个数据的快照。 这保证该事务会看到一致的不受其他并发事务影响的数据。 </p>
      <p>因为MVCC不会为并发控制使用显式锁，锁竞争被最小化并且Greenplum数据库在多用户环境中维持了合理的性能。为查询（读取）数据获得的
        锁不与为写数据获得的锁冲突。
        </p>
      <p>Greenplum数据库提供了多种锁模式来控制对表中数据的并发访问。大部分Greenplum数据库的SQL命令自动获取适当的锁来确保在命令执行期间 
        被引用的表不会被删除或者被以不兼容的方式被修改。对于不能轻易适应于MVCC行为的应用，可以使用 <codeph>LOCK</codeph> LOCK命令来获取显式锁。
        不过，MVCC的正确使用通常能提供更好的性能。</p>
      <table id="ix140861">
        <title>Greenplum数据库中的锁模式</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="2*"/>
          <colspec colnum="2" colname="col2" colwidth="3*"/>
          <colspec colnum="3" colname="col3" colwidth="3*"/>
          <thead>
            <row>
              <entry colname="col1">锁模式</entry>
              <entry colname="col2">相关的SQL命令</entry>
              <entry colname="col3">冲突模式</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">ACCESS SHARE</entry>
              <entry colname="col2">
                <codeph>SELECT</codeph>
              </entry>
              <entry colname="col3">ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">ROW SHARE</entry>
              <entry colname="col2">
                <codeph>SELECT FOR SHARE, SELECT...FOR UPDATE</codeph>
              </entry>
              <entry colname="col3">EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">ROW EXCLUSIVE</entry>
              <entry colname="col2"><codeph>INSERT</codeph>, <codeph>COPY</codeph><p>See <xref
                    href="#topic2/lock_note" format="dita">Note</xref>.</p></entry>
              <entry colname="col3">SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">SHARE UPDATE EXCLUSIVE</entry>
              <entry colname="col2"><codeph>VACUUM</codeph> (without <codeph>FULL</codeph>),
                  <codeph>ANALYZE</codeph></entry>
              <entry colname="col3">SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE,
                ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">SHARE</entry>
              <entry colname="col2">
                <codeph>CREATE INDEX</codeph>
              </entry>
              <entry colname="col3">ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE ROW EXCLUSIVE,
                EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">SHARE ROW EXCLUSIVE</entry>
              <entry colname="col2"/>
              <entry colname="col3">ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE ROW
                EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">EXCLUSIVE</entry>
              <entry colname="col2"><codeph>DELETE</codeph>, <codeph>UPDATE</codeph>,
                  <codeph>SELECT...FOR UPDATE</codeph><p>See <xref href="#topic2/lock_note"
                    format="dita">Note</xref>.</p></entry>
              <entry colname="col3">ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE, SHARE, SHARE
                ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
            <row>
              <entry colname="col1">ACCESS EXCLUSIVE</entry>
              <entry colname="col2"><codeph>ALTER TABLE</codeph>, <codeph>DROP TABLE</codeph>,
                  <codeph>TRUNCATE</codeph>, <codeph>REINDEX</codeph>, <codeph>CLUSTER</codeph>,
                  <codeph>VACUUM FULL</codeph>
              </entry>
              <entry colname="col3">ACCESS SHARE, ROW SHARE, ROW EXCLUSIVE, SHARE UPDATE EXCLUSIVE,
                SHARE, SHARE ROW EXCLUSIVE, EXCLUSIVE, ACCESS EXCLUSIVE</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <note id="lock_note">注意： Greenplum数据库会为 <codeph>UPDATE</codeph>, <codeph>DELETE</codeph>, 和 <codeph>SELECT...FOR
          UPDATE</codeph>获取更加严格的EXCLUSIVE锁。(而不是PostgreSQL中的 <codeph>ROW EXCLUSIVE</codeph>)
        .<p>当分布式死锁检测开启时，运行在堆表上的
            <codeph>DELETE</codeph>, <codeph>UPDATE</codeph>, 和 <codeph>SELECT...FOR
            UPDATE</codeph> 的锁模式是 <codeph>ROW EXCLUSIVE</codeph>的。 详情请见 <xref
            href="#topic_gdd" format="dita"/>.</p></note>
    </body>
  </topic>
  <topic id="topic3" xml:lang="en">
    <title id="ix140259">插入行</title>
    <body>
      <p>使用 <codeph>INSERT</codeph> 命令在一个表中创建行。 这个命令要求该表的名称和表中每一个列的值; 可以选择性地以任意顺序指定列名。
        如果没有指定列名，以那些列在表中的顺序列出数据值，用逗号分隔它们。 </p>
      <p>例如，指定要插入的列名和值：</p>
      <codeblock>INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);</codeblock>
      <p>只指定要插入的值:</p>
      <p>
        <codeblock>INSERT INTO products VALUES (1, 'Cheese', 9.99);
</codeblock>
      </p>
      <p>通常，数据值都是常量，但也可以使用标量表达式。例如：
        </p>
      <p>
        <codeblock>INSERT INTO films SELECT * FROM tmp_films WHERE date_prod &lt; 
'2016-05-07';
</codeblock>
      </p>
      <p>可以在单个命令中插入多行。例如：</p>
      <p>
        <codeblock>INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</codeblock>
      </p>
      <p>要插入数据到一个分区表，应指定根分区表，即用 <codeph>CREATE TABLE</codeph> 命令创建的表。
        也可以在一个<codeph>INSERT</codeph> 命令中指定该分区表的一个叶子子表。如果数据对于指定的叶子子表无效，会返回一个错误。
         不支持在<codeph>INSERT</codeph> 命令中指定一个不是叶子子表的子表。</p>
      <p>要插入大量数据，使用外部表或者<codeph>COPY</codeph> 命令。对于插入大量行，这些装载机制比<codeph>INSERT</codeph> 更加有效。 
          更多有关批量数据装载的信息请见装载和卸载数据。<xref href="load/topics/g-loading-and-unloading-data.xml#topic1"/>
          </p>
      <p>追加优化表的存储模型是为批量数据装载而优化。Greenplum不推荐对追加优化表的单行 <codeph>INSERT</codeph> 语句。对于追加优化表，
          Greenplum数据库支持最多127个并发<codeph>INSERT</codeph> 事务插入到一个追加优化表。 
          </p>
    </body>
  </topic>
  <topic id="topic4" xml:lang="en">
    <title id="ix156852">更新现有行</title>
    <body>
      <p><codeph>UPDATE</codeph> 命令在一个表中更新行。可以更新一个表中所有的行、所有行的一个子集或者单个行。可以单独更新每一列而不影响其他列。
        </p>
      <p>要执行一次更新，需要： </p>
      <ul>
        <li id="ix142075">要更新的表和列的名称</li>
        <li id="ix142076">这些列的新值</li>
        <li id="ix142077">指定要更新的行的一个或者更多条件。</li>
      </ul>
      <p>例如，下面的命令把所有价格为<i>5</i> 的产品更新为价格为 <i>10</i>: </p>
      <p>
        <codeblock>UPDATE products SET price = 10 WHERE price = 5;
</codeblock>
      </p>
      <p>在Greenplum数据库中使用 <codeph>UPDATE</codeph> 由下列限制:</p>
      <ul>
        <li id="ix155050">GPORCA可以为Greenplum分布键列提供更新支持，Postgres planner则不会 。</li>
        <li id="ix142137">如果使用了镜像，不能在<codeph>UPDATE</codeph>语句中使用<codeph>STABLE</codeph>或<codeph>VOLATILE</codeph> 函数。</li>
        <li id="ix155339">Greenplum数据库的分区列不能被更新.</li>
      </ul>
    </body>
  </topic>
  <topic id="topic5" xml:lang="en">
    <title id="ix140451">删除行</title>
    <body>
      <p><codeph>DELETE</codeph>命令从一个表中删除行。指定一个<codeph>WHERE</codeph>子句可以删除满足特定条件的行。
        如果不指定<codeph>WHERE</codeph> 子句，该表中所有的行都会被删除。
        其结果是一个合法的但为空的表。例如，从产品表中删除所有价格为<i>10</i>的行：</p>
      <p>
        <codeblock>DELETE FROM products WHERE price = 10;
</codeblock>
      </p>
      <p>要从一个表中删除所有行:</p>
      <p>
        <codeblock>DELETE FROM products; 
</codeblock>
      </p>
      <p>在Greenplum数据库中使用 <codeph>DELETE</codeph> 具有和使用<codeph>UPDATE</codeph>类似的限制:</p>
      <ul>
        <li id="ix155065">如果使用了镜像，不能在 <codeph>UPDATE</codeph> 语句中使用<codeph>STABLE</codeph> 或<codeph>VOLATILE</codeph> 函数。</li>
      </ul>
    </body>
    <topic id="topic6" xml:lang="en">
      <title id="ix142374">截断一个表</title>
      <body>
        <p>使用<codeph>TRUNCATE</codeph>命令可以快速地移除一个表中的所有行。例如：</p>
        <p>
          <codeblock>TRUNCATE mytable;
</codeblock>
        </p>
        <p>这个命令在一次操作中清空一个表的所有行。注意<codeph>TRUNCATE</codeph> 不扫描该表，因此它不会处理继承的子表或者<codeph>ON DELETE</codeph> 
          的重写规则。该命令只截断所提到的表中的行。</p>
      </body>
    </topic>
  </topic>
  <topic id="topic7" xml:lang="en">
    <title id="ix140458">使用事务</title>
    <body>
      <p>事务允许用户把多个SQL语句捆绑在一个要么全做要么全不做的操作中。</p>
      <p>下面是Greenplum数据库的SQL事务命令：</p>
      <ul>
        <li id="ix140816"><codeph>BEGIN</codeph> 或者 <codeph>START TRANSACTION </codeph>开始一个事务块。 </li>
        <li id="ix140821"><codeph>END</codeph> 或者 <codeph>COMMIT</codeph> 提交一个事务的结果。</li>
        <li id="ix140822"><codeph>ROLLBACK</codeph> 放弃一个事务而不做任何更改。 </li>
        <li id="ix155584"><codeph>SAVEPOINT</codeph> 在一个事务中标记一个位置并且允许做部分回滚。用户可以回滚在一个保存点之后执行的命令但保留该保存点之前执行的命令。 </li>
        <li id="ix155585"><codeph>ROLLBACK TO SAVEPOINT</codeph> 回滚一个事务到一个保存点。 </li>
        <li id="ix155589"><codeph>RELEASE SAVEPOINT</codeph> 销毁一个事务内的保存点。</li>
      </ul>
    </body>
    <topic id="topic8" xml:lang="en">
      <title id="ix153949">事务隔离级别</title>
      <body>
        <p>Greenplum数据库接受下列标准SQL事务级别：</p>
        <ul>
          <li id="ix153961"><codeph>读未提交</codeph> 和 <codeph>读已提交</codeph>
            的行为像标准的 <codeph>读已提交</codeph>.</li>
          <li><codeph>可重复读</codeph> 和 <codeph>可序列化</codeph> 的行为像behave like
              <codeph>可重复读</codeph>.</li>
        </ul>
        <p>下列信息描述了Greenplum事务级别的行为：</p>
        <section>
          <title>读已提交/读未提交</title>
          <p>Greenplum 数据库不允许任何命令来看其他并发事务的未提交的更新，因此 <codeph>读未提交</codeph> 会和
              <codeph>读已提交</codeph>的行为一样。<codeph>读已提交</codeph> 提供快速、简单、部分的事务隔离。使用读已提交和读未提交事务隔离，
              <codeph>SELECT</codeph>, <codeph>UPDATE</codeph>, 和<codeph>DELETE</codeph> 事务在一个查询开始时取得的数据库快照上操作。
               </p>
          <p> 一个 <codeph>SELECT</codeph> 查询:</p>
          <ul id="ul_vgl_55p_lgb">
            <li id="ix154052">看得见该查询开始前被提交的数据。</li>
            <li id="ix154063">看得见在该事务内执行的更新。</li>
            <li id="ix154073">看不见事务外未提交的数据。</li>
            <li id="ix154080">如果并发事务在该查询所在事务最初的读操作之前就被提交，该查询可能会看到这个并发事务所作的更改。</li>
          </ul>
          <p>如果其他并发事务在同一个事务中后续的<codeph>SELECT</codeph>查询开始前提交更改，这些查询能够看到不同的数据。
             <codeph>UPDATE</codeph> 和 <codeph>DELETE</codeph> 命令只找在该命令开始前提交的行。
              </p>
          <p><codeph> 读已提交</codeph>事务隔离允许并发事务在<codeph>UPDATE</codeph> 或 <codeph>DELETE</codeph>找到行之前修改或者锁定该行。
          读已提交或读未提交事务隔离可能不适合执行复杂查询和更新并且要求该数据库的一致性视图的应用。
            <codeph>读已提交</codeph> 事务隔离可能不适合执行
          复杂查询和更新并且要求该数据库的一致性视图的应用。</p>
        </section>
        <section>
          <title>可重复读和可序列化</title>
          <p>根据SQL标准规定，<codeph>可序列化</codeph> 事务隔离确保在其中事务的并行化执行结果就像一个接一个执行一样。 
           如果指定 <codeph>可序化</codeph>时， Greenplum数据库会退而采用<codeph>可重复读</codeph>.
            <codeph>可重复读</codeph>事务能防止脏读、不可重复读和幻读，而且不需要昂贵的锁定，
            但是在Greenplum数据库的一些SERIALIZABLE事务之间可能发生其他的相互影响而阻止它们变成真正地可序列化。
            并发运行的事务应该被检查来识别出不会因为不允许对同一数据的并发更新而被阻止的相互影响。
            通过使用显式表锁或者要求冲突事务更新一个被引入来表示该冲突的虚拟行可以阻止所发现的问题。 </p>
          <p>对于 <codeph>可重复读</codeph> 事务, 一个 <codeph>SELECT</codeph>查询:</p>
          <ul id="ul_mpy_55p_lgb">
            <li id="ix154139">看得到一个事务开始时（不是该事务中当前查询开始时）的数据快照。</li>
            <li id="ix155116">只看得到在查询开始前被提交的数据。</li>
            <li id="ix154149">看得到该事务内执行的更新。</li>
            <li id="ix154156">看不到该事务外部的未提交数据。</li>
            <li id="ix154163">看不到并发事务所作的更改。</li>
            <li>一个单一事务中的后续 <codeph>SELECT</codeph> 命令总是看到相同的数据。</li>
            <li><codeph>UPDATE</codeph>, <codeph>DELETE</codeph>, <codeph>SELECT FOR
              UPDATE</codeph>, 和 <codeph>SELECT FOR SHARE</codeph> 命令只会发现在该命令开始前被提交的行。
             如果一个目标行被找到时一个并发事务已经更新、删除或者锁定该行，<codeph> 可重复读</codeph> 事
             务会等待该并发事务执行或者回滚。 如果并发事务执行变化，那么可重复读事务会回滚。如果<codeph> 可重复读</codeph> 事务回滚，
             那么可序列化或者可重复读事务执行变化。 </li>
          </ul>
        </section>
        <p id="ix141505">Greenplum数据库中的默认事务隔离级别是<codeph>读已提交</codeph>。
          要为一个事务更改隔离级别，在<codeph>BEGIN</codeph> 该事务时声明隔离级别或者在事务开始后使用<codeph>SET TRANSACTION</codeph>命令设置隔离级别。 </p>
      </body>
    </topic>
  </topic>
  <topic id="topic_gdd" xml:lang="en">
    <title>全局死锁检测</title>
    <body>
      <p> Greenplum数据库全局死锁检测器后端进程会收集所有segment上的锁信息，并使用有向算法来检测本地死锁和全局死锁是否存在。
        该算法使Greenplum数据库放宽对堆表的并发更新和删除限制。 （Greenplum数据库仍然在AO / CO表上使用表级锁定，对<codeph>UPDATE</codeph>,
         <codeph>DELETE</codeph>, 和 <codeph>SELECT...FOR UPDATE</codeph>的并发操作进行限制。）  </p>
      <p> 默认情况下，全局死锁检测器是被禁用的，Greenplum数据库以串行方式对堆表执行并发更新和删除操作。
        可以通过设置配置参数<xref
                href="../ref_guide/config_params/guc-list.xml#gp_enable_global_deadlock_detector"
        ><codeph>gp_enable_global_deadlock_detector</codeph></xref>，开启并发更新并让全局死锁检测器检测死锁是否存在。
        </p>
      <p>
            启用全局死锁检测器后，当启动Greenplum数据库时，master 主机上会自动启动一个后端进程。可以通过
            <codeph><xref
            href="../ref_guide/config_params/guc-list.xml#gp_global_deadlock_detector_period"
            type="section">gp_global_deadlock_detector_period</xref></codeph>配置参数，来设置采集和分析锁等待数据的时间间隔。</p>
      <p>如果全局死锁检测器发现了死锁，它会通过取消最新的事务所关联的一个或多个后端进程来避免死锁。  </p>
      <p>当全局死锁检测器发现了以下事物类型的死锁时，只有一个事务将成功。其他事务将失败，并打印错误指出不允许对同一行进行并发更新。<ul
          id="ul_bxf_mpp_5gb">
          <li>在同一行堆表的并发事务中，第一个事务是更新操作，下一个事务执行更新或删除，并且查询计划包含一个动作操作符。</li>
          <li>堆表的同一分发键上的并发更新事务由Greenplum Database Postgres查询优化器执行</li>
          <li>哈希表的同一行上的并发事务更新由GPORCA优化器执行。</li>
        </ul></p>
      <note>Greenplum数据库通过配置参数 <codeph><xref
            href="../ref_guide/config_params/guc-list.xml#deadlock_timeout" type="section"
            >deadlock_timeout</xref></codeph> 指定本地死锁检测的间隔。由于本地死锁检测和全局死锁检测算法的不同，被死锁检测器终止的进程也不同，这取决于本地死锁检测和全局死锁检测哪个先被触发。</note>
            
       <note>若打开配置参数 <codeph><xref
            href="../ref_guide/config_params/guc-list.xml#lock_timeout" type="section"
            >lock_timeout</xref></codeph> ，且将数值设定为小于<codeph>deadlock_timeout</codeph>
            和 <codeph>gp_global_deadlock_detector_period</codeph>,查询会在死锁检测被触发之前就被终止。</note>
      <p>用户可以通过自定义函数，<codeph>pg_dist_wait_status()</codeph> 查看所有segment上的锁等待信息：哪些事务在等待锁，哪些事务在持有锁，以及事务运行在哪个segment上。
      <codeph>pg_dist_wait_status()</codeph> 的输出如下例所示:</p>
      <codeblock>SELECT * FROM pg_dist_wait_status();
 segid | waiter_dxid | holder_dxid | holdTillEndXact 
-------+-------------+-------------+-----------------
    -1 |          29 |          28 | t
     0 |          28 |          26 | t
     0 |          27 |          29 | t
     1 |          26 |          27 | t
(4 rows)
</codeblock>
      <p>全局死锁检测器会终止某个事务以打破死锁，并且打印如下的错误信息：</p>
      <codeblock>ERROR:  canceling statement due to user request: "cancelled by global deadlock detector"</codeblock>
    </body>
  </topic>
  <topic id="topic9" xml:lang="en">
    <title id="ix141487">清理数据库</title>
    <body>
      <p>虽然新事务看不到被删除或者被更新的数据行，但是它们仍然在磁盘上占用物理空间。周期性地运行<codeph>VACUUM</codeph>命令可以移除这些过期的行。例如：
      </p>
      <p>
        <codeblock>VACUUM mytable;
</codeblock>
      </p>
      <p><codeph>VACUUM</codeph> 命令会收集表级别的统计信息，例如行数和页数。在装载数据后清理所有的表，包括追加优化表。有关推荐的例行清理操作的信息，
      请见 <xref
          href="managing/maintain.xml#topic2" type="topic" format="dita"/>.</p>
         <note type="important">如果在数据库数据上频繁地执行更新和删除，<codeph>VACUUM</codeph>, <codeph>VACUUM FULL</codeph>, 和
          <codeph>VACUUM ANALYZE</codeph>命令应该被用来维护Greenplum数据库中的数据。有关使用 <codeph>VACUUM</codeph> 命令的信息请见<cite>Greenplum数据库参考指南</cite> 。
      </note>
    </body>
  </topic>
</topic>
