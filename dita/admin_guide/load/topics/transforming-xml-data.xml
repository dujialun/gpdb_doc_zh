<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic75">
   <title>使用gpfdist和gpload转换外部数据</title>
   <shortdesc><codeph>gpfdist</codeph>并行文件服务器允许用户设置转换，使Greenplum数据库外部表能够以<codeph>CREATE EXTERNAL TABLE</codeph>命令的<codeph>FORMAT</codeph>子句不支持的格式读取和写入文件。<i>input</i>转换以外部数据格式读取文件，并以CSV或外部表的FORMAT子句中指定的其他文本格式将行输出到<codeph>gpfdist</codeph>。<i>output</i>转换以文本格式从<codeph>gpfdist</codeph>接收行，并将它们转换为外部数据格式。</shortdesc>
   <body>
      <note><codeph>gpfdist</codeph>和<codeph>gpload</codeph>仅与发布它们的Greenplum数据库主要版本兼容。例如，与Greenplum Database 4.x一起安装的<codeph>gpfdist</codeph>工具不能与Greenplum Database 5.x或6.x一起使用。</note>
      <p>本节介绍了设置数据转换的任务，以使<codeph>gpfdist</codeph>使用Greenplum数据库不支持的格式读取或写入外部数据文件。</p>
      <ul id="ul_xlm_13m_pbb">
         <li><xref href="#topic_mdl_thm_pbb" format="dita"/></li>
         <li><xref href="#topic_el5_k12_pbb" format="dita"/></li>
         <li><xref href="#topic77" format="dita"/></li>
         <li><xref href="#topic78" format="dita"/></li>
         <li><xref href="#topic80" format="dita"/></li>
         <li><xref href="#topic83" format="dita"/></li>
         <li><xref href="#topic91" format="dita"/></li>
      </ul>
   </body>
   <topic id="topic_mdl_thm_pbb">
      <title>关于gpfdist转换</title>
      <body>
         <p>要设置数据格式转换，用户需要提供一个可执行命令，该命令可以被<codeph>gpfdist</codeph>以包含数据的文件名调用。例如，用户可以编写一个shell脚本，该脚本在XML文件上运行XSLT转换，以输出具有以竖线(<codeph>|</codeph>)字符分隔的列和使用换行符分隔的行的行。</p>
         <p>转换是在以命令行方式传递给<codeph>gpfdist</codeph>的YAML格式的配置文件中配置的。</p>
         <p>如果要将外部数据加载到Greenplum数据库的表中，可以使用<codeph>gpload</codeph>工具自动执行创建外部表的任务，运行<codeph>gpfdist</codeph>并将转换后的数据加载到数据库表中。</p>
         <p>从数据库中访问外部XML文件中的数据是常见的需要转换的示例。下图展示了对ETL服务器上的XML文件执行转换的<i>gpfdist</i>。</p>
         <fig id="du185408">
            <title>使用XML转换的外部表</title>
            <image href="../../graphics/ext-tables-xml.png" placement="break" id="image_xbp_whm_pbb"/>
         </fig>
         <p>以下是为外部数据文件设置<codeph>gpfdist</codeph>转换的高级步骤。该过程用XML示例说明。</p>
         <ol id="ol_d4f_4wf_pbb">
            <li><xref href="#topic_el5_k12_pbb" format="dita">Determine the transformation
                  schema</xref>.</li>
            <li><xref href="#topic77" format="dita">Write a transformation</xref>.</li>
            <li><xref href="#topic78" format="dita">Write the gpfdist configuration
               file</xref>.</li>
            <li><xref href="#topic80" format="dita">Transfer the data</xref>.</li>
         </ol>
      </body>
   </topic>
   <topic id="topic_el5_k12_pbb">
      <title>确定转换方案</title>
      <body>
         <p>要为转换项目做准备：</p>
         <ol id="ol_fl5_k12_pbb">
            <li>确定该项目的目标，例如索引数据、分析数据、组合数据等等。</li>
            <li>检查源文件并标记文件结构和元素名称。</li>
            <li>选择要导入的元素并且决定是否需要其他适当的限制。</li>
         </ol>
         <p>例如，下面的XML文件<i>prices.xml</i>是一个简短的包含价格记录的文件。每个价格记录包含两个字段：项目编号和价格。</p>
         <codeblock>&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;prices&gt;
  &lt;pricerecord&gt;
    &lt;itemnumber&gt;708421&lt;/itemnumber&gt;
    &lt;price&gt;19.99&lt;/price&gt;
  &lt;/pricerecord&gt;
  &lt;pricerecord&gt;
    &lt;itemnumber&gt;708466&lt;/itemnumber&gt;
    &lt;price&gt;59.25&lt;/price&gt;
  &lt;/pricerecord&gt;
  &lt;pricerecord&gt;
    &lt;itemnumber&gt;711121&lt;/itemnumber&gt;
    &lt;price&gt;24.99&lt;/price&gt;
  &lt;/pricerecord&gt;
&lt;/prices&gt;
</codeblock>
         <p>目的是把所有的数据导入到一个具有一个整数列<codeph>itemnumber</codeph>和一个小数列<codeph>price</codeph>的Greenplum数据库表中。</p>
      </body>
   </topic>
   <topic id="topic77">
      <title>编写转换</title>
      <body>
         <p>转换指定从数据中抽取什么。用户可以使用适合其项目的任何创作环境和语言。对于XML转换，基于项目的目标和范围选择一种如XSLT、Joost（STX）、Java、Python或者Perl的技术。</p>
         <p>在price的例子中，下一步是转换XML数据成一个简单的分隔成两列的格式。</p>
         <p>
            <codeblock>708421|19.99
708466|59.25
711121|24.99
</codeblock>
         </p>
         <p>下面的称为<i>input_transform.stx</i>的STX转换完成了这种数据转换。</p>
         <codeblock>&lt;?xml version="1.0"?&gt;
&lt;stx:transform version="1.0"
   xmlns:stx="http://stx.sourceforge.net/2002/ns"
   pass-through="none"&gt;
  &lt;!-- declare variables --&gt;
  &lt;stx:variable name="itemnumber"/&gt;
  &lt;stx:variable name="price"/&gt;
  &lt;!-- match and output prices as columns delimited by | --&gt;
  &lt;stx:template match="/prices/pricerecord"&gt;
    &lt;stx:process-children/&gt;
    &lt;stx:value-of select="$itemnumber"/&gt;    
&lt;stx:text&gt;|&lt;/stx:text&gt;
    &lt;stx:value-of select="$price"/&gt;      &lt;stx:text&gt;
&lt;/stx:text&gt;
  &lt;/stx:template&gt;
  &lt;stx:template match="itemnumber"&gt;
    &lt;stx:assign name="itemnumber" select="."/&gt;
  &lt;/stx:template&gt;
  &lt;stx:template match="price"&gt;
    &lt;stx:assign name="price" select="."/&gt;
  &lt;/stx:template&gt;
&lt;/stx:transform&gt;
</codeblock>
         <p>此STX转换声明两个临时变量<codeph>itemnumber</codeph> 和<codeph>price</codeph>，以及以下规则。</p>
         <ol id="ol_u5s_l12_pbb">
            <li id="du186530">当找到满足XPath表达式<codeph>/prices/pricerecord</codeph>的元素时，检查子元素并生成包含<codeph>itemnumber</codeph>变量值，一个<codeph>|</codeph>字符，price变量值和一个新行的输出。</li>
            <li id="du186531">当找到<codeph>&lt;itemnumber&gt;</codeph>元素时，将该元素的内容存储在变量<codeph>itemnumber</codeph>中。</li>
            <li id="du186677">当找到&lt;price&gt;元素后，将该元素的内容存储在变量<codeph>price</codeph>中。</li>
         </ol>
      </body>
   </topic>
   <topic id="topic78">
      <title>编写gpfdist配置文件</title>
      <body>
         <p><cmdname>gpfdist</cmdname>配置是一个YAML 1.1文档。它指定在装载或者抽取数据时<cmdname>gpfdist</cmdname>用来选择一种转换并应用的规则。</p>
         <p>这个<cmdname>gpfdist</cmdname> 配置的例子包含下列项：</p>
         <ul id="ul_lct_m12_pbb">
            <li id="du219363">定义<codeph>TRANSFORMATIONS</codeph>的<codeph>config.yaml</codeph>文件</li>
            <li id="du219364"><codeph>config.yaml</codeph>文件中引用的<codeph>input_transform.sh</codeph>包装器脚本</li>
            <li id="du219365"><codeph>input_transform.sh</codeph>中调用的joost转换<codeph>input_transform.stx</codeph></li>
         </ul>
         <p>除普通的YAML规则（如文档用三个破折号开始（<codeph>---</codeph>））之外，<cmdname>gpfdist</cmdname>配置必须符合下列限制：</p>
         <ol id="ol_mct_m12_pbb">
             <li id="du186770"><codeph>VERSION</codeph>设置必须出现并且值为<codeph>1.0.0.1</codeph>。</li>
            <li id="du186771"><codeph>TRANSFORMATIONS</codeph>设置必须出现并且包含一个或者更多个映射。</li>
            <li id="du186772"><codeph>TRANSFORMATION</codeph>中的每一个映射必须包含：<ul
                  id="ul_ass_j31_34">
                  <li id="du186773">一个值为'input'或者'output'的<codeph>TYPE</codeph></li>
                  <li id="du186774">一个表明转换如何运行的<codeph>COMMAND</codeph>。</li>
               </ul>
            </li>
            <li id="du186775"><codeph>TRANSFORMATION</codeph>中的每一个映射可以包含可选的<codeph>CONTENT</codeph>、<codeph>SAFE</codeph>以及<codeph>STDERR</codeph>设置。</li>
         </ol>
         <p>下面这个称为<codeph>config.yaml</codeph>的<cmdname>gpfdist</cmdname>配置适用于prices的例子。每一行开始的缩进是有意义的，它们反映了该说明的层级性。下面例子中的名称<codeph>prices_input</codeph>将在后面用SQL创建该表时引用。</p>
         <codeblock>---
VERSION: 1.0.0.1
TRANSFORMATIONS:
  prices_input:
    TYPE:     input
    COMMAND:  /bin/bash input_transform.sh %filename%
</codeblock>
         <p><codeph>COMMAND</codeph>设置使用了一个名为<codeph>input_transform.sh</codeph>的包装器脚本，它带有一个<codeph>%filename%</codeph>占位符。当<cmdname>gpfdist</cmdname>运行该<codeph>prices_input</codeph>转换时，它用<codeph>/bin/bash</codeph>调用<codeph>input_transform.sh</codeph> ，并且将<codeph>%filename%</codeph>占位符替换为要转换的输入文件的路径。名为<codeph>input_transform.sh</codeph>的包装器脚本包含调用STX转换并返回其输出的逻辑。</p>
         <p>如果使用了Joost，则必须安装Joost STX引擎。</p>
         <codeblock>#!/bin/bash
# input_transform.sh - sample input transformation, 
# demonstrating use of Java and Joost STX to convert XML into
# text to load into Greenplum Database.
# java arguments:
#   -jar joost.jar         joost STX engine
#   -nodecl                  don't generate a &lt;?xml?&gt; declaration
#   $1                        filename to process
#   input_transform.stx    the STX transformation
#
# the AWK step eliminates a blank line joost emits at the end
java \
    -jar joost.jar \
    -nodecl \
    $1 \
    input_transform.stx \
 | awk 'NF&gt;0
</codeblock>
         <p><codeph>input_transform.sh</codeph>文件使用带有AWK解释器的Joost STX引擎。下面的图表展示了<cmdname>gpfdist</cmdname>运行该转换的处理流程。</p>
         <image href="../../graphics/02-pipeline.png" placement="break" width="462px" height="190px"
            id="image_nct_m12_pbb"/>
      </body>
   </topic>
   <topic id="topic80">
      <title>传输数据</title>
      <body>
         <p>使用基于相应模式的SQL语句创建目标数据库表。</p>
         <p>对于保存已加载数据的Greenplum数据库表没有特殊要求。在<codeph>prices</codeph>示例中，以下命令创建要加载数据的<codeph>prices</codeph>表。</p>
         <codeblock>CREATE TABLE prices (
  itemnumber integer,       
  price       decimal        
) 
DISTRIBUTED BY (itemnumber);
</codeblock>
         <p>接下来，使用其中一种方法用<cmdname>gpfdist</cmdname>转换数据。</p>
         <ul id="ul_jfr_h32_pbb">
            <li id="du224442">
               <codeph>GPLOAD</codeph>只支持输入转换，但是在很多情况下更容易实现。</li>
            <li id="du224443">
               <codeph>INSERT INTO SELECT FROM</codeph>支持输入和输出转换，但是会暴露更多细节。</li>
         </ul>
      </body>
      <topic id="topic81">
         <title>用GPLOAD转换</title>
         <body>
            <p>Greenplum数据库<codeph>gpload</codeph>工具使用<codeph>gpfdist</codeph>并行文件服务器和YAML格式的配置文件来编排数据加载操作。<codeph>gpload</codeph>自动执行以下任务：</p>
            <ul id="ul_rt1_jnk_pbb">
               <li>在数据库中创建可读的外部表。</li>
               <li>使用包含转换的配置文件启动<codeph>gpfdist</codeph>实例。</li>
               <li>运行<codeph>INSERT INTO <varname>table_name</varname> SELECT FROM <varname>external_table</varname></codeph>以加载数据。</li>
               <li>删除外部表定义。</li>
            </ul>
            <p>Transforming data with 用<codeph>gpload</codeph> 转换数据要求出现在<codeph>gpload</codeph> 控制文件的INPUT节中的设置<codeph>TRANSFORM</codeph>和<codeph>TRANSFORM_CONFIG</codeph>。</p>
            <p>有关在<codeph>gpload</codeph>控制文件中这些设置的语法和布置，请见<i>Greenplum数据库参考指南</i>。</p>
            <ul id="ul_sy3_l32_pbb">
               <li id="du187470">
                  <codeph>TRANSFORM_CONFIG</codeph>指定<cmdname>gpfdist</cmdname>配置文件的名称。</li>
               <li id="du200069"><codeph>The TRANSFORM</codeph>设置表示<codeph>TRANSFORM_CONFIG</codeph>中提到的文件中描述的转换名称。</li>
            </ul>
            <codeblock>---
VERSION: 1.0.0.1
DATABASE: ops
USER: gpadmin
GPLOAD:
  INPUT:
    - TRANSFORM_CONFIG: config.yaml
    - TRANSFORM: prices_input
    - SOURCE:
        FILE: prices.xml</codeblock>
            <p>转换名称必须出现在两个位置：在<cmdname>gpfdist</cmdname>配置文件的<codeph>TRANSFORM</codeph>设置中以及在<codeph>TRANSFORM_CONFIG</codeph>节提到的文件的<codeph>TRANSFORMATIONS</codeph>节中。</p>
            <p>在<codeph>gpload</codeph>控制文件中，可选的参数<codeph>MAX_LINE_LENGTH</codeph>指定被传递给<codeph>gpload</codeph>的XML转换数据中一行的最大长度。</p>
            <p>下面的图表展示了<codeph>gpload</codeph>控制文件、<cmdname>gpfdist</cmdname>配置文件以及XML数据文件之间的关系。</p>
            <image href="../../graphics/03-gpload-files.jpg" placement="break" width="415px"
               height="258px" id="image_ty3_l32_pbb"/>
         </body>
      </topic>
      <topic id="topic82">
         <title>用INSERT INTO SELECT FROM转换</title>
         <body>
            <p>使用此加载方法，用户可以执行<codeph>gpload</codeph>自动执行的每个任务。用户启动<codeph>gpfdist</codeph>，创建一个外部表，加载数据，然后通过删除表并停止<codeph>gpfdist</codeph>来清理。</p>
            <p>在<codeph>CREATE EXTERNAL TABLE</codeph>定义的<codeph>LOCATION</codeph>子句中指定转换。例如，在下面的命令中转换被显示为粗体（使用命令<codeph>gpfdist -c config.yaml</codeph>先运行<cmdname>gpfdist</cmdname>）。</p>
            <codeblock>CREATE READABLE EXTERNAL TABLE prices_readable (LIKE prices)
   LOCATION ('gpfdist://hostname:8080/prices.xml<b>#transform=prices_input</b>')
   FORMAT 'TEXT' (DELIMITER '|')
   LOG ERRORS SEGMENT REJECT LIMIT 10;
</codeblock>
            <p>在上面的命令中，把<codeph>hostname</codeph>改成实际的主机名。<codeph>prices_input</codeph>来自于<codeph>gpfdist</codeph>配置文件。

</p>
            <p>下面的查询装载数据到<codeph>prices</codeph>表中。</p>
            <codeblock>INSERT INTO prices SELECT * FROM prices_readable;</codeblock>
         </body>
      </topic>
      <topic id="topic83">
         <title>配置文件格式</title>
         <body>
            <p><cmdname>gpfdist</cmdname>配置文件使用YAML 1.1文档格式并且实现了一种定义转换参数的方案。配置文件必须是一个合法的YAML文档。</p>
            <p><cmdname>gpfdist</cmdname>程序会按照顺序处理该文档并且使用缩进（空格）来判断文档的层次以及小节之间的关系。空白的使用很重要。不要使用空白来进行格式化也不要用制表符。</p>
            <p>下面是一个配置文件的基本结构。</p>
            <codeblock>---
VERSION:   1.0.0.1
TRANSFORMATIONS: 
  transformation_name1:
    TYPE:      input | output
    COMMAND:   command
    CONTENT:   data | paths
    SAFE:      posix-regex
    STDERR:    server | console
  transformation_name2:
    TYPE:      input | output
    COMMAND:   command 
...</codeblock>
            <parml>
               <plentry id="p_version">
                  <pt>VERSION</pt>
                  <pd>必需。<cmdname>gpfdist</cmdname>配置文件方案的版本。当前版本是1.0.0.1。</pd>
               </plentry>
               <plentry id="p_transformations">
                  <pt>TRANSFORMATIONS</pt>
                  <pd>必需。开始转换说明小节。一个配置文件必须有至少一个转换。当<cmdname>gpfdist</cmdname>收到一个转换请求时，它会在这个小节查找具有匹配的转换名称的项。 </pd>
               </plentry>
               <plentry id="p_type">
                  <pt>TYPE</pt>
                  <pd>必须。指定转换的方向。值是input或者output。值为
                        <codeph>input</codeph> 或者 <codeph>output</codeph>. <ul id="ul_f3p_j3q_34">
                        <li id="du198814">
                           <codeph>input</codeph>：<cmdname>gpfdist</cmdname>把转换处理的标准输出当做是要载入到Greenplum数据库的一个记录流。</li>
                        <li id="du198815">
                           <codeph>output</codeph>
                           <ph>: </ph>
                           <cmdname>gpfdist</cmdname> 把转换处理的标准输入当作是来自于Greenplum数据库的一个记录流并且写出到适当的输出。</li>
                     </ul>
                  </pd>
               </plentry>
               <plentry id="p_command">
                  <pt>COMMAND</pt>
                  <pd>
                     <p>必须。指定将被<cmdname>gpfdist</cmdname>执行来做转换的命令。</p>
                     <p>对于输入转换，<cmdname>gpfdist</cmdname>调用<codeph>CONTENT</codeph>设置中指定的命令。该命令应该会以适当的方式打开底层文件并且为每一行产生一个<codeph>TEXT</codeph>行以载入到Greenplum数据库。输入转换决定整个内容是应该被转换为一个行还是多个行。</p>
                     <p>对于输出转换，<cmdname>gpfdist</cmdname>调用在<codeph>CONTENT</codeph>设置中指定的命令。输出命令应该会以适当的方式打开底层文件并且向其中写入。输出转换决定转换好的输出的最终安置。</p>
                  </pd>
               </plentry>
               <plentry id="p_content">
                  <pt>CONTENT</pt>
                  <pd>
                     <p>可选。值是<codeph>data</codeph> 和 <codeph>paths</codeph>。默认值是<codeph>data</codeph>。</p>
                     <ul id="ul_wzg_43q_34">
                        <li id="du219653">当<codeph>CONTENT</codeph>指定<codeph>data</codeph>时，<codeph>COMMAND</codeph>小节中的文本<codeph>%filename%</codeph>会被替换为要读写的文件路径。</li>
                        <li id="du199214">当<codeph>CONTENT</codeph>指定<codeph>paths</codeph>时，<codeph>COMMAND</codeph>小节中的文本<codeph>%filename%</codeph>会被替换为包含要读写的文件列表的临时文件路径。</li>
                     </ul>
                     <p>下面是一个<codeph>COMMAND</codeph>小节的例子，它展示了被替换掉的文本<codeph>%filename%</codeph>。</p>
                     <p>
                        <codeblock>COMMAND: /bin/bash input_transform.sh %filename%</codeblock>
                     </p>
                  </pd>
               </plentry>
               <plentry id="p_safe">
                  <pt>SAFE</pt>
                  <pd>
                     <p>可选。一个<codeph>POSIX</codeph> 正则表达式，路径必须匹配它才能被传递给转换。在担心传递给命令的路径被注入或者被不正确解读时指定<codeph>SAFE</codeph>。默认对路径没有限制。</p>
                  </pd>
               </plentry>
               <plentry id="p_stderr">
                  <pt>STDERR</pt>
                  <pd>
                     <p>可选。值是<codeph>server</codeph> 和
                           <codeph>console</codeph>。

</p>
                     <p>这个设置指定如何处理来自于转换的标准错误输出。默认值<codeph>server</codeph>，指定 <cmdname>gpfdist</cmdname>将捕捉来自于转换的标准错误输出放在一个临时文件中，并且把该文件的前8k字节发送到Greenplum数据库作为一个错误消息。该错误消息将作为一个SQL错误出现。<codeph>Console</codeph>指定<cmdname>gpfdist</cmdname>不会重定向或者转换来自于转换的标准错误输出。</p>
                  </pd>
               </plentry>
            </parml>
         </body>
      </topic>
   </topic>
   <topic id="topic91">
      <title>XML转换示例</title>
      <body><p>下面的例子展示了对不同类型的XML数据以及STX转换的完整处理。与这些例子相关的文件和详细用法在GitHub仓库<codeph>github.com://greenplum-db/gpdb</codeph> <xref
                  href="https://github.com/greenplum-db/gpdb/blob/master/gpMgmt/demo/gpfdist_transform"
                  format="html" scope="external">gpMgmt/demo/gpfdist_transform</xref>目录中。在运行这些例子之前，请阅读<i>开始之前</i>小节中的README文件。README文件解释了如何下载这些例子中用到的示例数据文件。</p>
      </body>
      <topic id="topic32">
         <title>基于命令的外部Web表</title>
         <body>
            <p>一个shell命令或者脚本的输出可定义基于命令的Web表数据。在<codeph>CREATE EXTERNAL WEB TABLE</codeph>的<codeph>EXECUTE</codeph>子句中指定该命令。<codeph>EXECUTE</codeph>子句会在指定的Master以及（一个或者多个）Segment主机上运行该shell命令或脚本。该命令或脚本必须位于<codeph>EXECUTE</codeph>子句中定义的主机上。</p>
            <p>默认情况下，当活动Segment有输出行要处理时，该命令运行在Segment主机上。例如，如果每一个Segment主机运行四个有输出行要处理的主Segment实例，该命令在每个Segment主机上会运行四次。用户可以有选择地限制执行Web表命令的Segment实例的数量。<codeph>ON</codeph>子句中Web表定义里包括的所有Segment会并行运行该命令。</p>
            <p>用户在外部表定义中指定的命令从数据库中执行并且不能访问来自<codeph>.bashrc</codeph> 或者
                  <codeph>.profile</codeph>的环境变量。可在<codeph>EXECUTE</codeph>子句中设置环境变量。例如：</p>
            <p>
               <codeblock>=# CREATE EXTERNAL WEB TABLE output (output text)
    EXECUTE 'PATH=/home/gpadmin/programs; export PATH; myprogram.sh' 
    FORMAT 'TEXT';
</codeblock>
            </p>
            <p>脚本必须对<codeph>gpadmin</codeph>用户可执行并且在Master或者Segment主机上位于同一位置。</p>
            <p>下列命令定义一个运行脚本的Web表。该脚本在每一台有需要处理输出行的Segment的Segment主机上运行。 </p>
            <p>
               <codeblock>=# CREATE EXTERNAL WEB TABLE log_output 
    (linenum int, message text) 
    EXECUTE '/var/load_scripts/get_log_data.sh' ON HOST 
    FORMAT 'TEXT' (DELIMITER '|');
</codeblock>
            </p>
         </body>
      </topic>
      <topic id="topic93">
         <title>IRS MeF XML 文件（在demo目录中）</title>
         <body>
            <p>这个例子展示了使用一种Joost STX转换装载一份IRS Modernized eFile tax return数据样例。该数据是一种复杂的XML文件形式。</p>
            <p>美国国内税务署（IRS）在对XML进行了可观的投资并且指定在其现代化电子文件（MeF）系统中使用它。在MeF中，每一份纳税申报表都是一个具有深层次结构的XML文档，该层次结构仔细地反映了底层纳税代码的特定形式。</p>
            <p>XML、XML Schema和样式表在他们的数据表达和业务工作流中扮演了重要角色。实际的XML数据被从一个附加了MIME “transimission file”消息的ZIP文件中抽取。更多有关MeF的信息，请见IRS网站上的<xref href="https://www.irs.gov/uac/modernized-e-file-overview" scope="external" format="html">Modernized e-File (Overview)</xref>。</p>
            <p>样例XML文档<i>RET990EZ_2006.xml</i>大约有350KB大小，它有两个元素：</p>
            <ul id="ul_egs_y42_pbb">
               <li id="du202262">ReturnHeader</li>
               <li id="du202263">ReturnData</li>
            </ul>
            <p>&lt;ReturnHeader&gt; 元素包含了有关纳税申报表的一般细节，例如纳税人的姓名、纳税年份以及preparer。&lt;ReturnData&gt; 元素包含了多个小节，它们含有关于纳税申报表及相关计划表的特定细节。

</p>
            <p>下面是该XML文件的一个被删节过的例子。</p>
            <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;Return returnVersion="2006v2.0"
   xmlns="https://www.irs.gov/efile" 
   xmlns:efile="https://www.irs.gov/efile"
   xsi:schemaLocation="https://www.irs.gov/efile"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt; 
   &lt;ReturnHeader binaryAttachmentCount="1"&gt;
     &lt;ReturnId&gt;AAAAAAAAAAAAAAAAAAAA&lt;/ReturnId&gt;
     &lt;Timestamp&gt;1999-05-30T12:01:01+05:01&lt;/Timestamp&gt;
     &lt;ReturnType&gt;990EZ&lt;/ReturnType&gt;
     &lt;TaxPeriodBeginDate&gt;2005-01-01&lt;/TaxPeriodBeginDate&gt;
     &lt;TaxPeriodEndDate&gt;2005-12-31&lt;/TaxPeriodEndDate&gt;
     &lt;Filer&gt;
       &lt;EIN&gt;011248772&lt;/EIN&gt;
       ... more data ...
     &lt;/Filer&gt;
     &lt;Preparer&gt;
       &lt;Name&gt;Percy Polar&lt;/Name&gt;
       ... more data ...
     &lt;/Preparer&gt;
     &lt;TaxYear&gt;2005&lt;/TaxYear&gt;
   &lt;/ReturnHeader&gt;
   ... more data ..
</codeblock>
            <p>目标是把所有数据导入到一个Greenplum数据库。首先，将该XML文档转换为文本形式，其中的新行已被转义过并且有两个列： <codeph>ReturnId</codeph>和末尾的一个用于整个MeF纳税申报表的列。例如：</p>
            <p>
               <codeblock>AAAAAAAAAAAAAAAAAAAA|&lt;Return returnVersion="2006v2.0"... 
</codeblock>
            </p>
            <p>载入数据到Greenplum数据库。</p>
         </body>
      </topic>
      <topic id="topic94">
         <title> WITSML™ 文件 （在demo目录中）</title>
         <body>
            <p>这个例子展示了使用一种Joost STX转换载入描述一个石油钻塔的样例数据。该数据是一种从energistics.org下载的复杂的XML文件格式。</p>
            <p>Wellsite Information Transfer Standard Markup Language (WITSML™)是一种石油工业发起的为技术和软件提供开放的、非所有权的、标准的接口，以便在石油公司、服务公司、钻探承包商和监管代理之间分享信息。更多有关WITSML™的信息请见<xref href="http://www.energistics.org/"
                  scope="external" format="html">http://www.energistics.org/</xref>。</p>
            <p>石油钻塔的信息由一个顶层的<codeph>&lt;rigs&gt;</codeph>元素和多个子元素（例如<codeph>&lt;documentInfo&gt;, &lt;rig&gt;</codeph>,等）构成。下面从该文件中摘录的片段展示了<codeph>&lt;rig&gt;</codeph>标签中的信息的类型。</p>
            <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet href="../stylesheets/rig.xsl" type="text/xsl" media="screen"?&gt;
&lt;rigs 
 xmlns="http://www.energistics.org/schemas/131" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:schemaLocation="http://www.energistics.org/schemas/131 ../obj_rig.xsd" 
 version="1.3.1.1"&gt;
 &lt;documentInfo&gt;
 ... misc data ...
 &lt;/documentInfo&gt;
 &lt;rig uidWell="W-12" uidWellbore="B-01" uid="xr31"&gt;
     &lt;nameWell&gt;6507/7-A-42&lt;/nameWell&gt;
     &lt;nameWellbore&gt;A-42&lt;/nameWellbore&gt;
     &lt;name&gt;Deep Drill #5&lt;/name&gt;
     &lt;owner&gt;Deep Drilling Co.&lt;/owner&gt;
     &lt;typeRig&gt;floater&lt;/typeRig&gt;
     &lt;manufacturer&gt;Fitsui Engineering&lt;/manufacturer&gt;
     &lt;yearEntService&gt;1980&lt;/yearEntService&gt;
     &lt;classRig&gt;ABS Class A1 M CSDU AMS ACCU&lt;/classRig&gt;
     &lt;approvals&gt;DNV&lt;/approvals&gt;
 ... more data ...</codeblock>
            <p>目标是把这个钻塔的信息导入到Greenplum数据库。</p>
            <p>样例文档<i>rig.xml</i>的尺寸大约是11KB。输入不包含制表符，因此相关信息可以被转换成用竖线（|）分隔的记录。</p>
            <p>
               <codeph>W-12|6507/7-A-42|xr31|Deep Drill #5|Deep Drilling Co.|John
                  Doe|John.Doe@example.com|</codeph>
            </p>
            <p>有这些列：</p>
            <ul id="ul_ids_bp2_pbb">
               <li>
                  <codeph>well_uid text</codeph>, -- e.g. W-12 </li>
               <li>
                  <codeph>well_name text</codeph>, -- e.g. 6507/7-A-42 </li>
               <li>
                  <codeph>rig_uid text</codeph>, -- e.g. xr31 </li>
               <li>
                  <codeph>rig_name text</codeph>, -- e.g. Deep Drill #5 </li>
               <li>
                  <codeph>rig_owner text</codeph>, -- e.g. Deep Drilling Co. </li>
               <li>
                  <codeph>rig_contact text</codeph>, -- e.g. John Doe </li>
               <li>
                  <codeph>rig_email text</codeph>, -- e.g. John.Doe@example.com </li>
               <li>
                  <codeph>doc xml</codeph>
               </li>
            </ul>
            <p>然后，载入该数据到Greenplum数据库中。</p>
         </body>
      </topic>
   </topic>
</topic>
