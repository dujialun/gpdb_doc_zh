<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic9">
  <title>检测故障的Segment</title>
  <body>
    <p>如果启用了镜像，Greenplum数据库会在主Segment宕机后自动故障转移到一个镜像Segment上，镜像Segment承担
      主Segment的角色和职能，故障主Segment变成镜像，用户感觉不到segment产生了故障。当故障出现时，正在进行中
      的事务会回滚并在新的segment上自动重新开始。<codeph><xref
          href="../../../utility_guide/admin_utilities/gpstate.xml#topic1" type="topic"
          format="dita"/></codeph>工具可以用来分辨故障segment。该工具显示的系统表信息包括<codeph><xref
          href="../../../ref_guide/system_catalogs/gp_segment_configuration.xml"/></codeph>。</p>
    <p>如果整个Greenplum数据库系统由于一个Segment故障（例如，如果没有启用镜像或者没有足够的Segment在线
      以访问全部用户数据）而变得无法运转，用户在尝试连接到数据库时会看到错误。返回给客户端程序的错误可能表明
      失效。例如：</p>
    <codeblock>ERROR: All segment databases are unavailable</codeblock>
    <section>
      <title>segment故障如何被监测和管理</title>
      <p>在Greenplum数据库master主机上，Postgres的<codeph>postmaster</codeph>进程会创建一个错误侦测子进程
        <codeph>ftsprobe</codeph>。该进程也被称为FTS (Fault Tolerance Server)进程。如果FTS进程出现故障，
        <codeph>postmaster</codeph>会重启该进程。</p>
      <p dir="ltr">FTS进程循环执行，每个循环之间会停顿一会。每一个循环中，FTS都会从<codeph>gp_segment_configuration</codeph>
        系统表中获取每一个主segment实例的主机名和端口号，并通过与其建立TCP套接字连接的方式连接segment实例
        来侦测segment的状态。如果成功连接，segment会执行一些简单的检查并报告给FTS。该检查包括在关键的segment
        目录上执行一个<codeph>stat</codeph>系统调用，并且会检查segment实例的内部错误。如果没有检测到问题，FTS会
        收到一个积极的反馈信号，被检查的正常segment也不会采取任何附加操作。</p>
      <p dir="ltr">如果不能建立连接，或者在超时时间内没有得到反馈，FTS会尝试重新连接segment实例。
        如果达到了FTS的最大重试次数，FTS会去检测该segment的镜像看其是否在线，如果在线它就会修改
        <codeph>gp_segment_configuration</codeph>表，将原来的主segment标记为"down"并设置
        镜像承担主segment的角色。FTS会把执行过的操作更新到
            <codeph><xref href="../../../ref_guide/system_catalogs/gp_configuration_history.xml"
          /></codeph>表中。</p>
      <p dir="ltr">当系统中只有主segment正常，其对应的镜像故障时，主segment会进入<i>not synchronizing</i>
        状态并继续记录数据库日志变化，一旦镜像修复，便可以将这些变化继续同步，而不用从主segment执行一个完整的拷贝。
      </p>
      <p>运行<codeph>gpstate</codeph>工具并带有<codeph>-e</codeph>选项可以展示单个主segment和镜像segment实例
        的任何问题。<codeph>gpstate</codeph>的另外一些选项也能显示所有主segment或镜像segment实例的信息，例如
        <codeph>-m</codeph>（镜像实例信息）、<codeph>-c</codeph>（主segment和镜像segment配置信息），另外也可以
        显示主segment和镜像segment的问题。</p>
      <p dir="ltr">您也可以从系统表<codeph>gp_segment_configuration</codeph>查看当前模式：
        <codeph>s</codeph> (同步状态)<codeph>n</codeph> (非同步状态)，还有当前状态
          <codeph>u</codeph> (在线) or <codeph>d</codeph> (离线)。</p>
      <p dir="ltr"><codeph><xref href="../../../utility_guide/admin_utilities/gprecoverseg.xml"
          /></codeph>工具可以用于将离线的镜像segment重新加入集群。默认情况下，
          <codeph>gprecoverseg</codeph>会执行增量恢复，首先将镜像放入同步模式，接下来会重放主segment上
        记录下来的日志变化到镜像segment。如果增量恢复失败，整个恢复便会失败。此时可以执行<codeph>gprecoverseg</codeph>
        并带有<codeph>-F</codeph>选项，以执行一个全量恢复，该操作会复制主segment上的所有数据到镜像segment上。</p>
      <p>segment实例恢复后，<codeph>gpstate -e</codeph>命令可以列出所有切换了的主segment和镜像segment实例信息。
        该信息表示系统目前处于不均衡状态（主实例和镜像实例不在他们的初始配置角色）。如果系统目前处于不均衡状态，在segment
        主机系统上可能存在活动主segment实例分布不均匀的结果。</p>
      <p dir="ltr">系统表<codeph>gp_segment_configuration</codeph>包含列<codeph>role</codeph>和
        <codeph>preferred_role</codeph>。该列上的值为<codeph>p</codeph>代表主segment，<codeph>m</codeph>
        代表镜像segment。<codeph>role</codeph>列展示segment实例当前角色，<codeph>preferred_role</codeph>
        列展示segment实例原来的角色。</p>
      <p dir="ltr">在一个平衡的系统中，所有segment实例的<codeph>role</codeph>和<codeph>preferred_role</codeph>
        列都是对应一致的。当某一个列存在不一样的情况时，表明系统是不平衡的。为了重新平衡集群并将所有的segment恢复到他们
        本来的角色，可以运行<codeph>gprecoverseg</codeph>命令并带有<codeph>-r</codeph>选项。</p>
    </section>
    <section>
      <title>简单的故障转移和恢复示例</title>
      <p dir="ltr">本例子已经假设一个单独的主-镜像segment实例对中主segment故障并切换到镜像segment。
        以下表格展示在恢复到正常的主segment之前，segment实例在<codeph>gp_segment_configuration</codeph>
        表中的本来角色, 当前角色, 模式, 和状态：
        </p>
      <p>也可以通过执行<codeph>gpstate -e</codeph>来显示主segment和镜像segment的状态信息</p>
      <table frame="all" rowsep="1" colsep="1" id="table_hdk_jst_fgb">
        <tgroup cols="5">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <colspec colname="c5" colnum="5" colwidth="1.0*"/>
          <thead>
            <row>
              <entry/>
              <entry><codeph>本来角色</codeph></entry>
              <entry><codeph>当前角色</codeph></entry>
              <entry><codeph>模式</codeph></entry>
              <entry><codeph>状态</codeph></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Primary</entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>n</codeph><p>(not synchronizing)</p></entry>
              <entry><codeph>d</codeph><p>(down)</p></entry>
            </row>
            <row>
              <entry>Mirror</entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>n</codeph><p>(not synchronizing)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p>segment实例不在他们原来的最佳角色，主segment故障。镜像segment上线成为主segment，目前为非同步模式，
        因为他的镜像（之前失败的主segment）处于故障状态。当修复了故障问题后，使用<codeph>gprecoverseg</codeph>
        重新将失败的实例拉起并在主segment和镜像segment之间同步差异数据。</p>
      <p>一旦<codeph>gprecoverseg</codeph>操作完成，segment的状态如下表展示，主segment和镜像segment
        转换成为他们之前的最佳角色。</p>
      <table frame="all" rowsep="1" colsep="1" id="table_idk_jst_fgb">
        <tgroup cols="5">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <colspec colname="c5" colnum="5" colwidth="1.0*"/>
          <thead>
            <row>
              <entry/>
              <entry><codeph>本来角色</codeph></entry>
              <entry><codeph>当前角色</codeph></entry>
              <entry><codeph>模式</codeph></entry>
              <entry><codeph>状态</codeph></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Primary</entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>s</codeph><p>(synchronizing)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
            <row>
              <entry>Mirror</entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>s</codeph><p>(synchronizing)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p><codeph>gprecoverseg -r</codeph>命令通过将segment的角色切换回他们之前的最佳角色来重新平衡
        整个集群系统。</p>
      <table frame="all" rowsep="1" colsep="1" id="table_jdk_jst_fgb">
        <tgroup cols="5">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <colspec colname="c5" colnum="5" colwidth="1.0*"/>
          <thead>
            <row>
              <entry/>
              <entry><codeph>本来角色</codeph></entry>
              <entry><codeph>当前角色</codeph></entry>
              <entry><codeph>模式</codeph></entry>
              <entry><codeph>状态</codeph></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Primary</entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>p</codeph><p>(primary)</p></entry>
              <entry><codeph>s</codeph><p>(synchronized)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
            <row>
              <entry>Mirror</entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>m</codeph><p>(mirror)</p></entry>
              <entry><codeph>s</codeph><p>(synchronized)</p></entry>
              <entry><codeph>u</codeph><p>(up)</p></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>配置FTS行为</title>
      <p>有一系列的服务器配置参数会影响FTS行为：<parml>
          <plentry>
            <pt>gp_fts_probe_interval</pt>
            <pd>开始下一个FTS循环的时间间隔，以秒为单位。例如将该参数设置为60，检测循环持续10秒，那么FTS进程
              沉睡50秒。如果设置该参数为60，检测循环持续75秒，FTS进程沉睡0秒。该参数默认值为60，最大为3600。</pd>
          </plentry>
          <plentry>
            <pt>gp_fts_probe_timeout</pt>
            <pd>master到segment之间的检测超时时间，以秒为单位。默认20秒，最大3600秒。</pd>
          </plentry>
          <plentry>
            <pt>gp_fts_probe_retries</pt>
            <pd>检测segment失败后的重试次数，例如如果设置为5，那么首次失败后，会再进行4次检测尝试。默认为5。</pd>
          </plentry>
          <plentry>
            <pt>gp_log_fts</pt>
            <pd>FTS日志级别。可设置的值有："off", "terse", "verbose", or "debug"。
              "verbose"设置可以用在生产上，能为问题定位提供一些有用的数据。"debug"
              设置不能用在生产上。默认为："terse"。
              </pd>
          </plentry>
          <plentry>
            <pt>gp_segment_connect_timeout</pt>
            <pd>允许镜像响应的最大时间，以秒为单位。默认为：600（10分钟）
              </pd>
          </plentry>
        </parml></p>
      <p>除了可以使用FTS执行错误检查外，不能发送数据到其镜像segment的主segment可以改变镜像的状态为down。
        主segment会将同步数据暂时排队处理，如果<codeph>gp_segment_connect_timeout</codeph>时间超时，
        此时意味着镜像故障，系统会标记镜像为down并将主segment变为变化追踪（change tracking）模式。</p>
    </section>
  </body>
</topic>
